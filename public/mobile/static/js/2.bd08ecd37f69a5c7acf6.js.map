{"version":3,"sources":["webpack:///src/components/editor/Editor.vue","webpack:///./src/components/editor/Editor.vue?0278","webpack:///./src/components/editor/Editor.vue","webpack:///./node_modules/core-js/library/modules/es6.object.keys.js","webpack:///./node_modules/babel-runtime/core-js/object/keys.js","webpack:///./node_modules/core-js/library/fn/object/keys.js","webpack:///./node_modules/wangeditor/release/wangEditor.js","webpack:///./node_modules/core-js/library/modules/_object-sap.js"],"names":["citys","百科","军事","科幻","人物","手机","readAndEditor","Object","vuex_esm","login","Editor","name","data","editor","title","showPicker","columns","values","keys_default","className","defaultIndex","showValue","finalValue","ws_publish","methods","extends_default","mapMutations","setHandler","moBooleanHandler","articleContentHandler","onChange","picker","setColumnValues","onConfirm","console","log","this","publish","_this","hasLogin","txt","text","isDoing","moBoolean","params","editorContent","html","articleId","articleContent","article_id","$api","article","moPublish","then","res","admin_stop","$formatDate","Date","$toast","dataURLtoFile","dataurl","filename","arr","split","mime","match","bstr","atob","n","length","u8arr","Uint8Array","charCodeAt","File","type","toListenUp","customConfig","uploadImgHooks","before","xhr","files","success","result","fail","error","timeout","customInsert","insertImg","watch","mounted","_this2","that","wangEditor_default","a","$refs","toolBar","uploadImgShowBase64","uploadImgMaxLength","uploadImgMaxSize","withCredentials","uploadImgTimeout","zIndex","menus","customUploadImg","insert","whatKB","size","quality","undefined","reader","FileReader","readAsDataURL","onload","e","image","Image","src","target","w","width","canvas","height","document","createElement","context","getContext","drawImage","finalDataUrl","toDataURL","formData","FormData","append","editorImg","imgUrl","create","article_contentHTML","article_title","computed","get","$store","_modulesNamespaceMap","state","set","value","commit","mapState","beforeRouteLeave","to","from","next","editor_Editor","render","_vm","_h","$createElement","_c","_self","staticClass","attrs","placeholder","maxlength","autosize","show-word-limit","model","callback","$$v","expression","_v","ref","readonly","clickable","label","on","click","$event","position","show-toolbar","change","confirm","cancel","directives","rawName","staticRenderFns","Component","__webpack_require__","normalizeComponent","ssrContext","__webpack_exports__","toObject","$keys","it","module","exports","default","__esModule","keys","factory","isDOMList","selector","HTMLCollection","NodeList","eventList","DomElement","div","nodeType","selectorResult","Array","replace","trim","indexOf","innerHTML","children","querySelectorAll","i","$","prototype","constructor","forEach","fn","elem","call","clone","deep","cloneList","push","cloneNode","index","first","last","types","addEventListener","matches","off","removeEventListener","attr","key","val","getAttribute","setAttribute","addClass","filter","item","join","removeClass","css","currentStyle","style","resultArr","map","show","hide","childNodes","$children","child","appendChild","remove","parent","parentElement","removeChild","isContain","$child","contains","getSizeData","getBoundingClientRect","getNodeName","nodeName","find","focus","parentUntil","_currentElem","results","equal","$elem","insertBefore","referenceNode","parentNode","insertAfter","lastChild","nextSibling","offAll","config","fontNames","colors","emotions","content","alt","debug","linkCheck","link","linkImgCheck","pasteFilterStyle","pasteIgnoreImg","pasteTextHandle","showLinkImg","linkImgCallback","url","uploadFileName","uploadImgParams","uploadImgHeaders","qiniu","UA","_ua","navigator","userAgent","isWebkit","test","isIE","window","objForEach","obj","hasOwnProperty","arrForEach","fakeArr","getRandom","prefix","Math","random","toString","slice","replaceHtmlSymbol","isFunction","Bold","_active","onClick","isSeleEmpty","selection","isSelectionEmpty","createEmptyRange","cmd","do","collapseRange","restoreSelection","tryChangeActive","queryCommandState","replaceLang","str","langArgs","reg","_emptyFn","DropList","menu","opt","$container","$title","titleHtml","list","$list","elemHtml","$li","hideTimeoutId","setTimeout","_rendered","_show","Head","droplist","_command","FontSize","FontName","fontName","clearTimeout","$menuELem","menuHeight","showTimeoutId","$selectionElem","getSelectionContainerElem","$textElem","cmdValue","queryCommandValue","emptyFn","_isCreatedPanelMenus","Panel","Link","Italic","Redo","StrikeThrough","Underline","Undo","List","Justify","ForeColor","color","BackColor","Quote","Code","Emoticon","Table","Video","imgMenuId","$body","$textContainerElem","$closeBtn","$tabTitleContainer","$tabContentContainer","tabs","tabTitleArr","tabContentArr","tab","tabIndex","tpl","$content","_index","stopPropagation","events","event","$inputs","_hideOtherPanels","panel","$linkelem","createRangeByElem","_createPanel","getSelectionText","inputLinkId","inputTextId","btnOkId","btnDelId","delBtnDisplay","$link","$text","_insertLink","_delLink","selectionText","checkResult","alert","$selectionELem","$parent","$startElem","getSelectionStartElem","$endElem","getSelectionEndElem","$code","textId","btnId","_insertCode","_updateCode","$parentElem","tabConfig","emotData","emotType","faceHtml","$target","insertHtml","_insert","emotHtml","_createEditPanel","_createInsertPanel","btnInsertId","textRowNum","textColNum","rowNum","parseInt","colNum","r","c","addRowBtnId","addColBtnId","delRowBtnId","delColBtnId","delTableBtnId","_addRow","_addCol","_delRow","_delCol","_delTable","_getLocationData","$tr","$tds","tdLength","td","$trs","trLength","tr","locationData","$currentTr","newTr","trData","tdIndex","$currentTd","toLowerCase","$table","textValId","width30","width50","width100","delBtn","$img","_selectedImg","uploadImg","upTriggerId","upFileId","linkUrlId","linkBtnId","tabsConfig","fileElem","fileList","insertLinkImg","tabsConfigResult","uploadImgServer","MenuConstructors","Menus","getPasteText","clipboardData","originalEvent","getData","Text","Command","API","_currentRange","Progress","_time","_isShow","_isRender","_timeoutId","$textContainer","$bar","bold","head","fontSize","italic","redo","strikeThrough","underline","undo","justify","foreColor","backColor","quote","code","emoticon","table","video","init","menuKey","MenuConstructor","_addToToolbar","_bindEvent","$toolbarElem","getRange","changeActive","clear","initSelection","getJSON","getChildrenJSON","curElem","elemResult","textContent","tag","attrData","attrList","attributes","attrListLength","_saveRangeRealTime","_enterKeyHandle","_clearHandle","_pasteHandle","_tabHandle","_imgHandle","_dragHandle","saveRange","insertEmptyP","$p","keyCode","selectionNodeName","parentNodeName","queryCommandSupported","_willBreakCode","preventDefault","_startOffset","startOffset","codeLength","codeHandle","txtHtml","ignoreImg","pasteTime","canDo","now","flag","pasteHtml","filterStyle","pasteText","docSplitHtml","getPasteHtml","ex","pasteFiles","items","getAsFile","getPasteImgs","dataTransfer","_useStyleWithCSS","execCommand","_name","_execCommand","_insertHTML","range","insertNode","deleteContents","pasteHTML","_insertElem","_range","getSelection","rangeCount","getRangeAt","$containerElem","toStart","collapse","commonAncestorContainer","startContainer","endContainer","endOffset","removeAllRanges","addRange","setEnd","isContent","createRange","selectNodeContents","selectNode","progress","timeoutId","_hide","_typeof","Symbol","iterator","UploadImg","_alert","alertInfo","debugInfo","customAlert","Error","img","onerror","onabort","_this3","maxSize","maxSizeM","maxLength","uploadImgParamsWithUrl","hooks","resultFiles","errInfo","file","bind","formdata","uploadImgServerArr","uploadImgServerHash","XMLHttpRequest","open","ontimeout","upload","onprogress","percent","progressBar","lengthComputable","loaded","total","onreadystatechange","readyState","status","responseText","JSON","parse","errno","beforeResult","prevent","msg","setRequestHeader","send","editorId","toolbarSelector","textSelector","id","_initConfig","assign","lang","RegExp","_initDom","$toolbarSelector","config$$1","toolbarElemId","textElemId","compositionEnd","onfocus","onblur","isFocus","isChild","isToolbar","isMenu","_initCommand","_initSelectionAPI","_initUploadImg","_initMenus","_initText","newLine","$last","onChangeTimeoutId","beforeChangeHtml","onchangeTimeout","onchange","currentHtml","_offAllEvent","varArgs","TypeError","arguments","nextSource","nextKey","Element","matchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector","webkitMatchesSelector","s","ownerDocument","getElementsByTagName","wangEditor","$export","core","fails","KEY","exec","exp","S","F"],"mappings":"sLA+CAA,GACAC,MAAA,yCACAC,MAAA,8CACAC,MAAA,kCACAC,MAAA,2BACAC,MAAA,wBAGAC,EAAAC,OAAAC,EAAA,EAAAD,CAAA,iBACAE,EAAAF,OAAAC,EAAA,EAAAD,CAAA,SAGAG,GACAC,KAAA,aACAC,KAFA,WAGA,OACAC,OAAA,GAGAC,MAAA,GACAC,YAAA,EAEAC,UAEAC,OAAAC,IAAAlB,GACAmB,UAAA,YAGAF,OAAAjB,EAAA,MACAmB,UAAA,UACAC,aAAA,IAKAC,UAAA,GACAC,WAAA,GAGAC,YAAA,IAcAC,QAAAC,OAEAhB,EAAAiB,cACAC,WAAA,eAGArB,EAAAoB,cACAE,iBAAA,qBAEAtB,EAAAoB,cACAG,sBAAA,2BAEAC,SAZA,SAYAC,EAAAd,GACAc,EAAAC,gBAAA,EAAAhC,EAAAiB,EAAA,MAEAgB,UAfA,SAeAhB,GACAiB,QAAAC,IAAAlB,GACAmB,KAAAf,UAAAJ,EAAA,cAAAA,EAAA,GACAmB,KAAAd,WAAAL,EACAmB,KAAArB,YAAA,GAGAsB,QAtBA,WAsBA,IAAAC,EAAAF,KAEA,QAAAA,KAAAG,SAKA,QAAAH,KAAAd,WAIA,QAAAc,KAAAtB,MAIA,QAAAsB,KAAAvB,OAAA2B,IAAAC,QAIA,QAAAL,KAAAb,WAKA,GAFAa,KAAAb,YAAA,EACAa,KAAAM,SAAA,EACA,KAAAN,KAAAO,UAAA,CAEA,IAAAC,GACA9B,MAAAsB,KAAAtB,MAEA+B,cAAAT,KAAAvB,OAAA2B,IAAAM,OACAxB,WAAAc,KAAAd,WACAyB,UAAAX,KAAAY,eAAAC,YAEAf,QAAAC,IAAA,OAAAC,KAAAvB,OAAA2B,IAAAM,QACAV,KAAAc,KAAAC,QAAAC,UAAAR,GAAAS,KACA,SAAAC,GACAhB,EAAAI,SAAA,EACAJ,EAAAf,YAAA,EAEA+B,EAAA1C,KAAA2C,YACAD,EAAA1C,KAAA2C,WAAAjB,EAAAkB,YAAA,IAAAC,KAAAH,EAAA1C,KAAA2C,aACAjB,EAAAoB,OAAA,UAAAJ,EAAA1C,KAAA2C,WAAA,WACA,WAAAD,EAAA1C,MACA0B,EAAAoB,OAAA,gBAaA,CAEAd,GACA9B,MAAAsB,KAAAtB,MAGA+B,cAAAT,KAAAvB,OAAA2B,IAAAM,OACAxB,WAAAc,KAAAd,YAEAc,KAAAc,KAAAC,QAAAd,QAAAO,GAAAS,KACA,SAAAC,GACApB,QAAAC,IAAAmB,EAAA1C,KAAA,YACA0B,EAAAI,SAAA,EACAJ,EAAAf,YAAA,EACA+B,EAAA1C,KAAA2C,YACAD,EAAA1C,KAAA2C,WAAAjB,EAAAkB,YAAA,IAAAC,KAAAH,EAAA1C,KAAA2C,aACAjB,EAAAoB,OAAA,UAAAJ,EAAA1C,KAAA2C,WAAA,WACA,gBAAAD,EAAA1C,KACA0B,EAAAoB,OAAA,aACA,WAAAJ,EAAA1C,OACA0B,EAAAoB,OAAA,UACApB,EAAAX,YAAA,sCA7DAS,KAAAsB,OAAA,gBAJAtB,KAAAsB,OAAA,gBAJAtB,KAAAsB,OAAA,gBALAtB,KAAAsB,OAAA,UAkHAC,cA3IA,SA2IAC,EAAAC,GAGA,IAFA,IAAAC,EAAAF,EAAAG,MAAA,KAAAC,EAAAF,EAAA,GAAAG,MAAA,cACAC,EAAAC,KAAAL,EAAA,IAAAM,EAAAF,EAAAG,OAAAC,EAAA,IAAAC,WAAAH,GACAA,KACAE,EAAAF,GAAAF,EAAAM,WAAAJ,GAEA,WAAAK,MAAAH,GAAAT,GAAAa,KAAAV,KAGAW,WApJA,SAoJA9D,GAEAA,EAAA+D,aAAAC,gBACAC,OAAA,SAAAC,EAAAlE,EAAAmE,KAmCAC,QAAA,SAAAF,EAAAlE,EAAAqE,KAIAC,KAAA,SAAAJ,EAAAlE,EAAAqE,KAIAE,MAAA,SAAAL,EAAAlE,KAIAwE,QAAA,SAAAN,EAAAlE,KAOAyE,aAAA,SAAAC,EAAAL,EAAArE,GAIA0E,EADAL,EAAAtE,KAAA,SASA4E,SAUAC,QA5QA,WA4QA,IAAAC,EAAAtD,KACAuD,EAAAvD,KACAvB,EAAA,IAAA+E,EAAAC,EAAAzD,KAAA0D,MAAAC,QAAA3D,KAAA0D,MAAAjF,QACAuB,KAAAvB,SAEAA,EAAA+D,cAQAoB,qBAAA,EAGAC,mBAAA,EACAC,iBAAA,SAEAC,iBAAA,EACAC,iBAAA,IACAC,OAAA,EACAC,OACA,OACA,OAQA,OACA,OAEA,QACA,WACA,QACA,SAMAC,gBAAA,SAAAvB,EAAAwB,GAEA,QAAAd,EAAAnD,SAAA,CAIAL,QAAAC,IAAA,MAAA6C,EAAA,IAEA,IAAAyB,EAAAzB,EAAA,GAAA0B,KAAA,KACAxE,QAAAC,IAAAsE,EAAA,UACA,IAAAE,OAAA,EACAF,EAAA,IACAE,EAAA,GAAAF,EACAvE,QAAAC,IAAAwE,EAAA,OAEAA,OAAAC,EAGA,IAAAC,EAAA,IAAAC,WACAD,EAAAE,cAAA/B,EAAA,IACA6B,EAAAG,OAAA,SAAAC,GAEA,IAAAC,EAAA,IAAAC,MACAD,EAAAE,IAAAH,EAAAI,OAAAnC,OACAgC,EAAAF,OAAA,WACA,IAAAM,EAAA,EAAAJ,EAAAK,MAGAC,GAFAN,EAAAO,OAEAC,SAAAC,cAAA,WACAC,EAAAJ,EAAAK,WAAA,MAEAL,EAAAD,MAAAD,EACAE,EAAAC,OAAAH,GAAAJ,EAAAO,OAAAP,EAAAK,OACAK,EAAAE,UAAAZ,EAAA,IAAAM,EAAAD,MAAAC,EAAAC,QAEA,IAAAM,EAAAP,EAAAQ,UAAA,aAAArB,GACA3B,EAAA,GAAAW,EAAAhC,cAAAoE,EAAA/C,EAAA,GAAArE,MAEA,IAAAsH,EAAA,IAAAC,SACAD,EAAAE,OAAA,YAAAnD,EAAA,IACAU,EAAAxC,KAAAC,QAAAiF,UAAAH,GAAA5E,KACA,SAAAC,GACAA,EAAA1C,KAEA4F,EAAAlD,EAAA1C,KAAAyH,QACA3C,EAAAhC,OAAA,mBA1CAgC,EAAAhC,OAAA,WA0DAtB,KAAAuC,WAAA9D,GAEAA,EAAAyH,SAKA,KAAAlG,KAAAO,YACA9B,EAAA2B,IAAAM,KAAAV,KAAAY,eAAAuF,qBACAnG,KAAAtB,MAAAsB,KAAAY,eAAAwF,eAEAtG,QAAAC,IAAAC,KAAAY,eAAAuF,sBAEAE,SAAAhH,KACAiB,SACAgG,IADA,WAEA,OAAAtG,KAAAuG,OAAAC,qBAAA,QAAAhB,QAAAiB,MAAAnG,SAEAoG,IAJA,SAIAC,GACA3G,KAAAuG,OAAAC,qBAAA,QAAAhB,QAAAoB,OAAA,iBAAAD,MAGAtI,EAAAwI,UACA1G,SAAA,SAAAsG,GAAA,OAAAA,EAAAtG,YAEAjC,EAAA2I,UACAtG,UAAA,SAAAkG,GAAA,OAAAA,EAAAlG,aAEArC,EAAA2I,UACAjG,eAAA,SAAA6F,GAAA,OAAAA,EAAA7F,mBAGAkG,iBArZA,SAqZAC,EAAAC,EAAAC,GACAjH,KAAAR,kBAAA,GACAQ,KAAAP,sBAAA,IACAwH,MChdeC,GADEC,OAFjB,WAA0B,IAAAC,EAAApH,KAAaqH,EAAAD,EAAAE,eAA0BC,EAAAH,EAAAI,MAAAD,IAAAF,EAAwB,OAAAE,EAAA,OAAiBE,YAAA,eAAyBF,EAAA,aAAkBE,YAAA,aAAAC,OAAgCC,YAAA,WAAAC,UAAA,KAAAC,SAAA,GAAAC,kBAAA,GAAAxF,KAAA,YAA+FyF,OAAQpB,MAAAS,EAAA,MAAAY,SAAA,SAAAC,GAA2Cb,EAAA1I,MAAAuJ,GAAcC,WAAA,WAAqBd,EAAAe,GAAA,KAAAZ,EAAA,OAAwBa,IAAA,UAAAX,YAAA,YAAoCL,EAAAe,GAAA,KAAAZ,EAAA,OAAwBa,IAAA,SAAAX,YAAA,WAAkCL,EAAAe,GAAA,KAAAZ,EAAA,aAA8BG,OAAOW,SAAA,GAAAC,UAAA,GAAAC,MAAA,OAAA5B,MAAAS,EAAAnI,UAAA0I,YAAA,QAAuFa,IAAKC,MAAA,SAAAC,GAAyBtB,EAAAzI,YAAA,MAAwByI,EAAAe,GAAA,KAAAZ,EAAA,aAA8BG,OAAOiB,SAAA,UAAoBZ,OAAQpB,MAAAS,EAAA,WAAAY,SAAA,SAAAC,GAAgDb,EAAAzI,WAAAsJ,GAAmBC,WAAA,gBAA0BX,EAAA,cAAmBG,OAAO9I,QAAAwI,EAAAxI,QAAAgK,eAAA,IAAwCJ,IAAKK,OAAAzB,EAAA1H,SAAAoJ,QAAA1B,EAAAvH,UAAAkJ,OAAA,SAAAL,GAAwEtB,EAAAzI,YAAA,OAAyB,GAAAyI,EAAAe,GAAA,KAAAZ,EAAA,cAAmCE,YAAA,UAAAC,OAA6BpF,KAAA,UAAAgC,KAAA,SAAgCkE,IAAKC,MAAArB,EAAAnH,WAAqBsH,EAAA,QAAayB,aAAazK,KAAA,OAAA0K,QAAA,SAAAtC,OAAAS,EAAAjI,WAAA+I,WAAA,kBAAgFd,EAAAe,GAAA,UAAAf,EAAAe,GAAA,KAAAZ,EAAA,QAA0CyB,aAAazK,KAAA,OAAA0K,QAAA,SAAAtC,MAAAS,EAAA,WAAAc,WAAA,iBAA8Ed,EAAAe,GAAA,mBAEhzCe,oBCEjB,IAcAC,EAdyBC,EAAQ,OAcjCC,CACE/K,EACA4I,GATF,EAXA,SAAAoC,GACEF,EAAQ,QACRA,EAAQ,SAaV,kBAEA,MAUeG,EAAA,QAAAJ,EAAiB,8BC1BhC,IAAAK,EAAeJ,EAAQ,QACvBK,EAAYL,EAAQ,QAEpBA,EAAQ,OAARA,CAAuB,kBACvB,gBAAAM,GACA,OAAAD,EAAAD,EAAAE,kDCNAC,EAAAC,SAAkBC,QAAYT,EAAQ,QAAgCU,YAAA,yBCAtEV,EAAQ,QACRO,EAAAC,QAAiBR,EAAQ,QAAqBjL,OAAA4L,6BCD9C,IAAAC,IAIC,WAAqB,aA4DtB,SAAAC,EAAAC,GACA,QAAAA,IAGAA,aAAAC,gBAAAD,aAAAE,UAiBA,IAAAC,KAGA,SAAAC,EAAAJ,GACA,GAAAA,EAAA,CAKA,GAAAA,aAAAI,EACA,OAAAJ,EAGAlK,KAAAkK,WACA,IA3CAxJ,EACA6J,EA0CAC,EAAAN,EAAAM,SAGAC,KACA,IAAAD,EAEAC,GAAAP,GACK,IAAAM,EAELC,GAAAP,GACKD,EAAAC,iBAAAQ,MAELD,EAAAP,EACK,iBAAAA,IAGL,KADAA,IAAAS,QAAA,aAAAC,QACAC,QAAA,MA3DAnK,EA6DAwJ,EA5DAK,OAAA,GACAA,EAAAjF,SAAAC,cAAA,QACAuF,UAAApK,EA0DA+J,EAzDAF,EAAAQ,UA4DAN,EA7CA,SAAAP,GACA,IAAApH,EAAAwC,SAAA0F,iBAAAd,GACA,OAAAD,EAAAnH,GACAA,GAEAA,GAwCAkI,CAAAd,IAIA,IAAAjI,EAAAwI,EAAAxI,OACA,IAAAA,EAEA,OAAAjC,KAIA,IAAAiL,OAAA,EACA,IAAAA,EAAA,EAAeA,EAAAhJ,EAAYgJ,IAC3BjL,KAAAiL,GAAAR,EAAAQ,GAEAjL,KAAAiC,UAuYA,SAAAiJ,EAAAhB,GACA,WAAAI,EAAAJ,GApYAI,EAAAa,WACAC,YAAAd,EAGAe,QAAA,SAAAC,GACA,IAAAL,OAAA,EACA,IAAAA,EAAA,EAAmBA,EAAAjL,KAAAiC,OAAiBgJ,IAAA,CACpC,IAAAM,EAAAvL,KAAAiL,GAEA,QADAK,EAAAE,KAAAD,IAAAN,GAEA,MAGA,OAAAjL,MAIAyL,MAAA,SAAAC,GACA,IAAAC,KAIA,OAHA3L,KAAAqL,QAAA,SAAAE,GACAI,EAAAC,KAAAL,EAAAM,YAAAH,MAEAR,EAAAS,IAIArF,IAAA,SAAAwF,GACA,IAAA7J,EAAAjC,KAAAiC,OAIA,OAHA6J,GAAA7J,IACA6J,GAAA7J,GAEAiJ,EAAAlL,KAAA8L,KAIAC,MAAA,WACA,OAAA/L,KAAAsG,IAAA,IAIA0F,KAAA,WACA,IAAA/J,EAAAjC,KAAAiC,OACA,OAAAjC,KAAAsG,IAAArE,EAAA,IAIAuG,GAAA,SAAAlG,EAAA4H,EAAAoB,GAEAA,IACAA,EAAApB,EACAA,EAAA,MAIA,IAAA+B,KAGA,OAFAA,EAAA3J,EAAAX,MAAA,OAEA3B,KAAAqL,QAAA,SAAAE,GACAU,EAAAZ,QAAA,SAAA/I,GACAA,IAKA+H,EAAAuB,MACAL,OACAjJ,OACAgJ,OAGApB,EAOAqB,EAAAW,iBAAA5J,EAAA,SAAAuC,GACA,IAAAI,EAAAJ,EAAAI,OACAA,EAAAkH,QAAAjC,IACAoB,EAAAE,KAAAvG,EAAAJ,KARA0G,EAAAW,iBAAA5J,EAAAgJ,SAgBAc,IAAA,SAAA9J,EAAAgJ,GACA,OAAAtL,KAAAqL,QAAA,SAAAE,GACAA,EAAAc,oBAAA/J,EAAAgJ,MAKAgB,KAAA,SAAAC,EAAAC,GACA,aAAAA,EAEAxM,KAAA,GAAAyM,aAAAF,GAGAvM,KAAAqL,QAAA,SAAAE,GACAA,EAAAmB,aAAAH,EAAAC,MAMAG,SAAA,SAAA5N,GACA,OAAAA,EAGAiB,KAAAqL,QAAA,SAAAE,GACA,IAAA7J,OAAA,EACA6J,EAAAxM,YAGA2C,GADAA,EAAA6J,EAAAxM,UAAA4C,MAAA,OACAiL,OAAA,SAAAC,GACA,QAAAA,EAAAjC,UAGAC,QAAA9L,GAAA,GACA2C,EAAAkK,KAAA7M,GAGAwM,EAAAxM,UAAA2C,EAAAoL,KAAA,MAEAvB,EAAAxM,cAjBAiB,MAuBA+M,YAAA,SAAAhO,GACA,OAAAA,EAGAiB,KAAAqL,QAAA,SAAAE,GACA,IAAA7J,OAAA,EACA6J,EAAAxM,YAGA2C,GADAA,EAAA6J,EAAAxM,UAAA4C,MAAA,OACAiL,OAAA,SAAAC,GAGA,UAFAA,IAAAjC,SAEAiC,IAAA9N,KAMAwM,EAAAxM,UAAA2C,EAAAoL,KAAA,QAhBA9M,MAsBAgN,IAAA,SAAAT,EAAAC,GACA,IAAAS,EAAAV,EAAA,IAAAC,EAAA,IACA,OAAAxM,KAAAqL,QAAA,SAAAE,GACA,IAAA2B,GAAA3B,EAAAkB,aAAA,cAAA7B,OAEAuC,KACAD,GAEAA,EAAAvL,MAAA,KACA0J,QAAA,SAAAwB,GAEA,IAAAnL,EAAAmL,EAAAlL,MAAA,KAAAyL,IAAA,SAAAnC,GACA,OAAAA,EAAAL,SAEA,IAAAlJ,EAAAO,QACAkL,EAAAvB,KAAAlK,EAAA,OAAAA,EAAA,OAIAyL,IAAAC,IAAA,SAAAP,GACA,WAAAA,EAAAhC,QAAA0B,GACAU,EAEAJ,KAGAhC,QAAAoC,GAAA,GACAE,EAAAvB,KAAAqB,GAGA1B,EAAAmB,aAAA,QAAAS,EAAAL,KAAA,QAGAvB,EAAAmB,aAAA,QAAAO,MAMAI,KAAA,WACA,OAAArN,KAAAgN,IAAA,oBAIAM,KAAA,WACA,OAAAtN,KAAAgN,IAAA,mBAIAjC,SAAA,WACA,IAAAQ,EAAAvL,KAAA,GACA,OAAAuL,EAIAL,EAAAK,EAAAR,UAHA,MAOAwC,WAAA,WACA,IAAAhC,EAAAvL,KAAA,GACA,OAAAuL,EAIAL,EAAAK,EAAAgC,YAHA,MAOAxH,OAAA,SAAAyH,GACA,OAAAxN,KAAAqL,QAAA,SAAAE,GACAiC,EAAAnC,QAAA,SAAAoC,GACAlC,EAAAmC,YAAAD,QAMAE,OAAA,WACA,OAAA3N,KAAAqL,QAAA,SAAAE,GACA,GAAAA,EAAAoC,OACApC,EAAAoC,aACa,CACb,IAAAC,EAAArC,EAAAsC,cACAD,KAAAE,YAAAvC,OAMAwC,UAAA,SAAAC,GACA,IAAAzC,EAAAvL,KAAA,GACAyN,EAAAO,EAAA,GACA,OAAAzC,EAAA0C,SAAAR,IAIAS,YAAA,WAEA,OADAlO,KAAA,GACAmO,yBAIAC,YAAA,WAEA,OADApO,KAAA,GACAqO,UAIAC,KAAA,SAAApE,GAEA,OAAAgB,EADAlL,KAAA,GACAgL,iBAAAd,KAIA7J,KAAA,SAAAmM,GACA,OAAAA,EAQAxM,KAAAqL,QAAA,SAAAE,GACAA,EAAAT,UAAA0B,IAPAxM,KAAA,GACA8K,UAAAH,QAAA,oBACA,YAWAjK,KAAA,SAAAiG,GACA,IAAA4E,EAAAvL,KAAA,GACA,aAAA2G,EACA4E,EAAAT,WAEAS,EAAAT,UAAAnE,EACA3G,OAKAwM,IAAA,WAEA,OADAxM,KAAA,GACA2G,MAAAiE,QAIA2D,MAAA,WACA,OAAAvO,KAAAqL,QAAA,SAAAE,GACAA,EAAAgD,WAKAX,OAAA,WAEA,OAAA1C,EADAlL,KAAA,GACA6N,gBAIAW,YAAA,SAAAtE,EAAAuE,GACA,IAAAC,EAAApJ,SAAA0F,iBAAAd,GACAjI,EAAAyM,EAAAzM,OACA,IAAAA,EAEA,YAGA,IAAAsJ,EAAAkD,GAAAzO,KAAA,GACA,YAAAuL,EAAA8C,SACA,YAGA,IAAAT,EAAArC,EAAAsC,cACA5C,OAAA,EACA,IAAAA,EAAA,EAAmBA,EAAAhJ,EAAYgJ,IAC/B,GAAA2C,IAAAc,EAAAzD,GAEA,OAAAC,EAAA0C,GAKA,OAAA5N,KAAAwO,YAAAtE,EAAA0D,IAIAe,MAAA,SAAAC,GACA,WAAAA,EAAApE,SACAxK,KAAA,KAAA4O,EAEA5O,KAAA,KAAA4O,EAAA,IAKAC,aAAA,SAAA3E,GACA,IACA4E,EADA5D,EAAAhB,GACA,GACA,OAAA4E,EAGA9O,KAAAqL,QAAA,SAAAE,GACAuD,EAAAC,WACAF,aAAAtD,EAAAuD,KAJA9O,MASAgP,YAAA,SAAA9E,GACA,IACA4E,EADA5D,EAAAhB,GACA,GACA,OAAA4E,EAGA9O,KAAAqL,QAAA,SAAAE,GACA,IAAAqC,EAAAkB,EAAAC,WACAnB,EAAAqB,YAAAH,EAEAlB,EAAAF,YAAAnC,GAGAqC,EAAAiB,aAAAtD,EAAAuD,EAAAI,eATAlP,OAqBAkL,EAAAiE,OAAA,WACA9E,EAAAgB,QAAA,SAAAwB,GACA,IAAAtB,EAAAsB,EAAAtB,KACAjJ,EAAAuK,EAAAvK,KACAgJ,EAAAuB,EAAAvB,GAEAC,EAAAc,oBAAA/J,EAAAgJ,MAQA,IAAA8D,GAGAlL,OAAA,0LAEAmL,WAAA,wCAEAC,QAAA,qGAaAC,WAEA7Q,MAAA,KAEA4D,KAAA,QAEAkN,UACAC,IAAA,OACAzK,IAAA,yFAEAyK,IAAA,OACAzK,IAAA,qFAEAyK,IAAA,MACAzK,IAAA,qFAIAtG,MAAA,KAEA4D,KAAA,QAEAkN,UACAxK,IAAA,uFACAyK,IAAA,UAEAzK,IAAA,qFACAyK,IAAA,SAEAzK,IAAA,oFACAyK,IAAA,WAIA/Q,MAAA,QAEA4D,KAAA,QAEAkN,QAAA,2DAAA7N,MAAA,QAIAsC,OAAA,IAGAyL,OAAA,EAGAC,UAAA,SAAAtP,EAAAuP,GAGA,UAKAC,aAAA,SAAA7K,GAEA,UAKA8K,kBAAA,EAGAC,gBAAA,EAIAC,gBAAA,SAAAR,GAEA,OAAAA,GAUAS,aAAA,EAGAC,gBAAA,SAAAC,KAKArM,iBAAA,QAMAF,qBAAA,EAMAwM,eAAA,GAGAC,mBAKAC,oBAKAvM,iBAAA,EAGAC,iBAAA,IAGAvB,gBASAC,OAAA,SAAAC,EAAAlE,EAAAmE,KASAC,QAAA,SAAAF,EAAAlE,EAAAqE,KAGAC,KAAA,SAAAJ,EAAAlE,EAAAqE,KAGAE,MAAA,SAAAL,EAAAlE,KAGAwE,QAAA,SAAAN,EAAAlE,MAMA8R,OAAA,GASAC,GACAC,IAAAC,UAAAC,UAGAC,SAAA,WAEA,MADA,UACAC,KAAA7Q,KAAAyQ,MAIAK,KAAA,WACA,wBAAAC,SAKA,SAAAC,EAAAC,EAAA3F,GACA,IAAAiB,OAAA,EAEA,IAAAA,KAAA0E,EACA,GAAAA,EAAAC,eAAA3E,KAEA,IADAjB,EAAAE,KAAAyF,EAAA1E,EAAA0E,EAAA1E,IAEA,MAOA,SAAA4E,EAAAC,EAAA9F,GACA,IAAAL,OAAA,EACA4B,OAAA,EAEA5K,EAAAmP,EAAAnP,QAAA,EACA,IAAAgJ,EAAA,EAAeA,EAAAhJ,IACf4K,EAAAuE,EAAAnG,IAEA,IADAK,EAAAE,KAAA4F,EAAAvE,EAAA5B,IAF2BA,MAU3B,SAAAoG,EAAAC,GACA,OAAAA,EAAAC,KAAAC,SAAAC,WAAAC,MAAA,GAIA,SAAAC,EAAAjR,GACA,aAAAA,EACA,GAEAA,EAAAiK,QAAA,cAAoCA,QAAA,cAAuBA,QAAA,gBAAyBA,QAAA,yBAOpF,SAAAiH,EAAAtG,GACA,yBAAAA,EAOA,SAAAuG,EAAApT,GACAuB,KAAAvB,SACAuB,KAAA4O,MAAA1D,EAAA,qFACAlL,KAAAsC,KAAA,QAGAtC,KAAA8R,SAAA,EAIAD,EAAA1G,WACAC,YAAAyG,EAGAE,QAAA,SAAAlN,GAGA,IAAApG,EAAAuB,KAAAvB,OACAuT,EAAAvT,EAAAwT,UAAAC,mBAEAF,GAEAvT,EAAAwT,UAAAE,mBAIA1T,EAAA2T,IAAAC,GAAA,QAEAL,IAEAvT,EAAAwT,UAAAK,gBACA7T,EAAAwT,UAAAM,qBAKAC,gBAAA,SAAA3N,GACA,IAAApG,EAAAuB,KAAAvB,OACAmQ,EAAA5O,KAAA4O,MACAnQ,EAAA2T,IAAAK,kBAAA,SACAzS,KAAA8R,SAAA,EACAlD,EAAAjC,SAAA,gBAEA3M,KAAA8R,SAAA,EACAlD,EAAA7B,YAAA,iBASA,IAAA2F,EAAA,SAAAjU,EAAAkU,GACA,IACA7P,EAAA6P,EAaA,OAdAlU,EAAA2Q,OAAAwD,cAGAvH,QAAA,SAAAwB,GACA,IAAAgG,EAAAhG,EAAAgG,IACArG,EAAAK,EAAAL,IAEAqG,EAAAhC,KAAA/N,KACAA,IAAA6H,QAAAkI,EAAA,WACA,OAAArG,OAKA1J,GAMAgQ,EAAA,aAGA,SAAAC,EAAAC,EAAAC,GACA,IAAA/S,EAAAF,KAGAvB,EAAAuU,EAAAvU,OACAuB,KAAAgT,OACAhT,KAAAiT,MAEA,IAAAC,EAAAhI,EAAA,oCAGAiI,EAAAF,EAAAE,OACAC,OAAA,EACAD,IAEAC,EAAAD,EAAAzS,OACA0S,EAAAV,EAAAjU,EAAA2U,GACAD,EAAAzS,KAAA0S,GAEAD,EAAAxG,SAAA,gBACAuG,EAAAnN,OAAAoN,IAGA,IAAAE,EAAAJ,EAAAI,SACA/Q,EAAA2Q,EAAA3Q,MAAA,OACAyP,EAAAkB,EAAAlB,SAAAe,EAGAQ,EAAApI,EAAA,wBAAA5I,EAAA,mCACA4Q,EAAAnN,OAAAuN,GACAD,EAAAhI,QAAA,SAAAwB,GACA,IAAA+B,EAAA/B,EAAA+B,MAGA2E,EAAA3E,EAAAlO,OACA6S,EAAAb,EAAAjU,EAAA8U,GACA3E,EAAAlO,KAAA6S,GAEA,IAAA5M,EAAAkG,EAAAlG,MACA6M,EAAAtI,EAAA,8BACA0D,IACA4E,EAAAzN,OAAA6I,GACA0E,EAAAvN,OAAAyN,GACAA,EAAAhL,GAAA,iBAAA3D,GACAkN,EAAApL,GAGAzG,EAAAuT,cAAAC,WAAA,WACAxT,EAAAoN,QACiB,QAMjB4F,EAAA1K,GAAA,sBAAA3D,GACA3E,EAAAuT,cAAAC,WAAA,WACAxT,EAAAoN,QACS,KAITtN,KAAAkT,aAGAlT,KAAA2T,WAAA,EACA3T,KAAA4T,OAAA,EA2DA,SAAAC,EAAApV,GACA,IAAAyB,EAAAF,KAEAA,KAAAvB,SACAuB,KAAA4O,MAAA1D,EAAA,+DACAlL,KAAAsC,KAAA,WAGAtC,KAAA8R,SAAA,EAGA9R,KAAA8T,SAAA,IAAAf,EAAA/S,MACAmF,MAAA,IACAgO,OAAAjI,EAAA,eACA5I,KAAA,OACA+Q,OAAgBzE,MAAA1D,EAAA,eAAAvE,MAAA,SAA4CiI,MAAA1D,EAAA,eAAAvE,MAAA,SAA4CiI,MAAA1D,EAAA,eAAAvE,MAAA,SAA4CiI,MAAA1D,EAAA,eAAAvE,MAAA,SAA4CiI,MAAA1D,EAAA,eAAAvE,MAAA,SAA4CiI,MAAA1D,EAAA,aAAAvE,MAAA,QAC5OoL,QAAA,SAAApL,GAEAzG,EAAA6T,SAAApN,MA4CA,SAAAqN,EAAAvV,GACA,IAAAyB,EAAAF,KAEAA,KAAAvB,SACAuB,KAAA4O,MAAA1D,EAAA,mEACAlL,KAAAsC,KAAA,WAGAtC,KAAA8R,SAAA,EAGA9R,KAAA8T,SAAA,IAAAf,EAAA/S,MACAmF,MAAA,IACAgO,OAAAjI,EAAA,aACA5I,KAAA,OACA+Q,OAAgBzE,MAAA1D,EAAA,oDAA2CvE,MAAA,MAAmCiI,MAAA1D,EAAA,gDAAyCvE,MAAA,MAAiCiI,MAAA1D,EAAA,uBAAAvE,MAAA,MAAiDiI,MAAA1D,EAAA,gDAAyCvE,MAAA,MAAiCiI,MAAA1D,EAAA,oDAA2CvE,MAAA,MAAmCiI,MAAA1D,EAAA,sDAA4CvE,MAAA,MAC7ZoL,QAAA,SAAApL,GAEAzG,EAAA6T,SAAApN,MAqBA,SAAAsN,EAAAxV,GACA,IAAAyB,EAAAF,KAEAA,KAAAvB,SACAuB,KAAA4O,MAAA1D,EAAA,6DACAlL,KAAAsC,KAAA,WAGAtC,KAAA8R,SAAA,EAGA,IACAzC,EADA5Q,EAAA2Q,OACAC,cAGArP,KAAA8T,SAAA,IAAAf,EAAA/S,MACAmF,MAAA,IACAgO,OAAAjI,EAAA,aACA5I,KAAA,OACA+Q,KAAAhE,EAAAjC,IAAA,SAAA8G,GACA,OAAoBtF,MAAA1D,EAAA,6BAAAgJ,EAAA,MAAsDA,EAAA,WAAAvN,MAAAuN,KAE1EnC,QAAA,SAAApL,GAEAzG,EAAA6T,SAAApN,MApLAoM,EAAA5H,WACAC,YAAA2H,EAGA1F,KAAA,WACArN,KAAAyT,eAEAU,aAAAnU,KAAAyT,eAGA,IACAW,EADApU,KAAAgT,KACApE,MACAsE,EAAAlT,KAAAkT,WACA,IAAAlT,KAAA4T,MAAA,CAGA,GAAA5T,KAAA2T,UAEAT,EAAA7F,WACS,CAET,IAAAgH,EAAAD,EAAAlG,cAAA7I,QAAA,EACAF,EAAAnF,KAAAiT,IAAA9N,OAAA,IACA+N,EAAAlG,IAAA,aAAAqH,EAAA,MAAArH,IAAA,QAAA7H,EAAA,MAGAiP,EAAArO,OAAAmN,GACAlT,KAAA2T,WAAA,EAIA3T,KAAA4T,OAAA,IAIAtG,KAAA,WACAtN,KAAAsU,eAEAH,aAAAnU,KAAAsU,eAGA,IAAApB,EAAAlT,KAAAkT,WACAlT,KAAA4T,QAIAV,EAAA5F,OACAtN,KAAA4T,OAAA,KAgCAC,EAAA1I,WACAC,YAAAyI,EAGAE,SAAA,SAAApN,GACA,IAAAlI,EAAAuB,KAAAvB,OAEA8V,EAAA9V,EAAAwT,UAAAuC,4BACA/V,EAAAgW,UAAA9F,MAAA4F,IAMA9V,EAAA2T,IAAAC,GAAA,cAAA1L,IAIA6L,gBAAA,SAAA3N,GACA,IAAApG,EAAAuB,KAAAvB,OACAmQ,EAAA5O,KAAA4O,MAEA8F,EAAAjW,EAAA2T,IAAAuC,kBAAA,eADA,MAEA9D,KAAA6D,IACA1U,KAAA8R,SAAA,EACAlD,EAAAjC,SAAA,gBAEA3M,KAAA8R,SAAA,EACAlD,EAAA7B,YAAA,iBAkCAiH,EAAA7I,WACAC,YAAA4I,EAGAD,SAAA,SAAApN,GACA3G,KAAAvB,OACA2T,IAAAC,GAAA,WAAA1L,KAuCAsN,EAAA9I,WACAC,YAAA6I,EAEAF,SAAA,SAAApN,GACA3G,KAAAvB,OACA2T,IAAAC,GAAA,WAAA1L,KAQA,IAAAiO,EAAA,aAGAC,KAGA,SAAAC,EAAA9B,EAAAC,GACAjT,KAAAgT,OACAhT,KAAAiT,MAyLA,SAAA8B,EAAAtW,GACAuB,KAAAvB,SACAuB,KAAA4O,MAAA1D,EAAA,6DACAlL,KAAAsC,KAAA,QAGAtC,KAAA8R,SAAA,EAsJA,SAAAkD,EAAAvW,GACAuB,KAAAvB,SACAuB,KAAA4O,MAAA1D,EAAA,uFACAlL,KAAAsC,KAAA,QAGAtC,KAAA8R,SAAA,EA+CA,SAAAmD,EAAAxW,GACAuB,KAAAvB,SACAuB,KAAA4O,MAAA1D,EAAA,qFACAlL,KAAAsC,KAAA,QAGAtC,KAAA8R,SAAA,EAsBA,SAAAoD,EAAAzW,GACAuB,KAAAvB,SACAuB,KAAA4O,MAAA1D,EAAA,8FACAlL,KAAAsC,KAAA,QAGAtC,KAAA8R,SAAA,EA+CA,SAAAqD,EAAA1W,GACAuB,KAAAvB,SACAuB,KAAA4O,MAAA1D,EAAA,0FACAlL,KAAAsC,KAAA,QAGAtC,KAAA8R,SAAA,EA+CA,SAAAsD,EAAA3W,GACAuB,KAAAvB,SACAuB,KAAA4O,MAAA1D,EAAA,qFACAlL,KAAAsC,KAAA,QAGAtC,KAAA8R,SAAA,EAsBA,SAAAuD,EAAA5W,GACA,IAAAyB,EAAAF,KAEAA,KAAAvB,SACAuB,KAAA4O,MAAA1D,EAAA,8DACAlL,KAAAsC,KAAA,WAGAtC,KAAA8R,SAAA,EAGA9R,KAAA8T,SAAA,IAAAf,EAAA/S,MACAmF,MAAA,IACAgO,OAAAjI,EAAA,eACA5I,KAAA,OACA+Q,OAAgBzE,MAAA1D,EAAA,4DAAAvE,MAAA,sBAAsGiI,MAAA1D,EAAA,oDAAAvE,MAAA,wBACtHoL,QAAA,SAAApL,GAEAzG,EAAA6T,SAAApN,MA2DA,SAAA2O,EAAA7W,GACA,IAAAyB,EAAAF,KAEAA,KAAAvB,SACAuB,KAAA4O,MAAA1D,EAAA,uEACAlL,KAAAsC,KAAA,WAGAtC,KAAA8R,SAAA,EAGA9R,KAAA8T,SAAA,IAAAf,EAAA/S,MACAmF,MAAA,IACAgO,OAAAjI,EAAA,eACA5I,KAAA,OACA+Q,OAAgBzE,MAAA1D,EAAA,2DAAAvE,MAAA,gBAA+FiI,MAAA1D,EAAA,6DAAAvE,MAAA,kBAAmGiI,MAAA1D,EAAA,4DAAAvE,MAAA,iBAClNoL,QAAA,SAAApL,GAEAzG,EAAA6T,SAAApN,MAoBA,SAAA4O,EAAA9W,GACA,IAAAyB,EAAAF,KAEAA,KAAAvB,SACAuB,KAAA4O,MAAA1D,EAAA,gEACAlL,KAAAsC,KAAA,WAGA,IACAgN,EADA7Q,EAAA2Q,OACAE,WAGAtP,KAAA8R,SAAA,EAGA9R,KAAA8T,SAAA,IAAAf,EAAA/S,MACAmF,MAAA,IACAgO,OAAAjI,EAAA,eACA5I,KAAA,eACA+Q,KAAA/D,EAAAlC,IAAA,SAAAoI,GACA,OAAoB5G,MAAA1D,EAAA,mBAAAsK,EAAA,oCAAyC7O,MAAA6O,KAE7DzD,QAAA,SAAApL,GAEAzG,EAAA6T,SAAApN,MAoBA,SAAA8O,EAAAhX,GACA,IAAAyB,EAAAF,KAEAA,KAAAvB,SACAuB,KAAA4O,MAAA1D,EAAA,oEACAlL,KAAAsC,KAAA,WAGA,IACAgN,EADA7Q,EAAA2Q,OACAE,WAGAtP,KAAA8R,SAAA,EAGA9R,KAAA8T,SAAA,IAAAf,EAAA/S,MACAmF,MAAA,IACAgO,OAAAjI,EAAA,cACA5I,KAAA,eACA+Q,KAAA/D,EAAAlC,IAAA,SAAAoI,GACA,OAAoB5G,MAAA1D,EAAA,mBAAAsK,EAAA,wCAAyC7O,MAAA6O,KAE7DzD,QAAA,SAAApL,GAEAzG,EAAA6T,SAAApN,MAoBA,SAAA+O,EAAAjX,GACAuB,KAAAvB,SACAuB,KAAA4O,MAAA1D,EAAA,4FACAlL,KAAAsC,KAAA,QAGAtC,KAAA8R,SAAA,EA8DA,SAAA6D,EAAAlX,GACAuB,KAAAvB,SACAuB,KAAA4O,MAAA1D,EAAA,yFACAlL,KAAAsC,KAAA,QAGAtC,KAAA8R,SAAA,EAiIA,SAAA8D,EAAAnX,GACAuB,KAAAvB,SACAuB,KAAA4O,MAAA1D,EAAA,sFACAlL,KAAAsC,KAAA,QAGAtC,KAAA8R,SAAA,EAqGA,SAAA+D,EAAApX,GACAuB,KAAAvB,SACAuB,KAAA4O,MAAA1D,EAAA,+DACAlL,KAAAsC,KAAA,QAGAtC,KAAA8R,SAAA,EAmVA,SAAAgE,EAAArX,GACAuB,KAAAvB,SACAuB,KAAA4O,MAAA1D,EAAA,6DACAlL,KAAAsC,KAAA,QAGAtC,KAAA8R,SAAA,EAqEA,SAAA/M,EAAAtG,GACAuB,KAAAvB,SACA,IAAAsX,EAAA1E,EAAA,WACArR,KAAA4O,MAAA1D,EAAA,6BAAA6K,EAAA,0CACAtX,EAAAsX,YACA/V,KAAAsC,KAAA,QAGAtC,KAAA8R,SAAA,EAr9CAgD,EAAA3J,WACAC,YAAA0J,EAGAzH,KAAA,WACA,IAAAnN,EAAAF,KAEAgT,EAAAhT,KAAAgT,KACA,KAAA6B,EAAAhK,QAAAmI,IAAA,IAKA,IAAAvU,EAAAuU,EAAAvU,OACAuX,EAAA9K,EAAA,QACA+K,EAAAxX,EAAAwX,mBACAhD,EAAAjT,KAAAiT,IAGAC,EAAAhI,EAAA,2CACA/F,EAAA8N,EAAA9N,OAAA,IACA+N,EAAAlG,IAAA,QAAA7H,EAAA,MAAA6H,IAAA,iBAAA7H,GAAA,QAGA,IAAA+Q,EAAAhL,EAAA,kDACAgI,EAAAnN,OAAAmQ,GACAA,EAAA1N,GAAA,mBACAtI,EAAAoN,SAIA,IAAA6I,EAAAjL,EAAA,yCACAkL,EAAAlL,EAAA,6CACAgI,EAAAnN,OAAAoQ,GAAApQ,OAAAqQ,GAGA,IAAA/Q,EAAA4N,EAAA5N,OACAA,GACA+Q,EAAApJ,IAAA,SAAA3H,EAAA,MAAA2H,IAAA,qBAIA,IAAAqJ,EAAApD,EAAAoD,SACAC,KACAC,KACAF,EAAAhL,QAAA,SAAAmL,EAAAC,GACA,GAAAD,EAAA,CAGA,IAAA9X,EAAA8X,EAAA9X,OAAA,GACAgY,EAAAF,EAAAE,KAAA,GAGAhY,EAAAgU,EAAAjU,EAAAC,GACAgY,EAAAhE,EAAAjU,EAAAiY,GAGA,IAAAvD,EAAAjI,EAAA,wBAAAxM,EAAA,SACAyX,EAAApQ,OAAAoN,GACA,IAAAwD,EAAAzL,EAAAwL,GACAN,EAAArQ,OAAA4Q,GAGAxD,EAAAyD,OAAAH,EACAH,EAAA1K,KAAAuH,GACAoD,EAAA3K,KAAA+K,GAGA,IAAAF,GACAtD,EAAArB,SAAA,EACAqB,EAAAxG,SAAA,eAEAgK,EAAArJ,OAIA6F,EAAA3K,GAAA,iBAAA3D,GACAsO,EAAArB,UAIAwE,EAAAjL,QAAA,SAAA8H,GACAA,EAAArB,SAAA,EACAqB,EAAApG,YAAA,gBAEAwJ,EAAAlL,QAAA,SAAAsL,GACAA,EAAArJ,SAIA6F,EAAArB,SAAA,EACAqB,EAAAxG,SAAA,cACAgK,EAAAtJ,aAKA6F,EAAA1K,GAAA,iBAAA3D,GAEAA,EAAAgS,oBAEAb,EAAAxN,GAAA,iBAAA3D,GACA3E,EAAAoN,SAIA2I,EAAAlQ,OAAAmN,GAGAmD,EAAAhL,QAAA,SAAAmL,EAAA1K,GACA0K,IAGAA,EAAAM,YACAzL,QAAA,SAAA0L,GACA,IAAA7M,EAAA6M,EAAA7M,SACA5H,EAAAyU,EAAAzU,KACAgJ,EAAAyL,EAAAzL,IAAAsJ,EACA2B,EAAAzK,GACAwC,KAAApE,GAAA1B,GAAAlG,EAAA,SAAAuC,GACAA,EAAAgS,kBACAvL,EAAAzG,IAGA3E,EAAAoN,aAOA,IAAA0J,EAAA9D,EAAA5E,KAAA,6BACA0I,EAAA/U,QACA+U,EAAA1Q,IAAA,GAAAiI,QAIAvO,KAAAkT,aAGAlT,KAAAiX,mBAEApC,EAAAjJ,KAAAoH,KAIA1F,KAAA,WACA,IAAA0F,EAAAhT,KAAAgT,KACAE,EAAAlT,KAAAkT,WACAA,GACAA,EAAAvF,SAIAkH,IAAAjI,OAAA,SAAAC,GACA,OAAAA,IAAAmG,KASAiE,iBAAA,WACApC,EAAA5S,QAGA4S,EAAAxJ,QAAA,SAAA2H,GACA,IAAAkE,EAAAlE,EAAAkE,UACAA,EAAA5J,MACA4J,EAAA5J,WAoBAyH,EAAA5J,WACAC,YAAA2J,EAGAhD,QAAA,SAAAlN,GACA,IAAApG,EAAAuB,KAAAvB,OACA0Y,OAAA,EAEA,GAAAnX,KAAA8R,QAAA,CAGA,KADAqF,EAAA1Y,EAAAwT,UAAAuC,6BAEA,OAGA/V,EAAAwT,UAAAmF,kBAAAD,GACA1Y,EAAAwT,UAAAM,mBAEAvS,KAAAqX,aAAAF,EAAA9W,OAAA8W,EAAA7K,KAAA,cAGA7N,EAAAwT,UAAAC,mBAEAlS,KAAAqX,aAAA,OAGArX,KAAAqX,aAAA5Y,EAAAwT,UAAAqF,mBAAA,KAMAD,aAAA,SAAAhX,EAAAuP,GACA,IAAA1P,EAAAF,KAGAuX,EAAAlG,EAAA,cACAmG,EAAAnG,EAAA,cACAoG,EAAApG,EAAA,UACAqG,EAAArG,EAAA,WAGAsG,EAAA3X,KAAA8R,QAAA,sBAGAoF,EAAA,IAAApC,EAAA9U,MACAmF,MAAA,IAEAkR,OAEA3X,MAAA,KAEAgY,IAAA,iDAAAc,EAAA,sCAAAnX,EAAA,uEAAAkX,EAAA,sCAAA3H,EAAA,kJAAA6H,EAAA,4EAAAC,EAAA,uCAAAC,EAAA,sFAEAb,SAGA5M,SAAA,IAAAuN,EACAnV,KAAA,QACAgJ,GAAA,WAEA,IAAAsM,EAAA1M,EAAA,IAAAqM,GACAM,EAAA3M,EAAA,IAAAsM,GACA5H,EAAAgI,EAAApL,MACAnM,EAAAwX,EAAArL,MAIA,OAHAtM,EAAA4X,YAAAzX,EAAAuP,IAGA,KAKA1F,SAAA,IAAAwN,EACApV,KAAA,QACAgJ,GAAA,WAKA,OAHApL,EAAA6X,YAGA,SAQAb,EAAA7J,OAGArN,KAAAkX,SAIAa,SAAA,WACA,GAAA/X,KAAA8R,QAAA,CAGA,IAAArT,EAAAuB,KAAAvB,OAEA,GADAA,EAAAwT,UAAAuC,4BACA,CAGA,IAAAwD,EAAAvZ,EAAAwT,UAAAqF,mBACA7Y,EAAA2T,IAAAC,GAAA,sBAAA2F,EAAA,cAIAF,YAAA,SAAAzX,EAAAuP,GACA,IAAAnR,EAAAuB,KAAAvB,OAEAkR,EADAlR,EAAA2Q,OACAO,UACAsI,GAAA,EACAtI,GAAA,mBAAAA,IACAsI,EAAAtI,EAAAtP,EAAAuP,KAEA,IAAAqI,EACAxZ,EAAA2T,IAAAC,GAAA,yBAAAzC,EAAA,qBAAAvP,EAAA,QAEA6X,MAAAD,IAKAzF,gBAAA,SAAA3N,GACA,IAAApG,EAAAuB,KAAAvB,OACAmQ,EAAA5O,KAAA4O,MACAuJ,EAAA1Z,EAAAwT,UAAAuC,4BACA2D,IAGA,MAAAA,EAAA/J,eACApO,KAAA8R,SAAA,EACAlD,EAAAjC,SAAA,gBAEA3M,KAAA8R,SAAA,EACAlD,EAAA7B,YAAA,kBAmBAiI,EAAA7J,WACAC,YAAA4J,EAGAjD,QAAA,SAAAlN,GAGA,IAAApG,EAAAuB,KAAAvB,OACAuT,EAAAvT,EAAAwT,UAAAC,mBAEAF,GAEAvT,EAAAwT,UAAAE,mBAIA1T,EAAA2T,IAAAC,GAAA,UAEAL,IAEAvT,EAAAwT,UAAAK,gBACA7T,EAAAwT,UAAAM,qBAKAC,gBAAA,SAAA3N,GACA,IAAApG,EAAAuB,KAAAvB,OACAmQ,EAAA5O,KAAA4O,MACAnQ,EAAA2T,IAAAK,kBAAA,WACAzS,KAAA8R,SAAA,EACAlD,EAAAjC,SAAA,gBAEA3M,KAAA8R,SAAA,EACAlD,EAAA7B,YAAA,iBAmBAkI,EAAA9J,WACAC,YAAA6J,EAGAlD,QAAA,SAAAlN,GAGA7E,KAAAvB,OAGA2T,IAAAC,GAAA,UAkBA6C,EAAA/J,WACAC,YAAA8J,EAGAnD,QAAA,SAAAlN,GAGA,IAAApG,EAAAuB,KAAAvB,OACAuT,EAAAvT,EAAAwT,UAAAC,mBAEAF,GAEAvT,EAAAwT,UAAAE,mBAIA1T,EAAA2T,IAAAC,GAAA,iBAEAL,IAEAvT,EAAAwT,UAAAK,gBACA7T,EAAAwT,UAAAM,qBAKAC,gBAAA,SAAA3N,GACA,IAAApG,EAAAuB,KAAAvB,OACAmQ,EAAA5O,KAAA4O,MACAnQ,EAAA2T,IAAAK,kBAAA,kBACAzS,KAAA8R,SAAA,EACAlD,EAAAjC,SAAA,gBAEA3M,KAAA8R,SAAA,EACAlD,EAAA7B,YAAA,iBAmBAoI,EAAAhK,WACAC,YAAA+J,EAGApD,QAAA,SAAAlN,GAGA,IAAApG,EAAAuB,KAAAvB,OACAuT,EAAAvT,EAAAwT,UAAAC,mBAEAF,GAEAvT,EAAAwT,UAAAE,mBAIA1T,EAAA2T,IAAAC,GAAA,aAEAL,IAEAvT,EAAAwT,UAAAK,gBACA7T,EAAAwT,UAAAM,qBAKAC,gBAAA,SAAA3N,GACA,IAAApG,EAAAuB,KAAAvB,OACAmQ,EAAA5O,KAAA4O,MACAnQ,EAAA2T,IAAAK,kBAAA,cACAzS,KAAA8R,SAAA,EACAlD,EAAAjC,SAAA,gBAEA3M,KAAA8R,SAAA,EACAlD,EAAA7B,YAAA,iBAmBAqI,EAAAjK,WACAC,YAAAgK,EAGArD,QAAA,SAAAlN,GAGA7E,KAAAvB,OAGA2T,IAAAC,GAAA,UAgCAgD,EAAAlK,WACAC,YAAAiK,EAGAtB,SAAA,SAAApN,GACA,IAAAlI,EAAAuB,KAAAvB,OACAgW,EAAAhW,EAAAgW,UAEA,GADAhW,EAAAwT,UAAAM,oBACA9T,EAAA2T,IAAAK,kBAAA9L,GAAA,CAGAlI,EAAA2T,IAAAC,GAAA1L,GAGA,IAAA4N,EAAA9V,EAAAwT,UAAAuC,4BAIA,GAHA,OAAAD,EAAAnG,gBACAmG,IAAA3G,WAEA,eAAAiD,KAAA0D,EAAAnG,iBAGAmG,EAAA5F,MAAA8F,GAAA,CAIA,IAAA2D,EAAA7D,EAAA3G,SACAwK,EAAAzJ,MAAA8F,KAKAF,EAAAvF,YAAAoJ,GACAA,EAAAzK,aAIA6E,gBAAA,SAAA3N,GACA,IAAApG,EAAAuB,KAAAvB,OACAmQ,EAAA5O,KAAA4O,MACAnQ,EAAA2T,IAAAK,kBAAA,wBAAAhU,EAAA2T,IAAAK,kBAAA,sBACAzS,KAAA8R,SAAA,EACAlD,EAAAjC,SAAA,gBAEA3M,KAAA8R,SAAA,EACAlD,EAAA7B,YAAA,iBAiCAuI,EAAAnK,WACAC,YAAAkK,EAGAvB,SAAA,SAAApN,GACA3G,KAAAvB,OACA2T,IAAAC,GAAA1L,KAsCA4O,EAAApK,WACAC,YAAAmK,EAGAxB,SAAA,SAAApN,GACA3G,KAAAvB,OACA2T,IAAAC,GAAA,YAAA1L,KAsCA8O,EAAAtK,WACAC,YAAAqK,EAGA1B,SAAA,SAAApN,GACA3G,KAAAvB,OACA2T,IAAAC,GAAA,YAAA1L,KAkBA+O,EAAAvK,WACAC,YAAAsK,EAEA3D,QAAA,SAAAlN,GACA,IAAApG,EAAAuB,KAAAvB,OACA8V,EAAA9V,EAAAwT,UAAAuC,4BACAnG,EAAAkG,EAAAnG,cAEA,GAAAoC,EAAAM,OAAA,CAcA,SAAAzC,EAMA,OAHAnD,EAAA,eADAqJ,EAAAlU,OACA,iBACA2O,YAAAuF,QACAA,EAAA5G,SAGA,eAAAU,IAGAnD,EAAA,MADAqJ,EAAAlU,OACA,QACA2O,YAAAuF,GACAA,EAAA5G,cA1BA,eAAAU,EAEA5P,EAAA2T,IAAAC,GAAA,qBAGA5T,EAAA2T,IAAAC,GAAA,+BAyBAG,gBAAA,SAAA3N,GACA,IAAApG,EAAAuB,KAAAvB,OACAmQ,EAAA5O,KAAA4O,MAEA8F,EAAAjW,EAAA2T,IAAAuC,kBAAA,eADA,gBAEA9D,KAAA6D,IACA1U,KAAA8R,SAAA,EACAlD,EAAAjC,SAAA,gBAEA3M,KAAA8R,SAAA,EACAlD,EAAA7B,YAAA,iBAmBA4I,EAAAxK,WACAC,YAAAuK,EAEA5D,QAAA,SAAAlN,GACA,IAAApG,EAAAuB,KAAAvB,OACA4Z,EAAA5Z,EAAAwT,UAAAqG,wBACAC,EAAA9Z,EAAAwT,UAAAuG,sBACAxG,EAAAvT,EAAAwT,UAAAC,mBACA8F,EAAAvZ,EAAAwT,UAAAqF,mBACAmB,OAAA,EAEA,GAAAJ,EAAA1J,MAAA4J,GAKA,OAAAvG,OAUAhS,KAAA8R,QAEA9R,KAAAqX,aAAAgB,EAAA3X,QAGAV,KAAAqX,iBAbAoB,EAAAvN,EAAA,SAAA8M,EAAA,WACAvZ,EAAA2T,IAAAC,GAAA,aAAAoG,GACAha,EAAAwT,UAAAmF,kBAAAqB,GAAA,QACAha,EAAAwT,UAAAM,oBARA9T,EAAAwT,UAAAM,oBAsBA8E,aAAA,SAAA1Q,GACA,IAAAzG,EAAAF,KAIAsC,GADAqE,KAAA,IACA,aACA+R,EAAArH,EAAA,SACAsH,EAAAtH,EAAA,OAEA6F,EAAA,IAAApC,EAAA9U,MACAmF,MAAA,IAEAkR,OAEA3X,MAAA,OAEAgY,IAAA,gDAAAgC,EAAA,4BAAwG/R,EAAA,oHAAAgS,EAAA,yFAExG7B,SAGA5M,SAAA,IAAAyO,EACArW,KAAA,QACAgJ,GAAA,WACA,IAAAuM,EAAA3M,EAAA,IAAAwN,GACArY,EAAAwX,EAAArL,OAAAqL,EAAAnX,OAWA,OAVAL,EAAAsR,EAAAtR,GACA,QAAAiC,EAEApC,EAAA0Y,YAAAvY,GAGAH,EAAA2Y,YAAAxY,IAIA,SAQA6W,EAAA7J,OAGArN,KAAAkX,SAIA0B,YAAA,SAAAjS,GACA3G,KAAAvB,OACA2T,IAAAC,GAAA,2BAAA1L,EAAA,6BAIAkS,YAAA,SAAAlS,GACA,IAAAlI,EAAAuB,KAAAvB,OACA0Z,EAAA1Z,EAAAwT,UAAAuC,4BACA2D,IAGAA,EAAAzX,KAAAiG,GACAlI,EAAAwT,UAAAM,qBAIAC,gBAAA,SAAA3N,GACA,IAAApG,EAAAuB,KAAAvB,OACAmQ,EAAA5O,KAAA4O,MACAuJ,EAAA1Z,EAAAwT,UAAAuC,4BACA,GAAA2D,EAAA,CAGA,IAAAW,EAAAX,EAAAvK,SACA,SAAAuK,EAAA/J,eAAA,QAAA0K,EAAA1K,eACApO,KAAA8R,SAAA,EACAlD,EAAAjC,SAAA,gBAEA3M,KAAA8R,SAAA,EACAlD,EAAA7B,YAAA,kBAmBA6I,EAAAzK,WACAC,YAAAwK,EAEA7D,QAAA,WACA/R,KAAAqX,gBAGAA,aAAA,WACA,IAAAnX,EAAAF,KAQA+Y,MANA/Y,KAAAvB,OACA2Q,OAEAG,cAIAlE,QAAA,SAAA2N,GACA,IAAAC,EAAAD,EAAA1W,KACAkN,EAAAwJ,EAAAxJ,YAGA0J,EAAA,GAGA,UAAAD,GACAzJ,EAAAnE,QAAA,SAAAwB,GACAA,IACAqM,GAAA,0BAAArM,EAAA,aAKA,UAAAoM,GACAzJ,EAAAnE,QAAA,SAAAwB,GACA,IAAA7H,EAAA6H,EAAA7H,IACAyK,EAAA5C,EAAA4C,IACAzK,IAEAkU,GAAA,oCAAAlU,EAAA,UAAAyK,EAAA,6BAKAsJ,EAAAnN,MACAlN,MAAAsa,EAAAta,MACAgY,IAAA,uCAAAwC,EAAA,SACApC,SACA5M,SAAA,gBACA5H,KAAA,QACAgJ,GAAA,SAAAzG,GACA,IACAsU,EAAAjO,EADArG,EAAAI,QAIAmU,OAAA,EAWA,OARAA,EAFA,QAHAD,EAAA/K,cAKA+K,EAAAvL,SAAAlN,OAGA,SAAAyY,EAAAzY,OAAA,UAGAR,EAAAmZ,QAAAD,IAEA,SAMA,IAAAlC,EAAA,IAAApC,EAAA9U,MACAmF,MAAA,IACAE,OAAA,IAEAgR,KAAA0C,IAIA7B,EAAA7J,OAGArN,KAAAkX,SAIAmC,QAAA,SAAAC,GACAtZ,KAAAvB,OACA2T,IAAAC,GAAA,aAAAiH,KAkBAzD,EAAA1K,WACAC,YAAAyK,EAEA9D,QAAA,WACA/R,KAAA8R,QAEA9R,KAAAuZ,mBAGAvZ,KAAAwZ,sBAKAA,mBAAA,WACA,IAAAtZ,EAAAF,KAGAyZ,EAAApI,EAAA,OACAqI,EAAArI,EAAA,OACAsI,EAAAtI,EAAA,OAEA6F,EAAA,IAAApC,EAAA9U,MACAmF,MAAA,IAEAkR,OAEA3X,MAAA,OAEAgY,IAAA,sJAA8FgD,EAAA,0IAAmKC,EAAA,wOAA8JF,EAAA,0FAE/Z3C,SAEA5M,SAAA,IAAAuP,EACAnX,KAAA,QACAgJ,GAAA,WACA,IAAAsO,EAAAC,SAAA3O,EAAA,IAAAwO,GAAAlN,OACAsN,EAAAD,SAAA3O,EAAA,IAAAyO,GAAAnN,OAQA,OANAoN,GAAAE,GAAAF,EAAA,GAAAE,EAAA,GAEA5Z,EAAAmZ,QAAAO,EAAAE,IAIA,SAQA5C,EAAA7J,OAGArN,KAAAkX,SAIAmC,QAAA,SAAAO,EAAAE,GAEA,IAAAC,OAAA,EACAC,OAAA,EACAtZ,EAAA,kEACA,IAAAqZ,EAAA,EAAmBA,EAAAH,EAAYG,IAAA,CAE/B,GADArZ,GAAA,OACA,IAAAqZ,EACA,IAAAC,EAAA,EAA2BA,EAAAF,EAAYE,IACvCtZ,GAAA,uBAGA,IAAAsZ,EAAA,EAA2BA,EAAAF,EAAYE,IACvCtZ,GAAA,kBAGAA,GAAA,QAEAA,GAAA,sBAGA,IAAAjC,EAAAuB,KAAAvB,OACAA,EAAA2T,IAAAC,GAAA,aAAA3R,GAGAjC,EAAA2T,IAAAC,GAAA,2BACA5T,EAAA2T,IAAAC,GAAA,gCAIAkH,iBAAA,WACA,IAAAjW,EAAAtD,KAGAia,EAAA5I,EAAA,WACA6I,EAAA7I,EAAA,WACA8I,EAAA9I,EAAA,WACA+I,EAAA/I,EAAA,WACAgJ,EAAAhJ,EAAA,aAGA,IAAAyD,EAAA9U,MACAmF,MAAA,IAEAkR,OAEA3X,MAAA,OAEAgY,IAAA,4LAAmKuD,EAAA,wEAAAE,EAAA,4EAAAD,EAAA,wEAAAE,EAAA,wKAAAC,EAAA,+FAEnKvD,SAEA5M,SAAA,IAAA+P,EACA3X,KAAA,QACAgJ,GAAA,WAGA,OAFAhI,EAAAgX,WAEA,KAIApQ,SAAA,IAAAgQ,EACA5X,KAAA,QACAgJ,GAAA,WAGA,OAFAhI,EAAAiX,WAEA,KAIArQ,SAAA,IAAAiQ,EACA7X,KAAA,QACAgJ,GAAA,WAGA,OAFAhI,EAAAkX,WAEA,KAIAtQ,SAAA,IAAAkQ,EACA9X,KAAA,QACAgJ,GAAA,WAGA,OAFAhI,EAAAmX,WAEA,KAIAvQ,SAAA,IAAAmQ,EACA/X,KAAA,QACAgJ,GAAA,WAGA,OAFAhI,EAAAoX,aAEA,SAMArN,QAIAsN,iBAAA,WACA,IAAA7X,KAEAqV,EADAnY,KAAAvB,OACAwT,UAAAuC,4BACA,GAAA2D,EAAA,CAGA,IAAA9J,EAAA8J,EAAA/J,cACA,UAAAC,GAAA,OAAAA,EAAA,CAKA,IAAAuM,EAAAzC,EAAAvK,SACAiN,EAAAD,EAAA7P,WACA+P,EAAAD,EAAA5Y,OACA4Y,EAAAxP,QAAA,SAAA0P,EAAAjP,GACA,GAAAiP,IAAA5C,EAAA,GAOA,OALArV,EAAAiY,IACAjP,QACAP,KAAAwP,EACA9Y,OAAA6Y,IAEA,IAKA,IACAE,EADAJ,EAAAhN,SACA7C,WACAkQ,EAAAD,EAAA/Y,OAcA,OAbA+Y,EAAA3P,QAAA,SAAA6P,EAAApP,GACA,GAAAoP,IAAAN,EAAA,GAOA,OALA9X,EAAAoY,IACApP,QACAP,KAAA2P,EACAjZ,OAAAgZ,IAEA,IAKAnY,KAIAwX,QAAA,WAEA,IAAAa,EAAAnb,KAAA2a,mBACA,GAAAQ,EAAA,CAGA,IACAC,EAAAlQ,EADAiQ,EAAAD,GACA3P,MAEAuP,EADAK,EAAAJ,GACA9Y,OAGAoZ,EAAA/V,SAAAC,cAAA,MACAmR,EAAA,GACAzL,OAAA,EACA,IAAAA,EAAA,EAAmBA,EAAA6P,EAAc7P,IACjCyL,GAAA,kBAEA2E,EAAAvQ,UAAA4L,EAEAxL,EAAAmQ,GAAArM,YAAAoM,KAIAb,QAAA,WAEA,IAAAY,EAAAnb,KAAA2a,mBACA,GAAAQ,EAAA,CAGA,IAAAG,EAAAH,EAAAD,GAEAK,EADAJ,EAAAJ,GACAjP,MACAZ,EAAAoQ,EAAA/P,MACAqC,SACA7C,WAGAM,QAAA,SAAA6P,GACA,IAEAM,EAFAtQ,EAAAgQ,GACAnQ,WACAzE,IAAAiV,GACAhd,EAAAid,EAAApN,cAAAqN,cAIAvQ,EADA5F,SAAAC,cAAAhH,IACAyQ,YAAAwM,OAKAhB,QAAA,WAEA,IAAAW,EAAAnb,KAAA2a,mBACAQ,GAIAjQ,EADAiQ,EAAAD,GACA3P,MACAoC,UAIA8M,QAAA,WAEA,IAAAU,EAAAnb,KAAA2a,mBACA,GAAAQ,EAAA,CAGA,IAAAG,EAAAH,EAAAD,GAEAK,EADAJ,EAAAJ,GACAjP,MACAZ,EAAAoQ,EAAA/P,MACAqC,SACA7C,WAGAM,QAAA,SAAA6P,GACAhQ,EAAAgQ,GACAnQ,WACAzE,IAAAiV,GAEA5N,aAKA+M,UAAA,WACA,IACAvC,EADAnY,KAAAvB,OACAwT,UAAAuC,4BACA,GAAA2D,EAAA,CAGA,IAAAuD,EAAAvD,EAAA3J,YAAA,SACAkN,GAGAA,EAAA/N,WAIA6E,gBAAA,SAAA3N,GACA,IAAApG,EAAAuB,KAAAvB,OACAmQ,EAAA5O,KAAA4O,MACAuJ,EAAA1Z,EAAAwT,UAAAuC,4BACA,GAAA2D,EAAA,CAGA,IAAA9J,EAAA8J,EAAA/J,cACA,OAAAC,GAAA,OAAAA,GACArO,KAAA8R,SAAA,EACAlD,EAAAjC,SAAA,gBAEA3M,KAAA8R,SAAA,EACAlD,EAAA7B,YAAA,kBAmBA+I,EAAA3K,WACAC,YAAA0K,EAEA/D,QAAA,WACA/R,KAAAqX,gBAGAA,aAAA,WACA,IAAAnX,EAAAF,KAGA2b,EAAAtK,EAAA,YACAsH,EAAAtH,EAAA,OAGA6F,EAAA,IAAApC,EAAA9U,MACAmF,MAAA,IAEAkR,OAEA3X,MAAA,OAEAgY,IAAA,6CAAAiF,EAAA,mLAAAhD,EAAA,0FAEA7B,SACA5M,SAAA,IAAAyO,EACArW,KAAA,QACAgJ,GAAA,WACA,IACAkB,EADAtB,EAAA,IAAAyQ,GACAnP,MAAA5B,OAWA,OANA4B,GAEAtM,EAAAmZ,QAAA7M,IAIA,SAQA0K,EAAA7J,OAGArN,KAAAkX,SAIAmC,QAAA,SAAA7M,GACAxM,KAAAvB,OACA2T,IAAAC,GAAA,aAAA7F,EAAA,iBAoBAzH,EAAAoG,WACAC,YAAArG,EAEAgN,QAAA,WACA/R,KAAAvB,OACA2Q,OACAmB,QAGAvQ,KAAA8R,QACA9R,KAAAuZ,mBAEAvZ,KAAAwZ,uBAIAD,iBAAA,WACA,IAAA9a,EAAAuB,KAAAvB,OAGAmd,EAAAvK,EAAA,YACAwK,EAAAxK,EAAA,YACAyK,EAAAzK,EAAA,aACA0K,EAAA1K,EAAA,WAsDA6F,EAAA,IAAApC,EAAA9U,MACAmF,MAAA,IACAkR,OApDA3X,MAAA,OACAgY,IAAA,mSAA8PkF,EAAA,oEAAAC,EAAA,oEAAAC,EAAA,yJAAAC,EAAA,uFAC9PjF,SACA5M,SAAA,IAAA0R,EACAtZ,KAAA,QACAgJ,GAAA,WACA,IAAA0Q,EAAAvd,EAAAwd,aAKA,OAJAD,GACAA,EAAAhP,IAAA,oBAGA,KAGA9C,SAAA,IAAA2R,EACAvZ,KAAA,QACAgJ,GAAA,WACA,IAAA0Q,EAAAvd,EAAAwd,aAKA,OAJAD,GACAA,EAAAhP,IAAA,oBAGA,KAGA9C,SAAA,IAAA4R,EACAxZ,KAAA,QACAgJ,GAAA,WACA,IAAA0Q,EAAAvd,EAAAwd,aAKA,OAJAD,GACAA,EAAAhP,IAAA,qBAGA,KAGA9C,SAAA,IAAA6R,EACAzZ,KAAA,QACAgJ,GAAA,WACA,IAAA0Q,EAAAvd,EAAAwd,aAKA,OAJAD,GACAA,EAAArO,UAGA,SAUAuJ,EAAA7J,OAGArN,KAAAkX,SAGAsC,mBAAA,WACA,IAAA/a,EAAAuB,KAAAvB,OACAyd,EAAAzd,EAAAyd,UACA9M,EAAA3Q,EAAA2Q,OAGA+M,EAAA9K,EAAA,cACA+K,EAAA/K,EAAA,WACAgL,EAAAhL,EAAA,YACAiL,EAAAjL,EAAA,YAGAkL,IACA7d,MAAA,OACAgY,IAAA,oEAAAyF,EAAA,oMAAgQC,EAAA,sJAChQtF,SAEA5M,SAAA,IAAAiS,EACA7Z,KAAA,QACAgJ,GAAA,WACA,IACAkR,EADAtR,EAAA,IAAAkR,GACA,GACA,IAAAI,EAIA,SAHAA,EAAA/T,WAQAyB,SAAA,IAAAkS,EACA9Z,KAAA,SACAgJ,GAAA,WACA,IACAkR,EADAtR,EAAA,IAAAkR,GACA,GACA,IAAAI,EAEA,SAIA,IAAAC,EAAAD,EAAA5Z,MAMA,OALA6Z,EAAAxa,QACAia,YAAAO,IAIA,OAKA/d,MAAA,OACAgY,IAAA,yCAAA2F,EAAA,sJAAAC,EAAA,kFACAxF,SACA5M,SAAA,IAAAoS,EACAha,KAAA,QACAgJ,GAAA,WACA,IACA6E,EADAjF,EAAA,IAAAmR,GACA7P,MAAA5B,OAOA,OALAuF,GACA+L,EAAAQ,cAAAvM,IAIA,OAOAwM,MACAvN,EAAAxL,qBAAAwL,EAAAwN,iBAAAxN,EAAAjL,kBAAA4M,OAAArM,YAEAiY,EAAA/Q,KAAA2Q,EAAA,IAEAnN,EAAAa,aAEA0M,EAAA/Q,KAAA2Q,EAAA,IAIA,IAAArF,EAAA,IAAApC,EAAA9U,MACAmF,MAAA,IACAkR,KAAAsG,IAEAzF,EAAA7J,OAGArN,KAAAkX,SAIA1E,gBAAA,SAAA3N,GACA,IAAApG,EAAAuB,KAAAvB,OACAmQ,EAAA5O,KAAA4O,MACAnQ,EAAAwd,cACAjc,KAAA8R,SAAA,EACAlD,EAAAjC,SAAA,gBAEA3M,KAAA8R,SAAA,EACAlD,EAAA7B,YAAA,iBAUA,IAAA8P,KA8CA,SAAAC,EAAAre,GACAuB,KAAAvB,SACAuB,KAAAkE,SA0HA,SAAA6Y,EAAAlY,GACA,IAAAmY,EAAAnY,EAAAmY,eAAAnY,EAAAoY,eAAApY,EAAAoY,cAAAD,cAQA,OAAArL,EANA,MAAAqL,EACAjM,OAAAiM,eAAAjM,OAAAiM,cAAAE,QAAA,QAEAF,EAAAE,QAAA,eA4HA,SAAAC,EAAA1e,GACAuB,KAAAvB,SAwfA,SAAA2e,EAAA3e,GACAuB,KAAAvB,SAqGA,SAAA4e,EAAA5e,GACAuB,KAAAvB,SACAuB,KAAAsd,cAAA,KAmLA,SAAAC,EAAA9e,GACAuB,KAAAvB,SACAuB,KAAAwd,MAAA,EACAxd,KAAAyd,SAAA,EACAzd,KAAA0d,WAAA,EACA1d,KAAA2d,WAAA,EACA3d,KAAA4d,eAAAnf,EAAAwX,mBACAjW,KAAA6d,KAAA3S,EAAA,oCArkCA2R,EAAAiB,KAAAjM,EAEAgL,EAAAkB,KAAAlK,EAEAgJ,EAAAmB,SAAAhK,EAEA6I,EAAA3I,SAAAD,EAEA4I,EAAAjN,KAAAmF,EAEA8H,EAAAoB,OAAAjJ,EAEA6H,EAAAqB,KAAAjJ,EAEA4H,EAAAsB,cAAAjJ,EAEA2H,EAAAuB,UAAAjJ,EAEA0H,EAAAwB,KAAAjJ,EAEAyH,EAAAxJ,KAAAgC,EAEAwH,EAAAyB,QAAAhJ,EAEAuH,EAAA0B,UAAAhJ,EAEAsH,EAAA2B,UAAA/I,EAEAoH,EAAA4B,MAAA/I,EAEAmH,EAAA6B,KAAA/I,EAEAkH,EAAA8B,SAAA/I,EAEAiH,EAAA+B,MAAA/I,EAEAgH,EAAAgC,MAAA/I,EAEA+G,EAAA/X,MAAAC,EAYA+X,EAAA3R,WACAC,YAAA0R,EAGAgC,KAAA,WACA,IAAA5e,EAAAF,KAEAvB,EAAAuB,KAAAvB,SACAA,EAAA2Q,YACAlL,WAGAmH,QAAA,SAAA0T,GACA,IAAAC,EAAAnC,EAAAkC,GACAC,GAAA,mBAAAA,IAEA9e,EAAAgE,MAAA6a,GAAA,IAAAC,EAAAvgB,MAKAuB,KAAAif,gBAGAjf,KAAAkf,cAIAD,cAAA,WACA,IAAAxgB,EAAAuB,KAAAvB,OACA0gB,EAAA1gB,EAAA0gB,aACAjb,EAAAlE,KAAAkE,MAGAD,EAFAxF,EAAA2Q,OAEAnL,OAAA,EACA+M,EAAA9M,EAAA,SAAAqI,EAAAyG,GACA,IAAApE,EAAAoE,EAAApE,MACAA,IAEAA,EAAA5B,IAAA,UAAA/I,GACAkb,EAAApZ,OAAA6I,OAMAsQ,WAAA,WACA,IAAAhb,EAAAlE,KAAAkE,MACAzF,EAAAuB,KAAAvB,OACAuS,EAAA9M,EAAA,SAAAqI,EAAAyG,GACA,IAAA1Q,EAAA0Q,EAAA1Q,KACA,GAAAA,EAAA,CAGA,IAAAsM,EAAAoE,EAAApE,MACAkF,EAAAd,EAAAc,SACAd,EAAAkE,MAGA,UAAA5U,GAAA0Q,EAAAjB,SACAnD,EAAApG,GAAA,iBAAA3D,GACA,MAAApG,EAAAwT,UAAAmN,YAGApM,EAAAjB,QAAAlN,KAKA,aAAAvC,GAAAwR,GACAlF,EAAApG,GAAA,sBAAA3D,GACA,MAAApG,EAAAwT,UAAAmN,aAIAtL,EAAAQ,cAAAZ,WAAA,WACAI,EAAAzG,QACqB,QACJ7E,GAAA,sBAAA3D,GAEjBiP,EAAAL,cAAAC,WAAA,WACAI,EAAAxG,QACqB,KAKrB,UAAAhL,GAAA0Q,EAAAjB,SACAnD,EAAApG,GAAA,iBAAA3D,GACAA,EAAAgS,kBACA,MAAApY,EAAAwT,UAAAmN,YAIApM,EAAAjB,QAAAlN,SAOAwa,aAAA,WAEArO,EADAhR,KAAAkE,MACA,SAAAqI,EAAAyG,GACAA,EAAAR,iBACAkB,WAAA,WACAV,EAAAR,mBACiB,SAkJjB2K,EAAAhS,WACAC,YAAA+R,EAGA2B,KAAA,WAEA9e,KAAAkf,cAIAI,MAAA,WACAtf,KAAAU,KAAA,gBAIAA,KAAA,SAAA8L,GACA,IAAA/N,EAAAuB,KAAAvB,OACAgW,EAAAhW,EAAAgW,UACA/T,OAAA,EACA,SAAA8L,EAIA,OAHA9L,EAAA+T,EAAA/T,OAEAA,IAAAiK,QAAA,eACAjK,EAEA+T,EAAA/T,KAAA8L,GAGA/N,EAAA8gB,iBAKAC,QAAA,WAGA,OAlFA,SAAAC,EAAA7Q,GACA,IAAA9L,KAoCA,OAnCA8L,EAAArB,kBACAlC,QAAA,SAAAqU,GACA,IAAAC,OAAA,EACAnV,EAAAkV,EAAAlV,SASA,GANA,IAAAA,IAEAmV,EAAAhO,EADAgO,EAAAD,EAAAE,cAKA,IAAApV,EAAA,EACAmV,MAGAE,IAAAH,EAAArR,SAAAoN,cAKA,IAHA,IAAAqE,KACAC,EAAAL,EAAAM,eACAC,EAAAF,EAAA9d,QAAA,EACAgJ,EAAA,EAA2BA,EAAAgV,EAAoBhV,IAAA,CAC/C,IAAAqB,EAAAyT,EAAA9U,GACA6U,EAAAlU,MACArN,KAAA+N,EAAA/N,KACAoI,MAAA2F,EAAA3F,QAGAgZ,EAAAjY,MAAAoY,EAEAH,EAAA5U,SAAA0U,EAAAvU,EAAAwU,IAGA5c,EAAA8I,KAAA+T,KAEA7c,EA6CA2c,CAFAzf,KAAAvB,OACAgW,YAKApU,KAAA,SAAAmM,GACA,IAAA/N,EAAAuB,KAAAvB,OACAgW,EAAAhW,EAAAgW,UACApU,OAAA,EACA,SAAAmM,EAIA,OAHAnM,EAAAoU,EAAApU,OAEAA,IAAAsK,QAAA,eACAtK,EAEAoU,EAAApU,KAAA,MAAAmM,EAAA,QAGA/N,EAAA8gB,iBAKAxZ,OAAA,SAAArF,GACA,IAAAjC,EAAAuB,KAAAvB,OACAA,EAAAgW,UACA1O,OAAAmF,EAAAxK,IAGAjC,EAAA8gB,iBAIAL,WAAA,WAEAlf,KAAAkgB,qBAGAlgB,KAAAmgB,kBAGAngB,KAAAogB,eAGApgB,KAAAqgB,eAGArgB,KAAAsgB,aAGAtgB,KAAAugB,aAGAvgB,KAAAwgB,eAIAN,mBAAA,WACA,IAAAzhB,EAAAuB,KAAAvB,OACAgW,EAAAhW,EAAAgW,UAGA,SAAAgM,EAAA5b,GAEApG,EAAAwT,UAAAwO,YAEAhiB,EAAAyF,MAAAmb,eAGA5K,EAAAjM,GAAA,QAAAiY,GACAhM,EAAAjM,GAAA,qBAAA3D,GAEA4P,EAAAjM,GAAA,aAAAiY,KAEAhM,EAAAjM,GAAA,mBAAA3D,GACA4b,IAEAhM,EAAArI,IAAA,aAAAqU,MAKAN,gBAAA,WACA,IAAA1hB,EAAAuB,KAAAvB,OACAgW,EAAAhW,EAAAgW,UAEA,SAAAiM,EAAAnM,GACA,IAAAoM,EAAAzV,EAAA,eACAyV,EAAA9R,aAAA0F,GACA9V,EAAAwT,UAAAmF,kBAAAuJ,GAAA,GACAliB,EAAAwT,UAAAM,mBACAgC,EAAA5G,SAmCA8G,EAAAjM,GAAA,iBAAA3D,GA/BA,IACA0P,EACAuE,EA8BA,KAAAjU,EAAA+b,UA/BArM,EAAA9V,EAAAwT,UAAAuC,4BAGA,uBAFAsE,EAAAvE,EAAA3G,UAEAlN,OAOAoY,EAAAnK,MAAA8F,IAMA,MADAF,EAAAnG,gBAMAmG,EAAAlU,QAMAqgB,EAAAnM,IArBAmM,EAAAnM,MA0FAE,EAAAjM,GAAA,mBAAA3D,GACA,KAAAA,EAAA+b,QAzDA,SAAA/b,GACA,IAAA0P,EAAA9V,EAAAwT,UAAAuC,4BACA,GAAAD,EAAA,CAGA,IAAAuE,EAAAvE,EAAA3G,SACAiT,EAAAtM,EAAAnG,cACA0S,EAAAhI,EAAA1K,cAEA,YAAAyS,GAAA,QAAAC,GAKAriB,EAAA2T,IAAA2O,sBAAA,eAMA,QAAAtiB,EAAAuiB,eAAA,CAGA,IAAAL,EAAAzV,EAAA,eASA,OARAyV,EAAA3R,YAAA8J,GACAra,EAAAwT,UAAAmF,kBAAAuJ,GAAA,GACAliB,EAAAwT,UAAAM,mBAGA9T,EAAAuiB,gBAAA,OAEAnc,EAAAoc,iBAIA,IAAAC,EAAAziB,EAAAwT,UAAAmN,WAAA+B,YAGA1iB,EAAA2T,IAAAC,GAAA,mBACA5T,EAAAwT,UAAAwO,YACAhiB,EAAAwT,UAAAmN,WAAA+B,cAAAD,GAEAziB,EAAA2T,IAAAC,GAAA,mBAGA,IAAA+O,EAAA7M,EAAA7T,OAAAuB,OACAxD,EAAAwT,UAAAmN,WAAA+B,YAAA,IAAAC,IAGA3iB,EAAAuiB,gBAAA,GAIAnc,EAAAoc,mBAWAI,CAAAxc,GAJApG,EAAAuiB,gBAAA,KASAZ,aAAA,WACA,IAAA3hB,EAAAuB,KAAAvB,OACAgW,EAAAhW,EAAAgW,UAEAA,EAAAjM,GAAA,mBAAA3D,GACA,IAAAA,EAAA+b,UAIA,gBADAnM,EAAA/T,OAAA+a,cAAA7Q,QAGA/F,EAAAoc,oBAKAxM,EAAAjM,GAAA,iBAAA3D,GACA,OAAAA,EAAA+b,QAAA,CAGA,IAAAD,OAAA,EACAW,EAAA7M,EAAA/T,OAAA+a,cAAA7Q,OAGA0W,GAAA,SAAAA,IAEAX,EAAAzV,EAAA,gBACAuJ,EAAA/T,KAAA,IACA+T,EAAA1O,OAAA4a,GACAliB,EAAAwT,UAAAmF,kBAAAuJ,GAAA,MACAliB,EAAAwT,UAAAM,wBAMA8N,aAAA,WACA,IAAA5hB,EAAAuB,KAAAvB,OACA2Q,EAAA3Q,EAAA2Q,OACAU,EAAAV,EAAAU,iBACAE,EAAAZ,EAAAY,gBACAuR,EAAAnS,EAAAW,eACA0E,EAAAhW,EAAAgW,UAIA+M,EAAA,EACA,SAAAC,IACA,IAAAC,EAAArgB,KAAAqgB,MACAC,GAAA,EAMA,OALAD,EAAAF,GAAA,MAEAG,GAAA,GAEAH,EAAAE,EACAC,EAOAlN,EAAAjM,GAAA,iBAAA3D,GACA,IAAA2L,EAAAM,SAIAjM,EAAAoc,iBAIAQ,KAAA,CAKA,IAAAG,EAtbA,SAAA/c,EAAAgd,EAAAN,GACA,IAAAvE,EAAAnY,EAAAmY,eAAAnY,EAAAoY,eAAApY,EAAAoY,cAAAD,cACA8E,OAAA,EACAF,OAAA,EAUA,GATA,MAAA5E,EACA8E,EAAA/Q,OAAAiM,eAAAjM,OAAAiM,cAAAE,QAAA,SAEA4E,EAAA9E,EAAAE,QAAA,cACA0E,EAAA5E,EAAAE,QAAA,eAEA0E,GAAAE,IACAF,EAAA,MAAAjQ,EAAAmQ,GAAA,QAEAF,EAAA,CAKA,IAAAG,EAAAH,EAAAjgB,MAAA,WAyBA,OAxBA,IAAAogB,EAAA9f,SACA2f,EAAAG,EAAA,IAQAH,GAFAA,GAFAA,IAAAjX,QAAA,kCAEAA,QAAA,oBAEAA,QAAA,mCAEA4W,IAEAK,IAAAjX,QAAA,mBAKAiX,EAFAC,EAEAD,EAAAjX,QAAA,wCAGAiX,EAAAjX,QAAA,iCA8YAqX,CAAAnd,EAAAiL,EAAAyR,GACAO,EAAA/E,EAAAlY,GACAid,IAAAnX,QAAA,eAEA,IAAA4J,EAAA9V,EAAAwT,UAAAuC,4BACA,GAAAD,EAAA,CAGA,IAAAlG,EAAAkG,EAAAnG,cAGA,YAAAC,GAAA,QAAAA,EAMA,OALA2B,GAAA4B,EAAA5B,KAEA8R,EAAA,IAAA9R,EAAA8R,IAAA,UAEArjB,EAAA2T,IAAAC,GAAA,mBAAAyP,EAAA,QAUA,GAAAF,EAKA,IAGA5R,GAAA4B,EAAA5B,KAEA4R,EAAA,IAAA5R,EAAA4R,IAAA,KAEAnjB,EAAA2T,IAAAC,GAAA,aAAAuP,GACa,MAAAK,GAEbjS,GAAA4B,EAAA5B,KAEA8R,EAAA,IAAA9R,EAAA8R,IAAA,KAEArjB,EAAA2T,IAAAC,GAAA,mBAAAyP,EAAA,aA/DAN,EAAA,MAoEA/M,EAAAjM,GAAA,iBAAA3D,GACA,IAAA2L,EAAAM,SAGAjM,EAAAoc,iBAIAQ,KAAA,CAKA,IAAAS,EAtcA,SAAArd,GACA,IAAA/B,KAEA,GADAia,EAAAlY,GAGA,OAAA/B,EAGA,IACAqf,GADAtd,EAAAmY,eAAAnY,EAAAoY,eAAApY,EAAAoY,cAAAD,mBACAmF,MACA,OAAAA,GAIAnR,EAAAmR,EAAA,SAAA5V,EAAA5F,GACA,IAAArE,EAAAqE,EAAArE,KACA,SAAAuO,KAAAvO,IACAQ,EAAA8I,KAAAjF,EAAAyb,eAIAtf,GAVAA,EA2bAuf,CAAAxd,GACA,GAAAqd,KAAAjgB,OAAA,CAKA,IAAAsS,EAAA9V,EAAAwT,UAAAuC,4BACA,GAAAD,EAAA,CAGA,IAAAlG,EAAAkG,EAAAnG,cAGA,YAAAC,GAAA,QAAAA,EAKA5P,EAAAyd,UACAA,UAAAgG,SAKA5B,WAAA,WACA,IAAA7hB,EAAAuB,KAAAvB,OACAA,EAAAgW,UAEAjM,GAAA,mBAAA3D,GACA,OAAAA,EAAA+b,SAGAniB,EAAA2T,IAAA2O,sBAAA,eAIA,IAAAxM,EAAA9V,EAAAwT,UAAAuC,4BACA,GAAAD,EAAA,CAGA,IAAAuE,EAAAvE,EAAA3G,SACAiT,EAAAtM,EAAAnG,cACA0S,EAAAhI,EAAA1K,cAEA,SAAAyS,GAAA,QAAAC,EAEAriB,EAAA2T,IAAAC,GAAA,qBAGA5T,EAAA2T,IAAAC,GAAA,yCAGAxN,EAAAoc,sBAKAV,WAAA,WACA,IAAA9hB,EAAAuB,KAAAvB,OACAgW,EAAAhW,EAAAgW,UAGAA,EAAAjM,GAAA,uBAAA3D,GACA,IACAmX,EAAA9Q,EADAlL,MAGA,MAAAgc,EAAA1P,KAAA,cAMA7N,EAAAwd,aAAAD,EAGAvd,EAAAwT,UAAAmF,kBAAA4E,GACAvd,EAAAwT,UAAAM,sBAIAkC,EAAAjM,GAAA,wBAAA3D,GACAA,EAAAI,OAAAkH,QAAA,SAKA1N,EAAAwd,aAAA,SAKAuE,YAAA,WACA,IAAA/hB,EAAAuB,KAAAvB,OAGAyM,EAAA5F,UACAkD,GAAA,6CAAA3D,GACAA,EAAAoc,mBAIAxiB,EAAAgW,UACAjM,GAAA,gBAAA3D,GACAA,EAAAoc,iBACA,IAAAre,EAAAiC,EAAAyd,cAAAzd,EAAAyd,aAAA1f,MACAA,KAAAX,QAKAxD,EAAAyd,UACAA,UAAAtZ,OAeAwa,EAAAjS,WACAC,YAAAgS,EAGA/K,GAAA,SAAA9T,EAAAoI,GACA,IAAAlI,EAAAuB,KAAAvB,OASA,GANAA,EAAA8jB,mBACAjd,SAAAkd,YAAA,wBACA/jB,EAAA8jB,kBAAA,GAIA9jB,EAAAwT,UAAAmN,WAAA,CAKA3gB,EAAAwT,UAAAM,mBAGA,IAAAkQ,EAAA,IAAAlkB,EACAyB,KAAAyiB,GAEAziB,KAAAyiB,GAAA9b,GAGA3G,KAAA0iB,aAAAnkB,EAAAoI,GAIAlI,EAAAyF,MAAAmb,eAGA5gB,EAAAwT,UAAAwO,YACAhiB,EAAAwT,UAAAM,mBAGA9T,EAAAoK,QAAApK,EAAAoK,WAIA8Z,YAAA,SAAAjiB,GACA,IACAkiB,EADA5iB,KAAAvB,OACAwT,UAAAmN,WAEApf,KAAA+gB,sBAAA,cAEA/gB,KAAA0iB,aAAA,aAAAhiB,GACSkiB,EAAAC,YAETD,EAAAE,iBACAF,EAAAC,WAAA3X,EAAAxK,GAAA,KACSkiB,EAAAG,WAETH,EAAAG,UAAAriB,IAKAsiB,YAAA,SAAApU,GACA,IACAgU,EADA5iB,KAAAvB,OACAwT,UAAAmN,WAEAwD,EAAAC,aACAD,EAAAE,iBACAF,EAAAC,WAAAjU,EAAA,MAKA8T,aAAA,SAAAnkB,EAAAoI,GACArB,SAAAkd,YAAAjkB,GAAA,EAAAoI,IAIAgO,kBAAA,SAAApW,GACA,OAAA+G,SAAAqP,kBAAApW,IAIAkU,kBAAA,SAAAlU,GACA,OAAA+G,SAAAmN,kBAAAlU,IAIAwiB,sBAAA,SAAAxiB,GACA,OAAA+G,SAAAyb,sBAAAxiB,KAeA8e,EAAAlS,WACAC,YAAAiS,EAGA+B,SAAA,WACA,OAAApf,KAAAsd,eAIAmD,UAAA,SAAAwC,GACA,GAAAA,EAEAjjB,KAAAsd,cAAA2F,MAFA,CAOA,IAAAhR,EAAAlB,OAAAmS,eACA,OAAAjR,EAAAkR,WAAA,CAGA,IAAAP,EAAA3Q,EAAAmR,WAAA,GAGAC,EAAArjB,KAAAwU,0BAAAoO,GACA,GAAAS,EAKA,aAAAA,EAAA/W,KAAA,qBAAA+W,EAAA7U,YAAA,2BAIAxO,KAAAvB,OACAgW,UACA1G,UAAAsV,KAEArjB,KAAAsd,cAAAsF,MAKAtQ,cAAA,SAAAgR,GACA,MAAAA,IAEAA,GAAA,GAEA,IAAAV,EAAA5iB,KAAAsd,cACAsF,GACAA,EAAAW,SAAAD,IAKAhM,iBAAA,WAEA,OADAtX,KAAAsd,cAEAtd,KAAAsd,cAAA7L,WAEA,IAKA+C,0BAAA,SAAAoO,GAEA,IAAArX,OAAA,EACA,GAFAqX,KAAA5iB,KAAAsd,cAIA,OAAApS,EAAA,KADAK,EAAAqX,EAAAY,yBACAhZ,SAAAe,IAAAwD,aAGAuJ,sBAAA,SAAAsK,GAEA,IAAArX,OAAA,EACA,GAFAqX,KAAA5iB,KAAAsd,cAIA,OAAApS,EAAA,KADAK,EAAAqX,EAAAa,gBACAjZ,SAAAe,IAAAwD,aAGAyJ,oBAAA,SAAAoK,GAEA,IAAArX,OAAA,EACA,GAFAqX,KAAA5iB,KAAAsd,cAIA,OAAApS,EAAA,KADAK,EAAAqX,EAAAc,cACAlZ,SAAAe,IAAAwD,aAKAmD,iBAAA,WACA,IAAA0Q,EAAA5iB,KAAAsd,cACA,SAAAsF,MAAAa,gBACAb,EAAAa,iBAAAb,EAAAc,cACAd,EAAAzB,cAAAyB,EAAAe,YASApR,iBAAA,WACA,IAAAN,EAAAlB,OAAAmS,eACAjR,EAAA2R,kBACA3R,EAAA4R,SAAA7jB,KAAAsd,gBAIAnL,iBAAA,WACA,IAAA1T,EAAAuB,KAAAvB,OACAmkB,EAAA5iB,KAAAof,WACAxQ,OAAA,EAEA,GAAAgU,GAIA5iB,KAAAkS,mBAKA,IAEA1B,EAAAI,YAEAnS,EAAA2T,IAAAC,GAAA,wBAEAuQ,EAAAkB,OAAAlB,EAAAc,aAAAd,EAAAe,UAAA,GAEA3jB,KAAAygB,UAAAmC,KAEAhU,EAAA1D,EAAA,4BACAzM,EAAA2T,IAAAC,GAAA,aAAAzD,GACA5O,KAAAoX,kBAAAxI,GAAA,IAES,MAAAqT,MAMT7K,kBAAA,SAAAxI,EAAA0U,EAAAS,GAIA,GAAAnV,EAAA3M,OAAA,CAIA,IAAAsJ,EAAAqD,EAAA,GACAgU,EAAAtd,SAAA0e,cAEAD,EACAnB,EAAAqB,mBAAA1Y,GAEAqX,EAAAsB,WAAA3Y,GAGA,kBAAA+X,GACAV,EAAAW,SAAAD,GAIAtjB,KAAAygB,UAAAmC,MAkBArF,EAAApS,WACAC,YAAAmS,EAEAlQ,KAAA,SAAA8W,GACA,IAAAjkB,EAAAF,KAGA,IAAAA,KAAAyd,QAAA,CAGAzd,KAAAyd,SAAA,EAGA,IAAAI,EAAA7d,KAAA6d,KACA,GAAA7d,KAAA0d,UAIA1d,KAAA0d,WAAA,OAHA1d,KAAA4d,eACA7X,OAAA8X,GAMAxc,KAAAqgB,MAAA1hB,KAAAwd,MAAA,KACA2G,GAAA,IACAtG,EAAA7Q,IAAA,YAAAmX,EAAA,KACAnkB,KAAAwd,MAAAnc,KAAAqgB,OAKA,IAAA0C,EAAApkB,KAAA2d,WACAyG,GACAjQ,aAAAiQ,GAEAA,EAAA1Q,WAAA,WACAxT,EAAAmkB,SACS,OAGTA,MAAA,WACArkB,KAAA6d,KACAlQ,SAGA3N,KAAAwd,MAAA,EACAxd,KAAAyd,SAAA,EACAzd,KAAA0d,WAAA,IAIA,IAAA4G,EAAA,mBAAAC,QAAA,iBAAAA,OAAAC,SAAA,SAAAvT,GACA,cAAAA,GACC,SAAAA,GACD,OAAAA,GAAA,mBAAAsT,QAAAtT,EAAA7F,cAAAmZ,QAAAtT,IAAAsT,OAAApZ,UAAA,gBAAA8F,GAQA,SAAAwT,EAAAhmB,GACAuB,KAAAvB,SAIAgmB,EAAAtZ,WACAC,YAAAqZ,EAGAC,OAAA,SAAAC,EAAAC,GACA,IAAAnmB,EAAAuB,KAAAvB,OACAiR,EAAAjR,EAAA2Q,OAAAM,MACAmV,EAAApmB,EAAA2Q,OAAAyV,YAEA,GAAAnV,EACA,UAAAoV,MAAA,gBAAAF,GAAAD,IAEAE,GAAA,mBAAAA,EACAA,EAAAF,GAEAzM,MAAAyM,IAMAjI,cAAA,SAAA9M,GACA,IAAAtM,EAAAtD,KAEA,GAAA4P,EAAA,CAGA,IAAAnR,EAAAuB,KAAAvB,OACA2Q,EAAA3Q,EAAA2Q,OAGAS,EAAAT,EAAAS,aACAoI,OAAA,EACA,GAAApI,GAAA,mBAAAA,GAEA,iBADAoI,EAAApI,EAAAD,IAGAsI,MAAAD,OAJA,CASAxZ,EAAA2T,IAAAC,GAAA,0BAAAzC,EAAA,+BAGA,IAAAmV,EAAAzf,SAAAC,cAAA,OACAwf,EAAAngB,OAAA,WACA,IAAAoD,EAAAoH,EAAAc,gBACAlI,GAAA,mBAAAA,GACAA,EAAA4H,GAGAmV,EAAA,MAEAA,EAAAC,QAAA,WACAD,EAAA,KAEAzhB,EAAAohB,OAAA,sCAAA9U,EAAA,cAGAmV,EAAAE,QAAA,WACAF,EAAA,MAEAA,EAAA/f,IAAA4K,KAIAsM,UAAA,SAAAtZ,GACA,IAAAsiB,EAAAllB,KAEA,GAAA4C,KAAAX,OAAA,CAKA,IAAAxD,EAAAuB,KAAAvB,OACA2Q,EAAA3Q,EAAA2Q,OACAwN,EAAAxN,EAAAwN,gBACAhZ,EAAAwL,EAAAxL,oBAEAuhB,EAAA/V,EAAAtL,iBACAshB,EAAAD,EAAA,UACAE,EAAAjW,EAAAvL,oBAAA,IACAuM,EAAAhB,EAAAgB,gBAAA,GACAC,EAAAjB,EAAAiB,oBACAiV,EAAAlW,EAAAkW,uBACAhV,EAAAlB,EAAAkB,qBACAiV,EAAAnW,EAAA3M,mBACAQ,EAAAmM,EAAApL,kBAAA,IACAD,EAAAqL,EAAArL,gBACA,MAAAA,IACAA,GAAA,GAEA,IAAAI,EAAAiL,EAAAjL,gBAEA,GAAAA,GAEAyY,GAAAhZ,EAFA,CAQA,IAAA4hB,KACAC,KAyBA,GAxBAtU,EAAAvO,EAAA,SAAA8iB,GACA,IAAAnnB,EAAAmnB,EAAAnnB,KACA+F,EAAAohB,EAAAphB,KAGA/F,GAAA+F,KAIA,sCAAAuM,KAAAtS,GAKA4mB,EAAA7gB,EAEAmhB,EAAA7Z,KAAA,IAAArN,EAAA,OAAA6mB,EAAA,KAKAI,EAAA5Z,KAAA8Z,GAVAD,EAAA7Z,KAAA,IAAArN,EAAA,YAaAknB,EAAAxjB,OACAjC,KAAA0kB,OAAA,cAAAe,EAAA3Y,KAAA,YAGA,GAAA0Y,EAAAvjB,OAAAojB,EACArlB,KAAA0kB,OAAA,SAAAW,EAAA,YAKA,GAAAlhB,GAAA,mBAAAA,EACAA,EAAAqhB,EAAAxlB,KAAA0c,cAAAiJ,KAAA3lB,WADA,CAQA,IAAA4lB,EAAA,IAAA9f,SAOA,GANAqL,EAAAqU,EAAA,SAAAE,GACA,IAAAnnB,EAAA6R,GAAAsV,EAAAnnB,KACAqnB,EAAA7f,OAAAxH,EAAAmnB,KAIA9I,GAAA,iBAAAA,EAAA,CAEA,IAAAiJ,EAAAjJ,EAAAjb,MAAA,KACAib,EAAAiJ,EAAA,GACA,IAAAC,EAAAD,EAAA,OACA7U,EAAAX,EAAA,SAAA9D,EAAAC,GAKA8Y,IACA1I,EAAA/R,QAAA,OACA+R,GAAA,IAEAA,GAAA,IAEAA,IAAArQ,EAAA,IAAAC,GAIAoZ,EAAA7f,OAAAwG,EAAAC,KAEAsZ,IACAlJ,GAAA,IAAAkJ,GAIA,IAAAnjB,EAAA,IAAAojB,eAqFA,GApFApjB,EAAAqjB,KAAA,OAAApJ,GAGAja,EAAAM,UACAN,EAAAsjB,UAAA,WAEAV,EAAAtiB,SAAA,mBAAAsiB,EAAAtiB,SACAsiB,EAAAtiB,QAAAN,EAAAlE,GAGAymB,EAAAR,OAAA,WAIA/hB,EAAAujB,SACAvjB,EAAAujB,OAAAC,WAAA,SAAAthB,GACA,IAAAuhB,OAAA,EAEAC,EAAA,IAAA9I,EAAA9e,GACAoG,EAAAyhB,mBACAF,EAAAvhB,EAAA0hB,OAAA1hB,EAAA2hB,MACAH,EAAAhZ,KAAA+Y,MAMAzjB,EAAA8jB,mBAAA,WACA,IAAA3jB,OAAA,EACA,OAAAH,EAAA+jB,WAAA,CACA,GAAA/jB,EAAAgkB,OAAA,KAAAhkB,EAAAgkB,QAAA,IAQA,OANApB,EAAAviB,OAAA,mBAAAuiB,EAAAviB,OACAuiB,EAAAviB,MAAAL,EAAAlE,QAIAymB,EAAAR,OAAA,gCAAA/hB,EAAAgkB,QAKA,yBADA7jB,EAAAH,EAAAikB,cACA,YAAAtC,EAAAxhB,IACA,IACAA,EAAA+jB,KAAAC,MAAAhkB,GACyB,MAAAmf,GAOzB,OALAsD,EAAAxiB,MAAA,mBAAAwiB,EAAAxiB,MACAwiB,EAAAxiB,KAAAJ,EAAAlE,EAAAqE,QAGAoiB,EAAAR,OAAA,8BAAA5hB,GAIA,GAAAyiB,EAAAriB,cAAA,KAAAJ,EAAAikB,MAQqB,CACrB,GAAAxB,EAAAriB,cAAA,mBAAAqiB,EAAAriB,aAEAqiB,EAAAriB,aAAAgiB,EAAAxI,cAAAiJ,KAAAT,GAAApiB,EAAArE,QAGAqE,EAAAtE,UACA6M,QAAA,SAAAuE,GACAsV,EAAAxI,cAAA9M,KAKA2V,EAAA1iB,SAAA,mBAAA0iB,EAAA1iB,SACA0iB,EAAA1iB,QAAAF,EAAAlE,EAAAqE,QApBAyiB,EAAAxiB,MAAA,mBAAAwiB,EAAAxiB,MACAwiB,EAAAxiB,KAAAJ,EAAAlE,EAAAqE,GAIAoiB,EAAAR,OAAA,kCAAA5hB,EAAAikB,SAsBAxB,EAAA7iB,QAAA,mBAAA6iB,EAAA7iB,OAAA,CACA,IAAAskB,EAAAzB,EAAA7iB,OAAAC,EAAAlE,EAAA+mB,GACA,GAAAwB,GAAA,qBAAAA,EAAA,YAAA1C,EAAA0C,KACAA,EAAAC,QAGA,YADAjnB,KAAA0kB,OAAAsC,EAAAE,KAkBA,OAXAlW,EAAAV,EAAA,SAAA/D,EAAAC,GACA7J,EAAAwkB,iBAAA5a,EAAAC,KAIA7J,EAAAoB,uBAGApB,EAAAykB,KAAAxB,GAOAhiB,GACAuN,EAAAvO,EAAA,SAAA8iB,GACA,IAAAxlB,EAAAglB,EACAzgB,EAAA,IAAAC,WACAD,EAAAE,cAAA+gB,GACAjhB,EAAAG,OAAA,WACA1E,EAAAwc,cAAA1c,KAAA8C,gBAYA,IAAAukB,EAAA,EAGA,SAAA/oB,EAAAgpB,EAAAC,GACA,SAAAD,EAEA,UAAAxC,MAAA,4BAGA9kB,KAAAwnB,GAAA,cAAAH,IAEArnB,KAAAsnB,kBACAtnB,KAAAunB,eAGAvnB,KAAAwC,gBAIAlE,EAAA6M,WACAC,YAAA9M,EAGAmpB,YAAA,WAGAznB,KAAAoP,OAAAjR,OAAAupB,UAAAtY,EAAApP,KAAAwC,cAGA,IACAoQ,KACA5B,EAFAhR,KAAAoP,OAAAuY,SAEA,SAAApb,EAAAC,GAGAoG,EAAAhH,MACAiH,IAAA,IAAA+U,OAAArb,EAAA,OACAC,UAIAxM,KAAAoP,OAAAwD,YAIAiV,SAAA,WACA,IAAA3nB,EAAAF,KAGA8nB,EAAA5c,EADAlL,KAAAsnB,iBAEAC,EAAAvnB,KAAAunB,aAEAQ,EAAA/nB,KAAAoP,OACAnL,EAAA8jB,EAAA9jB,OAGAkb,OAAA,EACAlJ,OAAA,EACAxB,OAAA,EACAjH,OAAA,EAEA,MAAA+Z,GAEApI,EAAAjU,EAAA,eACA+K,EAAA/K,EAAA,eAGAsC,EAAAsa,EAAA/c,WAGA+c,EAAA/hB,OAAAoZ,GAAApZ,OAAAkQ,GAGAkJ,EAAAnS,IAAA,8BAAAA,IAAA,2BACAiJ,EAAAjJ,IAAA,2BAAAA,IAAA,qBAAAA,IAAA,oBAGAmS,EAAA2I,EAGAta,GAFAyI,EAAA/K,EAAAqc,IAEAxc,aAIA0J,EAAAvJ,EAAA,gBACAoB,KAAA,0BAAAU,IAAA,gBAAAA,IAAA,iBAGAQ,KAAAvL,OACAwS,EAAA1O,OAAAyH,GAEAiH,EAAA1O,OAAAmF,EAAA,gBAIA+K,EAAAlQ,OAAA0O,GAGA0K,EAAAxS,SAAA,eACAsJ,EAAAtJ,SAAA,sBACAsJ,EAAAjJ,IAAA,UAAA/I,GACAwQ,EAAA9H,SAAA,YAGA,IAAAqb,EAAA3W,EAAA,gBACA8N,EAAA7S,KAAA,KAAA0b,GACA,IAAAC,EAAA5W,EAAA,aACAoD,EAAAnI,KAAA,KAAA2b,GAGAjoB,KAAAmf,eACAnf,KAAAiW,qBACAjW,KAAAyU,YACAzU,KAAAgoB,gBACAhoB,KAAAioB,aAGA,IAAAC,GAAA,EACAjS,EAAAzN,GAAA,8BAEA0f,GAAA,IAEAjS,EAAAzN,GAAA,4BAEA0f,GAAA,IAIAjS,EAAAzN,GAAA,yBAEA0f,GAAAhoB,EAAA2I,QAAA3I,EAAA2I,WAEAsW,EAAA3W,GAAA,mBACAxI,KAAA6I,QAAA7I,KAAA6I,YAIAkf,EAAAI,SAAAJ,EAAAK,UAEApoB,KAAAqoB,SAAA,EAEAnd,EAAA5F,UAAAkD,GAAA,iBAAA3D,GAEA,IAAAyjB,EAAA7T,EAAA1G,UAAA7C,EAAArG,EAAAI,SAGAsjB,EAAApJ,EAAApR,UAAA7C,EAAArG,EAAAI,SACAujB,EAAArJ,EAAA,IAAAta,EAAAI,OAEA,GAAAqjB,EAWApoB,EAAAmoB,SACAnoB,EAAAioB,SAAAjoB,EAAAioB,UAEAjoB,EAAAmoB,SAAA,MAdA,CAEA,GAAAE,IAAAC,EACA,OAGAtoB,EAAAmoB,SACAnoB,EAAAkoB,QAAAloB,EAAAkoB,SAEAloB,EAAAmoB,SAAA,OAYAI,aAAA,WACAzoB,KAAAoS,IAAA,IAAAgL,EAAApd,OAIA0oB,kBAAA,WACA1oB,KAAAiS,UAAA,IAAAoL,EAAArd,OAIA2oB,eAAA,WACA3oB,KAAAkc,UAAA,IAAAuI,EAAAzkB,OAIA4oB,WAAA,WACA5oB,KAAAkE,MAAA,IAAA4Y,EAAA9c,MACAA,KAAAkE,MAAA4a,QAIA+J,UAAA,WACA7oB,KAAAI,IAAA,IAAA+c,EAAAnd,MACAA,KAAAI,IAAA0e,QAIAS,cAAA,SAAAuJ,GACA,IAAArU,EAAAzU,KAAAyU,UACAjH,EAAAiH,EAAA1J,WACA,IAAAyC,EAAAvL,OAIA,OAFAwS,EAAA1O,OAAAmF,EAAA,qBACAlL,KAAAuf,gBAIA,IAAAwJ,EAAAvb,EAAAxB,OAEA,GAAA8c,EAAA,CAEA,IAAApoB,EAAAqoB,EAAAroB,OAAA+a,cACApN,EAAA0a,EAAA3a,cACA,YAAA1N,GAAA,UAAAA,GAAA,MAAA2N,EAIA,OAFAoG,EAAA1O,OAAAmF,EAAA,qBACAlL,KAAAuf,gBAKAvf,KAAAiS,UAAAmF,kBAAA2R,GAAA,OAKA7J,WAAA,WAEA,IAAA8J,EAAA,EACAC,EAAAjpB,KAAAI,IAAAM,OACAqnB,EAAA/nB,KAAAoP,OAGA8Z,EAAAnB,EAAAmB,mBACAA,EAAArP,SAAAqP,EAAA,MACAA,GAAA,KACAA,EAAA,KAGA,IAAAC,EAAApB,EAAAoB,SACAA,GAAA,mBAAAA,IAKAnpB,KAAA6I,OAAA,WAEA,IAAAugB,EAAAppB,KAAAI,IAAAM,OAEA0oB,EAAAnnB,SAAAgnB,EAAAhnB,QAEAmnB,IAAAH,IAMAD,GACA7U,aAAA6U,GAEAA,EAAAtV,WAAA,WAEAyV,EAAAC,GACAH,EAAAG,GACiBF,MAKjB,IAAAd,EAAAL,EAAAK,OACAA,GAAA,mBAAAA,IACApoB,KAAAooB,OAAA,WACA,IAAAgB,EAAAppB,KAAAI,IAAAM,OACA0nB,EAAAgB,KAKA,IAAAjB,EAAAJ,EAAAI,QACAA,GAAA,mBAAAA,IACAnoB,KAAAmoB,QAAA,WACAA,OAMAjiB,OAAA,WAEAlG,KAAAynB,cAGAznB,KAAA6nB,WAGA7nB,KAAAyoB,eAGAzoB,KAAA0oB,oBAGA1oB,KAAA6oB,YAGA7oB,KAAA4oB,aAGA5oB,KAAA2oB,iBAGA3oB,KAAAuf,eAAA,GAGAvf,KAAAkf,cAIAmK,aAAA,WACAne,EAAAiE,WAKA,IACA7J,SACC,MAAA2c,GACD,UAAA6C,MAAA,cAhiJA,mBAAA3mB,OAAAupB,SACAvpB,OAAAupB,OAAA,SAAAziB,EAAAqkB,GAEA,SAAArkB,EAEA,UAAAskB,UAAA,8CAKA,IAFA,IAAAxiB,EAAA5I,OAAA8G,GAEA6G,EAAA,EAA+BA,EAAA0d,UAAAvnB,OAA0B6J,IAAA,CACzD,IAAA2d,EAAAD,UAAA1d,GAEA,SAAA2d,EAEA,QAAAC,KAAAD,EAEAtrB,OAAAgN,UAAA+F,eAAA1F,KAAAie,EAAAC,KACA3iB,EAAA2iB,GAAAD,EAAAC,IAKA,OAAA3iB,IAKA4iB,QAAAxe,UAAAgB,UACAwd,QAAAxe,UAAAgB,QAAAwd,QAAAxe,UAAAye,iBAAAD,QAAAxe,UAAA0e,oBAAAF,QAAAxe,UAAA2e,mBAAAH,QAAAxe,UAAA4e,kBAAAJ,QAAAxe,UAAA6e,uBAAA,SAAAC,GAGA,IAFA,IAAA9d,GAAAnM,KAAAsF,UAAAtF,KAAAkqB,eAAAlf,iBAAAif,GACAhf,EAAAkB,EAAAlK,SACAgJ,GAAA,GAAAkB,EAAAU,KAAA5B,KAAAjL,OACA,OAAAiL,GAAA,IAsgJA,IAGAiC,EAAA5H,SAAAC,cAAA,SAQA,OAPA2H,EAAA5K,KAAA,WACA4K,EAAApC,UALA,68gBAMAxF,SAAA6kB,qBAAA,QAAAtd,KAAA,GAAAa,YAAAR,GAGA6D,OAAAqZ,YAAA9rB,GA5jJ6DqL,EAAAC,QAAAI,0BCA7D,IAAAqgB,EAAcjhB,EAAQ,QACtBkhB,EAAWlhB,EAAQ,QACnBmhB,EAAYnhB,EAAQ,QACpBO,EAAAC,QAAA,SAAA4gB,EAAAC,GACA,IAAAnf,GAAAgf,EAAAnsB,YAA6BqsB,IAAArsB,OAAAqsB,GAC7BE,KACAA,EAAAF,GAAAC,EAAAnf,GACA+e,IAAAM,EAAAN,EAAAO,EAAAL,EAAA,WAAqDjf,EAAA,KAAS,SAAAof","file":"static/js/2.bd08ecd37f69a5c7acf6.js","sourcesContent":["<template>\r\n\t<div class=\"wangEditor\">\r\n\t\t<!-- 弹出层 -->\r\n\t\t<!-- <van-popup v-model=\"publish_Waiting_response\">\r\n\t\t\t<span style='backgroundColor:red'>文章发布中...</span>\r\n\t\t</van-popup> -->\n    <!-- 基础 -->\n    <!-- 输入任意文本 -->\n    <van-field v-model=\"title\"  placeholder=\"请输入文章标题…\" maxlength=\"50\" class=\"articleTit\"\n    autosize show-word-limit type=\"textarea\" />\r\n\t\t<div ref=\"toolBar\" class=\"toolBar\" ></div>\r\n\t\t<div ref=\"editor\" class=\"editor\"></div>\n<!-- ///////////////////////////////////////////////////////////////////// -->\n<van-field\n  readonly\n  clickable\n  label=\"文章分类\"\n  :value=\"showValue\"\n  placeholder=\"选择分类\"\n  @click=\"showPicker = true\"\n/>\n\n<van-popup v-model=\"showPicker\" position=\"bottom\">\n  <van-picker :columns=\"columns\" @change=\"onChange\"\n  show-toolbar @confirm='onConfirm' @cancel=\"showPicker = false\"/>\n</van-popup>\n<!-- ///////////////////////////////////////////////////////////////////////// -->\n <!-- <div class=\"publish\" @click='publish' >\n     <span v-show=\"!ws_publish\">立即发布</span>\n     <span v-show=\"ws_publish\">发布中...</span>\n  </div> -->\n  <van-button type=\"primary\" size=\"large\" @click='publish' class=\"publish\">\n    <span v-show=\"!ws_publish\">立即发布</span>\n    <span v-show=\"ws_publish\">发布中...</span>\n  </van-button>\n  <!-- <van-button type=\"primary\" size=\"large\" @click=\"publish\">立即发布</van-button>\n   -->\r\n\t</div>\r\n</template>\r\n\r\n<script>\n  // const citys = {\n  //   '王者荣耀': ['全部', '宁波', '温州', '嘉兴', '湖州'],\n  //   '和平精英': ['全部', '厦门', '莆田', '三明', '泉州'],\n  //   'qq飞车': ['全部', '2', '3', '4', '5'],\n  //   '穿越火线': ['全部', '2', '3', '4', '5']\n  // };\n  const citys = {\n    '百科': ['全部', '宇宙探索', '自然地理', '科学原理', '释疑解惑', '人文科学'],\n    '军事': ['全部', '军事科技', '讲武堂', '人物志', '军民融合','网络硝烟','战场还原'],\n    '科幻': ['全部', '名家动态', '新闻探索', '影视作品', '科普文创'],\n    '人物': ['全部', '走进大师', '名言警句', '精彩人生'],\n    '手机': ['全部', '华为', '小米', 'oppo']\n  };\r\n\timport {createNamespacedHelpers} from 'vuex'\n  const readAndEditor=createNamespacedHelpers('readAndEditor')\r\n\tconst login=createNamespacedHelpers('login')\r\n\t// import { Message } from \"element-ui\";\r\n\timport E from 'wangeditor'\r\n\texport default {\r\n\t\tname: 'wangEditor',\r\n\t\tdata(){\r\n\t\t\treturn {\n\t\t\t\teditor : '',\r\n\t\t\t\t//editorContent : \"\" ,//内容\n        //文章标题\r\n\t\t\t\ttitle : \"\",\n        showPicker : false,\n        ///////////////////////\n        columns: [\n                {\n                  values: Object.keys(citys),\n                  className: 'column1'\n                },\n                {\n                  values: citys['百科'],\n                  className: 'column2',\n                  defaultIndex: 0\n                }\n              ],\n        //////////////////////////\n        // 选项\n        showValue : '',\n        finalValue : '',\n        // 发布等待响应\n        // publish_Waiting_response : false,\n        ws_publish:false,\n        // 文章的图片src\n        // imgsSrc : []\r\n\t\t\t}\r\n\t\t},\r\n\t\t// computed:{\n\r\n\t\t// \t...readAndEditor.mapState({\r\n\t\t// \t\tmoBoolean : state => state.moBoolean\r\n\t\t// \t})\n  //     ...readAndEditor.mapState({\n  //     \tarticleContent : state => state.articleContent\n  //     })\r\n\t\t// },\r\n\t\tmethods: {\n      //修改部分用户信息\n      ...login.mapMutations({\n            \tsetHandler: 'setHandler'\n            }),\n      //阅读页和编辑页\n      ...readAndEditor.mapMutations({\n            \tmoBooleanHandler: 'moBooleanHandler'\n            }),\n      ...readAndEditor.mapMutations({\n            \tarticleContentHandler: 'articleContentHandler'\n            }),\n      onChange(picker, values){\n          picker.setColumnValues(1, citys[values[0]]);\n      },\n      onConfirm(values){\n        console.log(values)\n        this.showValue = values[0] +'  板块下的  '+ values[1]\n        this.finalValue = values\n        this.showPicker = false\n      },\r\n\t\t\t// 提交文章\r\n\t\t\tpublish(){\n              //判断是否登录\n              if(!!this.hasLogin == false){\n                this.$toast(\"您尚未登录\")\n                return;\n              }\n\n\t\t\t\t\t\t\tif(!!this.finalValue == false){\n                this.$toast(\"请选择文章分类\")\n\t\t\t\t\t\t\t  return ;\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(!!this.title == false){\n              this.$toast(\"请输入文章标题\")\n\t\t\t\t\t\t\treturn ;\r\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(!!this.editor.txt.text() == false){\n                 this.$toast(\"请输入文章内容\")\r\n\t\t\t\t\t\t\t\treturn ;\n\t\t\t\t\t\t\t}\n            if(!!this.ws_publish == true){\n              return;\n            }\n            this.ws_publish = true\n            this.isDoing = true\n            if(!!this.moBoolean == true){\n              //////////////////////////////修改 editor.txt.html()\n              var params = {\n              \ttitle : this.title,\n              \t// editorContent : this.editorContent,\n                editorContent : this.editor.txt.html(),\n              \tfinalValue : this.finalValue,\n                articleId : this.articleContent.article_id\n              }\n              console.log('修改文章',this.editor.txt.html())\n              this.$api.article.moPublish(params).then(\n                  res =>{\n                    this.isDoing = false\n                    this.ws_publish = false\n                    /* 修改*/\n                    if(res.data.admin_stop){\n                      res.data.admin_stop = this.$formatDate(new Date(res.data.admin_stop))\n                      this.$toast(`您被管理封号至${res.data.admin_stop},请注意言行`)\n                    }else if(res.data=='success'){\n                      this.$toast(\"文章修改成功\")\n                    }\n                    /* */\n                      // switch(res.data){\n                      //   case \"success\":\n                      //       this.$toast(\"文章修改成功\")\r\n                      //       // this.$router.replace({\r\n                      //       //   path:'/'\r\n                      //       // })\n                      //       break;\n                      // }\n                  }\n              )\n            }else{\n              ////////////////////////////////发布\n              var params = {\n              \ttitle : this.title,\n                /* 文章中需要的图片链接*/\n                // imgsSrc : this.imgsSrc,\n                editorContent : this.editor.txt.html(),\n              \tfinalValue : this.finalValue\n              }\n              this.$api.article.publish(params).then(\n                  res =>{\n                    console.log(res.data,'res.data')\n                    this.isDoing = false\n                    this.ws_publish = false\n                    if(res.data.admin_stop){\n                      res.data.admin_stop = this.$formatDate(new Date(res.data.admin_stop))\n                      this.$toast(`您被管理封号至${res.data.admin_stop},请注意言行`)\n                    }else if(res.data == 'no_allow_pub'){\n                      this.$toast(\"请歇一歇再来发帖吧\")\n                    }else if(res.data=='success'){\n                      this.$toast(\"文章发布成功\")\n                      this.setHandler(['user_article_count','add'])\n                    }\n                    /* */\n                      // switch(res.data){\n                      //   case \"success\":\n                      //       this.$toast(\"文章发布成功\")\n                      //       this.setHandler(['user_article_count','add'])\r\n                      //       // this.$router.replace({\r\n                      //       //   path:'/'\r\n                      //       // })\n                      //       break;\n                      //   case \"no_allow_pub\":\n                      //       this.$toast(\"请歇一歇再来发帖吧\")\n                      //       break;\n                      // }\n                  }\n              )\n            }\n\r\n\t\t\t\t\t\t// var params = {\r\n\t\t\t\t\t\t// \ttitle : this.title,\r\n\t\t\t\t\t\t// \teditorContent : this.editorContent,\r\n\t\t\t\t\t\t// \tfinalValue : this.finalValue\r\n\t\t\t\t\t\t// }\r\n      //       this.$api.article.publish(params).then(\n      //           res =>{\n      //             this.publish_Waiting_response = false\n      //               switch(res.data){\n      //                 case \"发布成功\":\n      //                     this.$tip(\"文章发布成功\",\"success\")\n      //                     break;\n      //               }\n      //           },\n      //           ()=>{\n      //             this.$tip(\"请求失败\",\"warning\")\n      //           }\n      //       )\r\n\r\n\t\t\t},\n      // DataURL 转换为 File\n      dataURLtoFile(dataurl,filename){\n        var arr = dataurl.split(','), mime = arr[0].match(/:(.*?);/)[1],\n                bstr = atob(arr[1]), n = bstr.length, u8arr = new Uint8Array(n);\n        \t\twhile(n--){\n        \t\t\tu8arr[n] = bstr.charCodeAt(n);\n        \t\t}\n        \t\treturn new File([u8arr], filename, {type:mime});\n      },\r\n\t\t\t//监听上传图片的几个阶段，和做相应的处理\r\n\t\t\ttoListenUp(editor){\n        var that = this;\r\n\t\t\t\teditor.customConfig.uploadImgHooks = {\r\n                    before: function (xhr, editor, files) {\n             //          console.log(editor,files[0],'files12323435457568677878978')\n             //          var reader = new FileReader();\n             //          reader.readAsDataURL(files[0]);\n             //          reader.onload = (e)=> {\n\n             //            var image = new Image();\n             //            image.src =e.target.result\n             //            image.onload = ()=> {\n             //             var w = image.width * 1,\n             //                 h = image.height,\n             //                 quality = 0.1, //图像质量\n             //                 canvas = document.createElement('canvas'),\n             //                 context = canvas.getContext('2d');\n\n             //                 canvas.width = w;\n             //                 canvas.height = w * (image.height / image.width);\n             //                 context.drawImage(image, 0, 0, canvas.width, canvas.height);\n             //                 var finalDataUrl = canvas.toDataURL(files[0].type,quality);\n\n             //                 files[0] = that.dataURLtoFile(finalDataUrl,files[0].name)\n\n\n             //            }\n             //          }\n\r\n                        // 图片上传之前触发\r\n                        // xhr 是 XMLHttpRequst 对象，editor 是编辑器对象，files 是选择的图片文件\r\n\r\n                        // 如果返回的结果是 {prevent: true, msg: 'xxxx'} 则表示用户放弃上传\r\n                        // return {\r\n                        //     prevent: true,\r\n                        //     msg: '放弃上传'\r\n                        // }\r\n                    },\r\n                    success: function (xhr, editor, result) {\r\n                        // 图片上传并返回结果，图片插入成功之后触发\r\n                        // xhr 是 XMLHttpRequst 对象，editor 是编辑器对象，result 是服务器端返回的结果\r\n                    },\r\n                    fail: function (xhr, editor, result) {\r\n                        // 图片上传并返回结果，但图片插入错误时触发\r\n                        // xhr 是 XMLHttpRequst 对象，editor 是编辑器对象，result 是服务器端返回的结果\r\n                    },\r\n                    error: function (xhr, editor) {\r\n                        // 图片上传出错时触发\r\n                        // xhr 是 XMLHttpRequst 对象，editor 是编辑器对象\r\n                    },\r\n                    timeout: function (xhr, editor) {\r\n                        // 图片上传超时时触发\r\n                        // xhr 是 XMLHttpRequst 对象，editor 是编辑器对象\r\n                    },\r\n\r\n                    // 如果服务器端返回的不是 {errno:0, data: [...]} 这种格式，可使用该配置\r\n                    // （但是，服务器端返回的必须是一个 JSON 格式字符串！！！否则会报错）\r\n                    customInsert: function (insertImg, result, editor) {\r\n                        // 图片上传并返回结果，自定义插入图片的事件（而不是编辑器自动插入图片！！！）\r\n                        // insertImg 是插入图片的函数，editor 是编辑器对象，result 是服务器端返回的结果// 举例：假如上传图片成功后，服务器端返回的是 {url:'....'} 这种格式，即可这样插入图片：\r\n                        var url = result.data[0] //获取后台返回的图片路径\r\n                        insertImg(url)//把图片路径展示在编辑器里面\r\n                        // result 必须是一个 JSON 格式字符串！！！否则报错\r\n                    }\r\n                }\r\n            }\r\n\r\n\r\n\t\t},\r\n\t\twatch:{\r\n\t\t\t// editorContent : {\r\n\t\t\t// \thandler(newValue, old){\r\n\t\t\t// \t\tconsole.log(\"新值为:\"+ newValue)\r\n\t\t\t// \t},\r\n\t\t\t// \timmediate: true\r\n\t\t\t// }\r\n\r\n\t\t},\n\r\n\t\tmounted () {\n      var that = this\r\n\t\t\tvar editor = new E(this.$refs.toolBar,this.$refs.editor)\n      this.editor = editor\n\r\n\t\t\teditor.customConfig = {\r\n\t\t\t\t// onchange : (html) =>{\n    //       this.imgsSrc.length = 0\n    //       for(let j= 0; j<this.$refs.editor.getElementsByTagName(\"img\").length;j++){\n    //         this.imgsSrc.push(this.$refs.editor.getElementsByTagName(\"img\")[j].src)\n    //       }\n    //       console.log(this.imgsSrc,'imgs')\n    //     },// 内容\n        uploadImgShowBase64 : false,// base 64 存储图片\r\n\t\t\t\t//uploadImgServer :'http://localhost:80/editorImages',\n         //'http://localhost:80/wangeditor/upload',// 配置上传服务器端地址的接口\r\n\t\t\t\tuploadImgMaxLength : 1 , // 限制一次最多上传 1 张图片\n        uploadImgMaxSize : 500 * 1024 * 1024,//将图片大小限制为 500M\r\n\t\t\t\t//uploadFileName : 'uploadImg' , //设置上传图片文件的时候，后台接受的文件名，files.uploadImg;\r\n\t\t\t\twithCredentials : false , //跨域上传中如果需要传递 cookie 需设置 withCredentials\r\n\t\t\t\tuploadImgTimeout : 3000,  //自定义 timeout 时间，这里是设置的3秒\n        zIndex : 0,\n        menus : [\n                    'head',  // 标题\n                    'bold',  // 粗体\n                    // 'fontSize',  // 字号\n                    // 'fontName',  // 字体\n                    //'italic',  // 斜体\n                    //'underline',  // 下划线\n                    //'strikeThrough',  // 删除线\n                    //'foreColor',  // 文字颜色\n                    //'backColor',  // 背景颜色\n                    'link',  // 插入链接\n                    'list',  // 列表\n                    //'justify',  // 对齐方式\n                    'quote',  // 引用\n                    'emoticon',  // 表情\n                    'image',  // 插入图片\n                    'table',  // 表格\n                    //'video',  // 插入视频\n                    //'code',  // 插入代码\n                    //'undo',  // 撤销\n                    //'redo'  // 重复\n                ],\n        customUploadImg : (files, insert)=>{\n          //判断是否登录\n          if(!!this.hasLogin == false){\n            this.$toast(\"您尚未登录\")\n            return;\n          }\n          console.log('未处理', files[0])\n          /* 计算图像压缩比例**********************/\n          let whatKB = files[0].size/1024;//图像多少kB\n          console.log(whatKB,'whatKB')\n          let quality;//图像质量\n          if(whatKB>50){//图像质量大于50kB 压缩\n            quality = 50 / whatKB\n            console.log(quality,'压缩')\n          }else{//小于等于50kB 不压缩\n            quality = undefined\n          }\n          /////////////////////////////////////////////////////\n          var reader = new FileReader();//创建文件阅读实例\n          reader.readAsDataURL(files[0]);// 1 将file 对象转成 Data URL\n          reader.onload = (e)=> {//文件阅读实例读取文件成功完成时触发\n            // var finalFlie;\n            var image = new Image();//创建图像对象\n            image.src =e.target.result//2 图像对象的src 等于 文件的路径\n            image.onload = ()=> {//图像加载完成时触发\n             var w = image.width * 1,\n                 h = image.height,\n                 //quality = 0.1, //图像质量\n                 canvas = document.createElement('canvas'),//创建canvas元素\n                 context = canvas.getContext('2d');\n                  /* 定义变量结束*/\n                 canvas.width = w;\n                 canvas.height = w * (image.height / image.width);\n                 context.drawImage(image, 0, 0, canvas.width, canvas.height);//3 根据Image对象画canvas\n                 //var finalDataUrl = canvas.toDataURL(files[0].type,quality);//\"image/jpeg\"\n                 var finalDataUrl = canvas.toDataURL(\"image/jpeg\",quality);//4 canvas转换成Data URL\n                 files[0] = that.dataURLtoFile(finalDataUrl,files[0].name)//5 将Data URL 转换成 文件流\n                 // 后端接口\n                 let formData = new FormData()//创建一个表单对象 用key/value提交文件\n                 formData.append('uploadImg',files[0])//表单对象附加key/value文件\n                 this.$api.article.editorImg(formData).then(\n                     res =>{\n                         switch(res.data){\n                            default:\n                            insert(res.data.imgUrl)\n                            this.$toast(\"图片上传成功\")\n                            /* ***************/\n                            /* ***************/\n                            /* default结束*/\n                         }\n\n                     }\n                 )\n                 // 后端接口\n            }\n\n          }\n          // console.log('files--------------', files[0])\n          /////////////////////////////////////////////////////\n        },\r\n\t\t\t}\r\n\t\t\t this.toListenUp(editor);//监听上传的各个阶段\r\n\t\t\t// 创建富文本编辑器\r\n\t\t\teditor.create()\n      /* */\n\n      /* */\n      /////////////////////////////////如果是修改文章 article_content\n      if(!!this.moBoolean == true){\n        editor.txt.html(this.articleContent.article_contentHTML)\n        this.title = this.articleContent.article_title\n      }\n      console.log(this.articleContent.article_contentHTML)\r\n\t\t},\n    computed:{\n      isDoing:{\n              get () {\n                    return this.$store._modulesNamespaceMap['win/'].context.state.isDoing\n              },\n              set (value) {\n                this.$store._modulesNamespaceMap['win/'].context.commit('isDoingHandler', value)\n              }\n            },\n      ...login.mapState({\n           \thasLogin : state => state.hasLogin\n           }),\n    \t...readAndEditor.mapState({\n    \t\tmoBoolean : state => state.moBoolean\n    \t}),\n      ...readAndEditor.mapState({\n      \tarticleContent : state => state.articleContent\n      })\n    },\n    beforeRouteLeave( to,from,next ){\n      this.moBooleanHandler(false)\n      this.articleContentHandler('')\n      next();  //写了这个，才会从当前导航离开，否则会一直停留在当前导航页\n    }\r\n\t}\r\n</script>\r\n\n<style>\n  .w-e-toolbar{\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n  }\n</style>\n\r\n<style scoped lang='scss'>\r\n\t@import \"../../assets/scss/editor/editor.scss\";\r\n</style>\n\n\n\n// WEBPACK FOOTER //\n// src/components/editor/Editor.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"wangEditor\"},[_c('van-field',{staticClass:\"articleTit\",attrs:{\"placeholder\":\"请输入文章标题…\",\"maxlength\":\"50\",\"autosize\":\"\",\"show-word-limit\":\"\",\"type\":\"textarea\"},model:{value:(_vm.title),callback:function ($$v) {_vm.title=$$v},expression:\"title\"}}),_vm._v(\" \"),_c('div',{ref:\"toolBar\",staticClass:\"toolBar\"}),_vm._v(\" \"),_c('div',{ref:\"editor\",staticClass:\"editor\"}),_vm._v(\" \"),_c('van-field',{attrs:{\"readonly\":\"\",\"clickable\":\"\",\"label\":\"文章分类\",\"value\":_vm.showValue,\"placeholder\":\"选择分类\"},on:{\"click\":function($event){_vm.showPicker = true}}}),_vm._v(\" \"),_c('van-popup',{attrs:{\"position\":\"bottom\"},model:{value:(_vm.showPicker),callback:function ($$v) {_vm.showPicker=$$v},expression:\"showPicker\"}},[_c('van-picker',{attrs:{\"columns\":_vm.columns,\"show-toolbar\":\"\"},on:{\"change\":_vm.onChange,\"confirm\":_vm.onConfirm,\"cancel\":function($event){_vm.showPicker = false}}})],1),_vm._v(\" \"),_c('van-button',{staticClass:\"publish\",attrs:{\"type\":\"primary\",\"size\":\"large\"},on:{\"click\":_vm.publish}},[_c('span',{directives:[{name:\"show\",rawName:\"v-show\",value:(!_vm.ws_publish),expression:\"!ws_publish\"}]},[_vm._v(\"立即发布\")]),_vm._v(\" \"),_c('span',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.ws_publish),expression:\"ws_publish\"}]},[_vm._v(\"发布中...\")])])],1)}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-58fc35b6\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/components/editor/Editor.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-58fc35b6\\\",\\\"scoped\\\":false,\\\"hasInlineConfig\\\":false}!../../../node_modules/vue-loader/lib/selector?type=styles&index=0!./Editor.vue\")\n  require(\"!!../../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-58fc35b6\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!sass-loader?{\\\"sourceMap\\\":true}!sass-resources-loader?{\\\"resources\\\":\\\"H:\\\\\\\\aaa\\\\\\\\good\\\\\\\\goodvue\\\\\\\\src\\\\\\\\assets\\\\\\\\scss\\\\\\\\global.scss\\\"}!../../../node_modules/vue-loader/lib/selector?type=styles&index=1!./Editor.vue\")\n}\nvar normalizeComponent = require(\"!../../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./Editor.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./Editor.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-58fc35b6\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./Editor.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-58fc35b6\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/editor/Editor.vue\n// module id = null\n// module chunks = ","// 19.1.2.14 Object.keys(O)\nvar toObject = require('./_to-object');\nvar $keys = require('./_object-keys');\n\nrequire('./_object-sap')('keys', function () {\n  return function keys(it) {\n    return $keys(toObject(it));\n  };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/es6.object.keys.js\n// module id = Cdx3\n// module chunks = 2","module.exports = { \"default\": require(\"core-js/library/fn/object/keys\"), __esModule: true };\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/babel-runtime/core-js/object/keys.js\n// module id = fZjL\n// module chunks = 2","require('../../modules/es6.object.keys');\nmodule.exports = require('../../modules/_core').Object.keys;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/fn/object/keys.js\n// module id = jFbC\n// module chunks = 2","(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n\ttypeof define === 'function' && define.amd ? define(factory) :\n\t(global.wangEditor = factory());\n}(this, (function () { 'use strict';\n\n/*\n    poly-fill\n*/\n\nvar polyfill = function () {\n\n    // Object.assign\n    if (typeof Object.assign != 'function') {\n        Object.assign = function (target, varArgs) {\n            // .length of function is 2\n            if (target == null) {\n                // TypeError if undefined or null\n                throw new TypeError('Cannot convert undefined or null to object');\n            }\n\n            var to = Object(target);\n\n            for (var index = 1; index < arguments.length; index++) {\n                var nextSource = arguments[index];\n\n                if (nextSource != null) {\n                    // Skip over if undefined or null\n                    for (var nextKey in nextSource) {\n                        // Avoid bugs when hasOwnProperty is shadowed\n                        if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {\n                            to[nextKey] = nextSource[nextKey];\n                        }\n                    }\n                }\n            }\n            return to;\n        };\n    }\n\n    // IE 中兼容 Element.prototype.matches\n    if (!Element.prototype.matches) {\n        Element.prototype.matches = Element.prototype.matchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector || Element.prototype.webkitMatchesSelector || function (s) {\n            var matches = (this.document || this.ownerDocument).querySelectorAll(s),\n                i = matches.length;\n            while (--i >= 0 && matches.item(i) !== this) {}\n            return i > -1;\n        };\n    }\n};\n\n/*\n    DOM 操作 API\n*/\n\n// 根据 html 代码片段创建 dom 对象\nfunction createElemByHTML(html) {\n    var div = void 0;\n    div = document.createElement('div');\n    div.innerHTML = html;\n    return div.children;\n}\n\n// 是否是 DOM List\nfunction isDOMList(selector) {\n    if (!selector) {\n        return false;\n    }\n    if (selector instanceof HTMLCollection || selector instanceof NodeList) {\n        return true;\n    }\n    return false;\n}\n\n// 封装 document.querySelectorAll\nfunction querySelectorAll(selector) {\n    var result = document.querySelectorAll(selector);\n    if (isDOMList(result)) {\n        return result;\n    } else {\n        return [result];\n    }\n}\n\n// 记录所有的事件绑定\nvar eventList = [];\n\n// 创建构造函数\nfunction DomElement(selector) {\n    if (!selector) {\n        return;\n    }\n\n    // selector 本来就是 DomElement 对象，直接返回\n    if (selector instanceof DomElement) {\n        return selector;\n    }\n\n    this.selector = selector;\n    var nodeType = selector.nodeType;\n\n    // 根据 selector 得出的结果（如 DOM，DOM List）\n    var selectorResult = [];\n    if (nodeType === 9) {\n        // document 节点\n        selectorResult = [selector];\n    } else if (nodeType === 1) {\n        // 单个 DOM 节点\n        selectorResult = [selector];\n    } else if (isDOMList(selector) || selector instanceof Array) {\n        // DOM List 或者数组\n        selectorResult = selector;\n    } else if (typeof selector === 'string') {\n        // 字符串\n        selector = selector.replace('/\\n/mg', '').trim();\n        if (selector.indexOf('<') === 0) {\n            // 如 <div>\n            selectorResult = createElemByHTML(selector);\n        } else {\n            // 如 #id .class\n            selectorResult = querySelectorAll(selector);\n        }\n    }\n\n    var length = selectorResult.length;\n    if (!length) {\n        // 空数组\n        return this;\n    }\n\n    // 加入 DOM 节点\n    var i = void 0;\n    for (i = 0; i < length; i++) {\n        this[i] = selectorResult[i];\n    }\n    this.length = length;\n}\n\n// 修改原型\nDomElement.prototype = {\n    constructor: DomElement,\n\n    // 类数组，forEach\n    forEach: function forEach(fn) {\n        var i = void 0;\n        for (i = 0; i < this.length; i++) {\n            var elem = this[i];\n            var result = fn.call(elem, elem, i);\n            if (result === false) {\n                break;\n            }\n        }\n        return this;\n    },\n\n    // clone\n    clone: function clone(deep) {\n        var cloneList = [];\n        this.forEach(function (elem) {\n            cloneList.push(elem.cloneNode(!!deep));\n        });\n        return $(cloneList);\n    },\n\n    // 获取第几个元素\n    get: function get(index) {\n        var length = this.length;\n        if (index >= length) {\n            index = index % length;\n        }\n        return $(this[index]);\n    },\n\n    // 第一个\n    first: function first() {\n        return this.get(0);\n    },\n\n    // 最后一个\n    last: function last() {\n        var length = this.length;\n        return this.get(length - 1);\n    },\n\n    // 绑定事件\n    on: function on(type, selector, fn) {\n        // selector 不为空，证明绑定事件要加代理\n        if (!fn) {\n            fn = selector;\n            selector = null;\n        }\n\n        // type 是否有多个\n        var types = [];\n        types = type.split(/\\s+/);\n\n        return this.forEach(function (elem) {\n            types.forEach(function (type) {\n                if (!type) {\n                    return;\n                }\n\n                // 记录下，方便后面解绑\n                eventList.push({\n                    elem: elem,\n                    type: type,\n                    fn: fn\n                });\n\n                if (!selector) {\n                    // 无代理\n                    elem.addEventListener(type, fn);\n                    return;\n                }\n\n                // 有代理\n                elem.addEventListener(type, function (e) {\n                    var target = e.target;\n                    if (target.matches(selector)) {\n                        fn.call(target, e);\n                    }\n                });\n            });\n        });\n    },\n\n    // 取消事件绑定\n    off: function off(type, fn) {\n        return this.forEach(function (elem) {\n            elem.removeEventListener(type, fn);\n        });\n    },\n\n    // 获取/设置 属性\n    attr: function attr(key, val) {\n        if (val == null) {\n            // 获取值\n            return this[0].getAttribute(key);\n        } else {\n            // 设置值\n            return this.forEach(function (elem) {\n                elem.setAttribute(key, val);\n            });\n        }\n    },\n\n    // 添加 class\n    addClass: function addClass(className) {\n        if (!className) {\n            return this;\n        }\n        return this.forEach(function (elem) {\n            var arr = void 0;\n            if (elem.className) {\n                // 解析当前 className 转换为数组\n                arr = elem.className.split(/\\s/);\n                arr = arr.filter(function (item) {\n                    return !!item.trim();\n                });\n                // 添加 class\n                if (arr.indexOf(className) < 0) {\n                    arr.push(className);\n                }\n                // 修改 elem.class\n                elem.className = arr.join(' ');\n            } else {\n                elem.className = className;\n            }\n        });\n    },\n\n    // 删除 class\n    removeClass: function removeClass(className) {\n        if (!className) {\n            return this;\n        }\n        return this.forEach(function (elem) {\n            var arr = void 0;\n            if (elem.className) {\n                // 解析当前 className 转换为数组\n                arr = elem.className.split(/\\s/);\n                arr = arr.filter(function (item) {\n                    item = item.trim();\n                    // 删除 class\n                    if (!item || item === className) {\n                        return false;\n                    }\n                    return true;\n                });\n                // 修改 elem.class\n                elem.className = arr.join(' ');\n            }\n        });\n    },\n\n    // 修改 css\n    css: function css(key, val) {\n        var currentStyle = key + ':' + val + ';';\n        return this.forEach(function (elem) {\n            var style = (elem.getAttribute('style') || '').trim();\n            var styleArr = void 0,\n                resultArr = [];\n            if (style) {\n                // 将 style 按照 ; 拆分为数组\n                styleArr = style.split(';');\n                styleArr.forEach(function (item) {\n                    // 对每项样式，按照 : 拆分为 key 和 value\n                    var arr = item.split(':').map(function (i) {\n                        return i.trim();\n                    });\n                    if (arr.length === 2) {\n                        resultArr.push(arr[0] + ':' + arr[1]);\n                    }\n                });\n                // 替换或者新增\n                resultArr = resultArr.map(function (item) {\n                    if (item.indexOf(key) === 0) {\n                        return currentStyle;\n                    } else {\n                        return item;\n                    }\n                });\n                if (resultArr.indexOf(currentStyle) < 0) {\n                    resultArr.push(currentStyle);\n                }\n                // 结果\n                elem.setAttribute('style', resultArr.join('; '));\n            } else {\n                // style 无值\n                elem.setAttribute('style', currentStyle);\n            }\n        });\n    },\n\n    // 显示\n    show: function show() {\n        return this.css('display', 'block');\n    },\n\n    // 隐藏\n    hide: function hide() {\n        return this.css('display', 'none');\n    },\n\n    // 获取子节点\n    children: function children() {\n        var elem = this[0];\n        if (!elem) {\n            return null;\n        }\n\n        return $(elem.children);\n    },\n\n    // 获取子节点（包括文本节点）\n    childNodes: function childNodes() {\n        var elem = this[0];\n        if (!elem) {\n            return null;\n        }\n\n        return $(elem.childNodes);\n    },\n\n    // 增加子节点\n    append: function append($children) {\n        return this.forEach(function (elem) {\n            $children.forEach(function (child) {\n                elem.appendChild(child);\n            });\n        });\n    },\n\n    // 移除当前节点\n    remove: function remove() {\n        return this.forEach(function (elem) {\n            if (elem.remove) {\n                elem.remove();\n            } else {\n                var parent = elem.parentElement;\n                parent && parent.removeChild(elem);\n            }\n        });\n    },\n\n    // 是否包含某个子节点\n    isContain: function isContain($child) {\n        var elem = this[0];\n        var child = $child[0];\n        return elem.contains(child);\n    },\n\n    // 尺寸数据\n    getSizeData: function getSizeData() {\n        var elem = this[0];\n        return elem.getBoundingClientRect(); // 可得到 bottom height left right top width 的数据\n    },\n\n    // 封装 nodeName\n    getNodeName: function getNodeName() {\n        var elem = this[0];\n        return elem.nodeName;\n    },\n\n    // 从当前元素查找\n    find: function find(selector) {\n        var elem = this[0];\n        return $(elem.querySelectorAll(selector));\n    },\n\n    // 获取当前元素的 text\n    text: function text(val) {\n        if (!val) {\n            // 获取 text\n            var elem = this[0];\n            return elem.innerHTML.replace(/<.*?>/g, function () {\n                return '';\n            });\n        } else {\n            // 设置 text\n            return this.forEach(function (elem) {\n                elem.innerHTML = val;\n            });\n        }\n    },\n\n    // 获取 html\n    html: function html(value) {\n        var elem = this[0];\n        if (value == null) {\n            return elem.innerHTML;\n        } else {\n            elem.innerHTML = value;\n            return this;\n        }\n    },\n\n    // 获取 value\n    val: function val() {\n        var elem = this[0];\n        return elem.value.trim();\n    },\n\n    // focus\n    focus: function focus() {\n        return this.forEach(function (elem) {\n            elem.focus();\n        });\n    },\n\n    // parent\n    parent: function parent() {\n        var elem = this[0];\n        return $(elem.parentElement);\n    },\n\n    // parentUntil 找到符合 selector 的父节点\n    parentUntil: function parentUntil(selector, _currentElem) {\n        var results = document.querySelectorAll(selector);\n        var length = results.length;\n        if (!length) {\n            // 传入的 selector 无效\n            return null;\n        }\n\n        var elem = _currentElem || this[0];\n        if (elem.nodeName === 'BODY') {\n            return null;\n        }\n\n        var parent = elem.parentElement;\n        var i = void 0;\n        for (i = 0; i < length; i++) {\n            if (parent === results[i]) {\n                // 找到，并返回\n                return $(parent);\n            }\n        }\n\n        // 继续查找\n        return this.parentUntil(selector, parent);\n    },\n\n    // 判断两个 elem 是否相等\n    equal: function equal($elem) {\n        if ($elem.nodeType === 1) {\n            return this[0] === $elem;\n        } else {\n            return this[0] === $elem[0];\n        }\n    },\n\n    // 将该元素插入到某个元素前面\n    insertBefore: function insertBefore(selector) {\n        var $referenceNode = $(selector);\n        var referenceNode = $referenceNode[0];\n        if (!referenceNode) {\n            return this;\n        }\n        return this.forEach(function (elem) {\n            var parent = referenceNode.parentNode;\n            parent.insertBefore(elem, referenceNode);\n        });\n    },\n\n    // 将该元素插入到某个元素后面\n    insertAfter: function insertAfter(selector) {\n        var $referenceNode = $(selector);\n        var referenceNode = $referenceNode[0];\n        if (!referenceNode) {\n            return this;\n        }\n        return this.forEach(function (elem) {\n            var parent = referenceNode.parentNode;\n            if (parent.lastChild === referenceNode) {\n                // 最后一个元素\n                parent.appendChild(elem);\n            } else {\n                // 不是最后一个元素\n                parent.insertBefore(elem, referenceNode.nextSibling);\n            }\n        });\n    }\n};\n\n// new 一个对象\nfunction $(selector) {\n    return new DomElement(selector);\n}\n\n// 解绑所有事件，用于销毁编辑器\n$.offAll = function () {\n    eventList.forEach(function (item) {\n        var elem = item.elem;\n        var type = item.type;\n        var fn = item.fn;\n        // 解绑\n        elem.removeEventListener(type, fn);\n    });\n};\n\n/*\n    配置信息\n*/\n\nvar config = {\n\n    // 默认菜单配置\n    menus: ['head', 'bold', 'fontSize', 'fontName', 'italic', 'underline', 'strikeThrough', 'foreColor', 'backColor', 'link', 'list', 'justify', 'quote', 'emoticon', 'image', 'table', 'video', 'code', 'undo', 'redo'],\n\n    fontNames: ['宋体', '微软雅黑', 'Arial', 'Tahoma', 'Verdana'],\n\n    colors: ['#000000', '#eeece0', '#1c487f', '#4d80bf', '#c24f4a', '#8baa4a', '#7b5ba1', '#46acc8', '#f9963b', '#ffffff'],\n\n    // // 语言配置\n    // lang: {\n    //     '设置标题': 'title',\n    //     '正文': 'p',\n    //     '链接文字': 'link text',\n    //     '链接': 'link',\n    //     '插入': 'insert',\n    //     '创建': 'init'\n    // },\n\n    // 表情\n    emotions: [{\n        // tab 的标题\n        title: '默认',\n        // type -> 'emoji' / 'image'\n        type: 'image',\n        // content -> 数组\n        content: [{\n            alt: '[坏笑]',\n            src: 'http://img.t.sinajs.cn/t4/appstyle/expression/ext/normal/50/pcmoren_huaixiao_org.png'\n        }, {\n            alt: '[舔屏]',\n            src: 'http://img.t.sinajs.cn/t4/appstyle/expression/ext/normal/40/pcmoren_tian_org.png'\n        }, {\n            alt: '[污]',\n            src: 'http://img.t.sinajs.cn/t4/appstyle/expression/ext/normal/3c/pcmoren_wu_org.png'\n        }]\n    }, {\n        // tab 的标题\n        title: '新浪',\n        // type -> 'emoji' / 'image'\n        type: 'image',\n        // content -> 数组\n        content: [{\n            src: 'http://img.t.sinajs.cn/t35/style/images/common/face/ext/normal/7a/shenshou_thumb.gif',\n            alt: '[草泥马]'\n        }, {\n            src: 'http://img.t.sinajs.cn/t35/style/images/common/face/ext/normal/60/horse2_thumb.gif',\n            alt: '[神马]'\n        }, {\n            src: 'http://img.t.sinajs.cn/t35/style/images/common/face/ext/normal/bc/fuyun_thumb.gif',\n            alt: '[浮云]'\n        }]\n    }, {\n        // tab 的标题\n        title: 'emoji',\n        // type -> 'emoji' / 'image'\n        type: 'emoji',\n        // content -> 数组\n        content: '😀 😃 😄 😁 😆 😅 😂 😊 😇 🙂 🙃 😉 😓 😪 😴 🙄 🤔 😬 🤐'.split(/\\s/)\n    }],\n\n    // 编辑区域的 z-index\n    zIndex: 10000,\n\n    // 是否开启 debug 模式（debug 模式下错误会 throw error 形式抛出）\n    debug: false,\n\n    // 插入链接时候的格式校验\n    linkCheck: function linkCheck(text, link) {\n        // text 是插入的文字\n        // link 是插入的链接\n        return true; // 返回 true 即表示成功\n        // return '校验失败' // 返回字符串即表示失败的提示信息\n    },\n\n    // 插入网络图片的校验\n    linkImgCheck: function linkImgCheck(src) {\n        // src 即图片的地址\n        return true; // 返回 true 即表示成功\n        // return '校验失败'  // 返回字符串即表示失败的提示信息\n    },\n\n    // 粘贴过滤样式，默认开启\n    pasteFilterStyle: true,\n\n    // 粘贴内容时，忽略图片。默认关闭\n    pasteIgnoreImg: false,\n\n    // 对粘贴的文字进行自定义处理，返回处理后的结果。编辑器会将处理后的结果粘贴到编辑区域中。\n    // IE 暂时不支持\n    pasteTextHandle: function pasteTextHandle(content) {\n        // content 即粘贴过来的内容（html 或 纯文本），可进行自定义处理然后返回\n        return content;\n    },\n\n    // onchange 事件\n    // onchange: function (html) {\n    //     // html 即变化之后的内容\n    //     console.log(html)\n    // },\n\n    // 是否显示添加网络图片的 tab\n    showLinkImg: true,\n\n    // 插入网络图片的回调\n    linkImgCallback: function linkImgCallback(url) {\n        // console.log(url)  // url 即插入图片的地址\n    },\n\n    // 默认上传图片 max size: 5M\n    uploadImgMaxSize: 5 * 1024 * 1024,\n\n    // 配置一次最多上传几个图片\n    // uploadImgMaxLength: 5,\n\n    // 上传图片，是否显示 base64 格式\n    uploadImgShowBase64: false,\n\n    // 上传图片，server 地址（如果有值，则 base64 格式的配置则失效）\n    // uploadImgServer: '/upload',\n\n    // 自定义配置 filename\n    uploadFileName: '',\n\n    // 上传图片的自定义参数\n    uploadImgParams: {\n        // token: 'abcdef12345'\n    },\n\n    // 上传图片的自定义header\n    uploadImgHeaders: {\n        // 'Accept': 'text/x-json'\n    },\n\n    // 配置 XHR withCredentials\n    withCredentials: false,\n\n    // 自定义上传图片超时时间 ms\n    uploadImgTimeout: 10000,\n\n    // 上传图片 hook\n    uploadImgHooks: {\n        // customInsert: function (insertLinkImg, result, editor) {\n        //     console.log('customInsert')\n        //     // 图片上传并返回结果，自定义插入图片的事件，而不是编辑器自动插入图片\n        //     const data = result.data1 || []\n        //     data.forEach(link => {\n        //         insertLinkImg(link)\n        //     })\n        // },\n        before: function before(xhr, editor, files) {\n            // 图片上传之前触发\n\n            // 如果返回的结果是 {prevent: true, msg: 'xxxx'} 则表示用户放弃上传\n            // return {\n            //     prevent: true,\n            //     msg: '放弃上传'\n            // }\n        },\n        success: function success(xhr, editor, result) {\n            // 图片上传并返回结果，图片插入成功之后触发\n        },\n        fail: function fail(xhr, editor, result) {\n            // 图片上传并返回结果，但图片插入错误时触发\n        },\n        error: function error(xhr, editor) {\n            // 图片上传出错时触发\n        },\n        timeout: function timeout(xhr, editor) {\n            // 图片上传超时时触发\n        }\n    },\n\n    // 是否上传七牛云，默认为 false\n    qiniu: false\n\n};\n\n/*\n    工具\n*/\n\n// 和 UA 相关的属性\nvar UA = {\n    _ua: navigator.userAgent,\n\n    // 是否 webkit\n    isWebkit: function isWebkit() {\n        var reg = /webkit/i;\n        return reg.test(this._ua);\n    },\n\n    // 是否 IE\n    isIE: function isIE() {\n        return 'ActiveXObject' in window;\n    }\n};\n\n// 遍历对象\nfunction objForEach(obj, fn) {\n    var key = void 0,\n        result = void 0;\n    for (key in obj) {\n        if (obj.hasOwnProperty(key)) {\n            result = fn.call(obj, key, obj[key]);\n            if (result === false) {\n                break;\n            }\n        }\n    }\n}\n\n// 遍历类数组\nfunction arrForEach(fakeArr, fn) {\n    var i = void 0,\n        item = void 0,\n        result = void 0;\n    var length = fakeArr.length || 0;\n    for (i = 0; i < length; i++) {\n        item = fakeArr[i];\n        result = fn.call(fakeArr, item, i);\n        if (result === false) {\n            break;\n        }\n    }\n}\n\n// 获取随机数\nfunction getRandom(prefix) {\n    return prefix + Math.random().toString().slice(2);\n}\n\n// 替换 html 特殊字符\nfunction replaceHtmlSymbol(html) {\n    if (html == null) {\n        return '';\n    }\n    return html.replace(/</gm, '&lt;').replace(/>/gm, '&gt;').replace(/\"/gm, '&quot;').replace(/(\\r\\n|\\r|\\n)/g, '<br/>');\n}\n\n// 返回百分比的格式\n\n\n// 判断是不是 function\nfunction isFunction(fn) {\n    return typeof fn === 'function';\n}\n\n/*\n    bold-menu\n*/\n// 构造函数\nfunction Bold(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-bold\"></i>\\n        </div>');\n    this.type = 'click';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nBold.prototype = {\n    constructor: Bold,\n\n    // 点击事件\n    onClick: function onClick(e) {\n        // 点击菜单将触发这里\n\n        var editor = this.editor;\n        var isSeleEmpty = editor.selection.isSelectionEmpty();\n\n        if (isSeleEmpty) {\n            // 选区是空的，插入并选中一个“空白”\n            editor.selection.createEmptyRange();\n        }\n\n        // 执行 bold 命令\n        editor.cmd.do('bold');\n\n        if (isSeleEmpty) {\n            // 需要将选取折叠起来\n            editor.selection.collapseRange();\n            editor.selection.restoreSelection();\n        }\n    },\n\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        if (editor.cmd.queryCommandState('bold')) {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    替换多语言\n */\n\nvar replaceLang = function (editor, str) {\n    var langArgs = editor.config.langArgs || [];\n    var result = str;\n\n    langArgs.forEach(function (item) {\n        var reg = item.reg;\n        var val = item.val;\n\n        if (reg.test(result)) {\n            result = result.replace(reg, function () {\n                return val;\n            });\n        }\n    });\n\n    return result;\n};\n\n/*\n    droplist\n*/\nvar _emptyFn = function _emptyFn() {};\n\n// 构造函数\nfunction DropList(menu, opt) {\n    var _this = this;\n\n    // droplist 所依附的菜单\n    var editor = menu.editor;\n    this.menu = menu;\n    this.opt = opt;\n    // 容器\n    var $container = $('<div class=\"w-e-droplist\"></div>');\n\n    // 标题\n    var $title = opt.$title;\n    var titleHtml = void 0;\n    if ($title) {\n        // 替换多语言\n        titleHtml = $title.html();\n        titleHtml = replaceLang(editor, titleHtml);\n        $title.html(titleHtml);\n\n        $title.addClass('w-e-dp-title');\n        $container.append($title);\n    }\n\n    var list = opt.list || [];\n    var type = opt.type || 'list'; // 'list' 列表形式（如“标题”菜单） / 'inline-block' 块状形式（如“颜色”菜单）\n    var onClick = opt.onClick || _emptyFn;\n\n    // 加入 DOM 并绑定事件\n    var $list = $('<ul class=\"' + (type === 'list' ? 'w-e-list' : 'w-e-block') + '\"></ul>');\n    $container.append($list);\n    list.forEach(function (item) {\n        var $elem = item.$elem;\n\n        // 替换多语言\n        var elemHtml = $elem.html();\n        elemHtml = replaceLang(editor, elemHtml);\n        $elem.html(elemHtml);\n\n        var value = item.value;\n        var $li = $('<li class=\"w-e-item\"></li>');\n        if ($elem) {\n            $li.append($elem);\n            $list.append($li);\n            $li.on('click', function (e) {\n                onClick(value);\n\n                // 隐藏\n                _this.hideTimeoutId = setTimeout(function () {\n                    _this.hide();\n                }, 0);\n            });\n        }\n    });\n\n    // 绑定隐藏事件\n    $container.on('mouseleave', function (e) {\n        _this.hideTimeoutId = setTimeout(function () {\n            _this.hide();\n        }, 0);\n    });\n\n    // 记录属性\n    this.$container = $container;\n\n    // 基本属性\n    this._rendered = false;\n    this._show = false;\n}\n\n// 原型\nDropList.prototype = {\n    constructor: DropList,\n\n    // 显示（插入DOM）\n    show: function show() {\n        if (this.hideTimeoutId) {\n            // 清除之前的定时隐藏\n            clearTimeout(this.hideTimeoutId);\n        }\n\n        var menu = this.menu;\n        var $menuELem = menu.$elem;\n        var $container = this.$container;\n        if (this._show) {\n            return;\n        }\n        if (this._rendered) {\n            // 显示\n            $container.show();\n        } else {\n            // 加入 DOM 之前先定位位置\n            var menuHeight = $menuELem.getSizeData().height || 0;\n            var width = this.opt.width || 100; // 默认为 100\n            $container.css('margin-top', menuHeight + 'px').css('width', width + 'px');\n\n            // 加入到 DOM\n            $menuELem.append($container);\n            this._rendered = true;\n        }\n\n        // 修改属性\n        this._show = true;\n    },\n\n    // 隐藏（移除DOM）\n    hide: function hide() {\n        if (this.showTimeoutId) {\n            // 清除之前的定时显示\n            clearTimeout(this.showTimeoutId);\n        }\n\n        var $container = this.$container;\n        if (!this._show) {\n            return;\n        }\n        // 隐藏并需改属性\n        $container.hide();\n        this._show = false;\n    }\n};\n\n/*\n    menu - header\n*/\n// 构造函数\nfunction Head(editor) {\n    var _this = this;\n\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-header\"></i></div>');\n    this.type = 'droplist';\n\n    // 当前是否 active 状态\n    this._active = false;\n\n    // 初始化 droplist\n    this.droplist = new DropList(this, {\n        width: 100,\n        $title: $('<p>设置标题</p>'),\n        type: 'list', // droplist 以列表形式展示\n        list: [{ $elem: $('<h1>H1</h1>'), value: '<h1>' }, { $elem: $('<h2>H2</h2>'), value: '<h2>' }, { $elem: $('<h3>H3</h3>'), value: '<h3>' }, { $elem: $('<h4>H4</h4>'), value: '<h4>' }, { $elem: $('<h5>H5</h5>'), value: '<h5>' }, { $elem: $('<p>正文</p>'), value: '<p>' }],\n        onClick: function onClick(value) {\n            // 注意 this 是指向当前的 Head 对象\n            _this._command(value);\n        }\n    });\n}\n\n// 原型\nHead.prototype = {\n    constructor: Head,\n\n    // 执行命令\n    _command: function _command(value) {\n        var editor = this.editor;\n\n        var $selectionElem = editor.selection.getSelectionContainerElem();\n        if (editor.$textElem.equal($selectionElem)) {\n            // 不能选中多行来设置标题，否则会出现问题\n            // 例如选中的是 <p>xxx</p><p>yyy</p> 来设置标题，设置之后会成为 <h1>xxx<br>yyy</h1> 不符合预期\n            return;\n        }\n\n        editor.cmd.do('formatBlock', value);\n    },\n\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        var reg = /^h/i;\n        var cmdValue = editor.cmd.queryCommandValue('formatBlock');\n        if (reg.test(cmdValue)) {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    menu - fontSize\n*/\n\n// 构造函数\nfunction FontSize(editor) {\n    var _this = this;\n\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-text-heigh\"></i></div>');\n    this.type = 'droplist';\n\n    // 当前是否 active 状态\n    this._active = false;\n\n    // 初始化 droplist\n    this.droplist = new DropList(this, {\n        width: 160,\n        $title: $('<p>字号</p>'),\n        type: 'list', // droplist 以列表形式展示\n        list: [{ $elem: $('<span style=\"font-size: x-small;\">x-small</span>'), value: '1' }, { $elem: $('<span style=\"font-size: small;\">small</span>'), value: '2' }, { $elem: $('<span>normal</span>'), value: '3' }, { $elem: $('<span style=\"font-size: large;\">large</span>'), value: '4' }, { $elem: $('<span style=\"font-size: x-large;\">x-large</span>'), value: '5' }, { $elem: $('<span style=\"font-size: xx-large;\">xx-large</span>'), value: '6' }],\n        onClick: function onClick(value) {\n            // 注意 this 是指向当前的 FontSize 对象\n            _this._command(value);\n        }\n    });\n}\n\n// 原型\nFontSize.prototype = {\n    constructor: FontSize,\n\n    // 执行命令\n    _command: function _command(value) {\n        var editor = this.editor;\n        editor.cmd.do('fontSize', value);\n    }\n};\n\n/*\n    menu - fontName\n*/\n\n// 构造函数\nfunction FontName(editor) {\n    var _this = this;\n\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-font\"></i></div>');\n    this.type = 'droplist';\n\n    // 当前是否 active 状态\n    this._active = false;\n\n    // 获取配置的字体\n    var config = editor.config;\n    var fontNames = config.fontNames || [];\n\n    // 初始化 droplist\n    this.droplist = new DropList(this, {\n        width: 100,\n        $title: $('<p>字体</p>'),\n        type: 'list', // droplist 以列表形式展示\n        list: fontNames.map(function (fontName) {\n            return { $elem: $('<span style=\"font-family: ' + fontName + ';\">' + fontName + '</span>'), value: fontName };\n        }),\n        onClick: function onClick(value) {\n            // 注意 this 是指向当前的 FontName 对象\n            _this._command(value);\n        }\n    });\n}\n\n// 原型\nFontName.prototype = {\n    constructor: FontName,\n\n    _command: function _command(value) {\n        var editor = this.editor;\n        editor.cmd.do('fontName', value);\n    }\n};\n\n/*\n    panel\n*/\n\nvar emptyFn = function emptyFn() {};\n\n// 记录已经显示 panel 的菜单\nvar _isCreatedPanelMenus = [];\n\n// 构造函数\nfunction Panel(menu, opt) {\n    this.menu = menu;\n    this.opt = opt;\n}\n\n// 原型\nPanel.prototype = {\n    constructor: Panel,\n\n    // 显示（插入DOM）\n    show: function show() {\n        var _this = this;\n\n        var menu = this.menu;\n        if (_isCreatedPanelMenus.indexOf(menu) >= 0) {\n            // 该菜单已经创建了 panel 不能再创建\n            return;\n        }\n\n        var editor = menu.editor;\n        var $body = $('body');\n        var $textContainerElem = editor.$textContainerElem;\n        var opt = this.opt;\n\n        // panel 的容器\n        var $container = $('<div class=\"w-e-panel-container\"></div>');\n        var width = opt.width || 300; // 默认 300px\n        $container.css('width', width + 'px').css('margin-left', (0 - width) / 2 + 'px');\n\n        // 添加关闭按钮\n        var $closeBtn = $('<i class=\"w-e-icon-close w-e-panel-close\"></i>');\n        $container.append($closeBtn);\n        $closeBtn.on('click', function () {\n            _this.hide();\n        });\n\n        // 准备 tabs 容器\n        var $tabTitleContainer = $('<ul class=\"w-e-panel-tab-title\"></ul>');\n        var $tabContentContainer = $('<div class=\"w-e-panel-tab-content\"></div>');\n        $container.append($tabTitleContainer).append($tabContentContainer);\n\n        // 设置高度\n        var height = opt.height;\n        if (height) {\n            $tabContentContainer.css('height', height + 'px').css('overflow-y', 'auto');\n        }\n\n        // tabs\n        var tabs = opt.tabs || [];\n        var tabTitleArr = [];\n        var tabContentArr = [];\n        tabs.forEach(function (tab, tabIndex) {\n            if (!tab) {\n                return;\n            }\n            var title = tab.title || '';\n            var tpl = tab.tpl || '';\n\n            // 替换多语言\n            title = replaceLang(editor, title);\n            tpl = replaceLang(editor, tpl);\n\n            // 添加到 DOM\n            var $title = $('<li class=\"w-e-item\">' + title + '</li>');\n            $tabTitleContainer.append($title);\n            var $content = $(tpl);\n            $tabContentContainer.append($content);\n\n            // 记录到内存\n            $title._index = tabIndex;\n            tabTitleArr.push($title);\n            tabContentArr.push($content);\n\n            // 设置 active 项\n            if (tabIndex === 0) {\n                $title._active = true;\n                $title.addClass('w-e-active');\n            } else {\n                $content.hide();\n            }\n\n            // 绑定 tab 的事件\n            $title.on('click', function (e) {\n                if ($title._active) {\n                    return;\n                }\n                // 隐藏所有的 tab\n                tabTitleArr.forEach(function ($title) {\n                    $title._active = false;\n                    $title.removeClass('w-e-active');\n                });\n                tabContentArr.forEach(function ($content) {\n                    $content.hide();\n                });\n\n                // 显示当前的 tab\n                $title._active = true;\n                $title.addClass('w-e-active');\n                $content.show();\n            });\n        });\n\n        // 绑定关闭事件\n        $container.on('click', function (e) {\n            // 点击时阻止冒泡\n            e.stopPropagation();\n        });\n        $body.on('click', function (e) {\n            _this.hide();\n        });\n\n        // 添加到 DOM\n        $textContainerElem.append($container);\n\n        // 绑定 opt 的事件，只有添加到 DOM 之后才能绑定成功\n        tabs.forEach(function (tab, index) {\n            if (!tab) {\n                return;\n            }\n            var events = tab.events || [];\n            events.forEach(function (event) {\n                var selector = event.selector;\n                var type = event.type;\n                var fn = event.fn || emptyFn;\n                var $content = tabContentArr[index];\n                $content.find(selector).on(type, function (e) {\n                    e.stopPropagation();\n                    var needToHide = fn(e);\n                    // 执行完事件之后，是否要关闭 panel\n                    if (needToHide) {\n                        _this.hide();\n                    }\n                });\n            });\n        });\n\n        // focus 第一个 elem\n        var $inputs = $container.find('input[type=text],textarea');\n        if ($inputs.length) {\n            $inputs.get(0).focus();\n        }\n\n        // 添加到属性\n        this.$container = $container;\n\n        // 隐藏其他 panel\n        this._hideOtherPanels();\n        // 记录该 menu 已经创建了 panel\n        _isCreatedPanelMenus.push(menu);\n    },\n\n    // 隐藏（移除DOM）\n    hide: function hide() {\n        var menu = this.menu;\n        var $container = this.$container;\n        if ($container) {\n            $container.remove();\n        }\n\n        // 将该 menu 记录中移除\n        _isCreatedPanelMenus = _isCreatedPanelMenus.filter(function (item) {\n            if (item === menu) {\n                return false;\n            } else {\n                return true;\n            }\n        });\n    },\n\n    // 一个 panel 展示时，隐藏其他 panel\n    _hideOtherPanels: function _hideOtherPanels() {\n        if (!_isCreatedPanelMenus.length) {\n            return;\n        }\n        _isCreatedPanelMenus.forEach(function (menu) {\n            var panel = menu.panel || {};\n            if (panel.hide) {\n                panel.hide();\n            }\n        });\n    }\n};\n\n/*\n    menu - link\n*/\n// 构造函数\nfunction Link(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-link\"></i></div>');\n    this.type = 'panel';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nLink.prototype = {\n    constructor: Link,\n\n    // 点击事件\n    onClick: function onClick(e) {\n        var editor = this.editor;\n        var $linkelem = void 0;\n\n        if (this._active) {\n            // 当前选区在链接里面\n            $linkelem = editor.selection.getSelectionContainerElem();\n            if (!$linkelem) {\n                return;\n            }\n            // 将该元素都包含在选取之内，以便后面整体替换\n            editor.selection.createRangeByElem($linkelem);\n            editor.selection.restoreSelection();\n            // 显示 panel\n            this._createPanel($linkelem.text(), $linkelem.attr('href'));\n        } else {\n            // 当前选区不在链接里面\n            if (editor.selection.isSelectionEmpty()) {\n                // 选区是空的，未选中内容\n                this._createPanel('', '');\n            } else {\n                // 选中内容了\n                this._createPanel(editor.selection.getSelectionText(), '');\n            }\n        }\n    },\n\n    // 创建 panel\n    _createPanel: function _createPanel(text, link) {\n        var _this = this;\n\n        // panel 中需要用到的id\n        var inputLinkId = getRandom('input-link');\n        var inputTextId = getRandom('input-text');\n        var btnOkId = getRandom('btn-ok');\n        var btnDelId = getRandom('btn-del');\n\n        // 是否显示“删除链接”\n        var delBtnDisplay = this._active ? 'inline-block' : 'none';\n\n        // 初始化并显示 panel\n        var panel = new Panel(this, {\n            width: 300,\n            // panel 中可包含多个 tab\n            tabs: [{\n                // tab 的标题\n                title: '链接',\n                // 模板\n                tpl: '<div>\\n                            <input id=\"' + inputTextId + '\" type=\"text\" class=\"block\" value=\"' + text + '\" placeholder=\"\\u94FE\\u63A5\\u6587\\u5B57\"/></td>\\n                            <input id=\"' + inputLinkId + '\" type=\"text\" class=\"block\" value=\"' + link + '\" placeholder=\"http://...\"/></td>\\n                            <div class=\"w-e-button-container\">\\n                                <button id=\"' + btnOkId + '\" class=\"right\">\\u63D2\\u5165</button>\\n                                <button id=\"' + btnDelId + '\" class=\"gray right\" style=\"display:' + delBtnDisplay + '\">\\u5220\\u9664\\u94FE\\u63A5</button>\\n                            </div>\\n                        </div>',\n                // 事件绑定\n                events: [\n                // 插入链接\n                {\n                    selector: '#' + btnOkId,\n                    type: 'click',\n                    fn: function fn() {\n                        // 执行插入链接\n                        var $link = $('#' + inputLinkId);\n                        var $text = $('#' + inputTextId);\n                        var link = $link.val();\n                        var text = $text.val();\n                        _this._insertLink(text, link);\n\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                },\n                // 删除链接\n                {\n                    selector: '#' + btnDelId,\n                    type: 'click',\n                    fn: function fn() {\n                        // 执行删除链接\n                        _this._delLink();\n\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                }]\n            } // tab end\n            ] // tabs end\n        });\n\n        // 显示 panel\n        panel.show();\n\n        // 记录属性\n        this.panel = panel;\n    },\n\n    // 删除当前链接\n    _delLink: function _delLink() {\n        if (!this._active) {\n            return;\n        }\n        var editor = this.editor;\n        var $selectionELem = editor.selection.getSelectionContainerElem();\n        if (!$selectionELem) {\n            return;\n        }\n        var selectionText = editor.selection.getSelectionText();\n        editor.cmd.do('insertHTML', '<span>' + selectionText + '</span>');\n    },\n\n    // 插入链接\n    _insertLink: function _insertLink(text, link) {\n        var editor = this.editor;\n        var config = editor.config;\n        var linkCheck = config.linkCheck;\n        var checkResult = true; // 默认为 true\n        if (linkCheck && typeof linkCheck === 'function') {\n            checkResult = linkCheck(text, link);\n        }\n        if (checkResult === true) {\n            editor.cmd.do('insertHTML', '<a href=\"' + link + '\" target=\"_blank\">' + text + '</a>');\n        } else {\n            alert(checkResult);\n        }\n    },\n\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        var $selectionELem = editor.selection.getSelectionContainerElem();\n        if (!$selectionELem) {\n            return;\n        }\n        if ($selectionELem.getNodeName() === 'A') {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    italic-menu\n*/\n// 构造函数\nfunction Italic(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-italic\"></i>\\n        </div>');\n    this.type = 'click';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nItalic.prototype = {\n    constructor: Italic,\n\n    // 点击事件\n    onClick: function onClick(e) {\n        // 点击菜单将触发这里\n\n        var editor = this.editor;\n        var isSeleEmpty = editor.selection.isSelectionEmpty();\n\n        if (isSeleEmpty) {\n            // 选区是空的，插入并选中一个“空白”\n            editor.selection.createEmptyRange();\n        }\n\n        // 执行 italic 命令\n        editor.cmd.do('italic');\n\n        if (isSeleEmpty) {\n            // 需要将选取折叠起来\n            editor.selection.collapseRange();\n            editor.selection.restoreSelection();\n        }\n    },\n\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        if (editor.cmd.queryCommandState('italic')) {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    redo-menu\n*/\n// 构造函数\nfunction Redo(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-redo\"></i>\\n        </div>');\n    this.type = 'click';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nRedo.prototype = {\n    constructor: Redo,\n\n    // 点击事件\n    onClick: function onClick(e) {\n        // 点击菜单将触发这里\n\n        var editor = this.editor;\n\n        // 执行 redo 命令\n        editor.cmd.do('redo');\n    }\n};\n\n/*\n    strikeThrough-menu\n*/\n// 构造函数\nfunction StrikeThrough(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-strikethrough\"></i>\\n        </div>');\n    this.type = 'click';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nStrikeThrough.prototype = {\n    constructor: StrikeThrough,\n\n    // 点击事件\n    onClick: function onClick(e) {\n        // 点击菜单将触发这里\n\n        var editor = this.editor;\n        var isSeleEmpty = editor.selection.isSelectionEmpty();\n\n        if (isSeleEmpty) {\n            // 选区是空的，插入并选中一个“空白”\n            editor.selection.createEmptyRange();\n        }\n\n        // 执行 strikeThrough 命令\n        editor.cmd.do('strikeThrough');\n\n        if (isSeleEmpty) {\n            // 需要将选取折叠起来\n            editor.selection.collapseRange();\n            editor.selection.restoreSelection();\n        }\n    },\n\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        if (editor.cmd.queryCommandState('strikeThrough')) {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    underline-menu\n*/\n// 构造函数\nfunction Underline(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-underline\"></i>\\n        </div>');\n    this.type = 'click';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nUnderline.prototype = {\n    constructor: Underline,\n\n    // 点击事件\n    onClick: function onClick(e) {\n        // 点击菜单将触发这里\n\n        var editor = this.editor;\n        var isSeleEmpty = editor.selection.isSelectionEmpty();\n\n        if (isSeleEmpty) {\n            // 选区是空的，插入并选中一个“空白”\n            editor.selection.createEmptyRange();\n        }\n\n        // 执行 underline 命令\n        editor.cmd.do('underline');\n\n        if (isSeleEmpty) {\n            // 需要将选取折叠起来\n            editor.selection.collapseRange();\n            editor.selection.restoreSelection();\n        }\n    },\n\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        if (editor.cmd.queryCommandState('underline')) {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    undo-menu\n*/\n// 构造函数\nfunction Undo(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-undo\"></i>\\n        </div>');\n    this.type = 'click';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nUndo.prototype = {\n    constructor: Undo,\n\n    // 点击事件\n    onClick: function onClick(e) {\n        // 点击菜单将触发这里\n\n        var editor = this.editor;\n\n        // 执行 undo 命令\n        editor.cmd.do('undo');\n    }\n};\n\n/*\n    menu - list\n*/\n// 构造函数\nfunction List(editor) {\n    var _this = this;\n\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-list2\"></i></div>');\n    this.type = 'droplist';\n\n    // 当前是否 active 状态\n    this._active = false;\n\n    // 初始化 droplist\n    this.droplist = new DropList(this, {\n        width: 120,\n        $title: $('<p>设置列表</p>'),\n        type: 'list', // droplist 以列表形式展示\n        list: [{ $elem: $('<span><i class=\"w-e-icon-list-numbered\"></i> 有序列表</span>'), value: 'insertOrderedList' }, { $elem: $('<span><i class=\"w-e-icon-list2\"></i> 无序列表</span>'), value: 'insertUnorderedList' }],\n        onClick: function onClick(value) {\n            // 注意 this 是指向当前的 List 对象\n            _this._command(value);\n        }\n    });\n}\n\n// 原型\nList.prototype = {\n    constructor: List,\n\n    // 执行命令\n    _command: function _command(value) {\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n        editor.selection.restoreSelection();\n        if (editor.cmd.queryCommandState(value)) {\n            return;\n        }\n        editor.cmd.do(value);\n\n        // 验证列表是否被包裹在 <p> 之内\n        var $selectionElem = editor.selection.getSelectionContainerElem();\n        if ($selectionElem.getNodeName() === 'LI') {\n            $selectionElem = $selectionElem.parent();\n        }\n        if (/^ol|ul$/i.test($selectionElem.getNodeName()) === false) {\n            return;\n        }\n        if ($selectionElem.equal($textElem)) {\n            // 证明是顶级标签，没有被 <p> 包裹\n            return;\n        }\n        var $parent = $selectionElem.parent();\n        if ($parent.equal($textElem)) {\n            // $parent 是顶级标签，不能删除\n            return;\n        }\n\n        $selectionElem.insertAfter($parent);\n        $parent.remove();\n    },\n\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        if (editor.cmd.queryCommandState('insertUnOrderedList') || editor.cmd.queryCommandState('insertOrderedList')) {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    menu - justify\n*/\n// 构造函数\nfunction Justify(editor) {\n    var _this = this;\n\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-paragraph-left\"></i></div>');\n    this.type = 'droplist';\n\n    // 当前是否 active 状态\n    this._active = false;\n\n    // 初始化 droplist\n    this.droplist = new DropList(this, {\n        width: 100,\n        $title: $('<p>对齐方式</p>'),\n        type: 'list', // droplist 以列表形式展示\n        list: [{ $elem: $('<span><i class=\"w-e-icon-paragraph-left\"></i> 靠左</span>'), value: 'justifyLeft' }, { $elem: $('<span><i class=\"w-e-icon-paragraph-center\"></i> 居中</span>'), value: 'justifyCenter' }, { $elem: $('<span><i class=\"w-e-icon-paragraph-right\"></i> 靠右</span>'), value: 'justifyRight' }],\n        onClick: function onClick(value) {\n            // 注意 this 是指向当前的 List 对象\n            _this._command(value);\n        }\n    });\n}\n\n// 原型\nJustify.prototype = {\n    constructor: Justify,\n\n    // 执行命令\n    _command: function _command(value) {\n        var editor = this.editor;\n        editor.cmd.do(value);\n    }\n};\n\n/*\n    menu - Forecolor\n*/\n// 构造函数\nfunction ForeColor(editor) {\n    var _this = this;\n\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-pencil2\"></i></div>');\n    this.type = 'droplist';\n\n    // 获取配置的颜色\n    var config = editor.config;\n    var colors = config.colors || [];\n\n    // 当前是否 active 状态\n    this._active = false;\n\n    // 初始化 droplist\n    this.droplist = new DropList(this, {\n        width: 120,\n        $title: $('<p>文字颜色</p>'),\n        type: 'inline-block', // droplist 内容以 block 形式展示\n        list: colors.map(function (color) {\n            return { $elem: $('<i style=\"color:' + color + ';\" class=\"w-e-icon-pencil2\"></i>'), value: color };\n        }),\n        onClick: function onClick(value) {\n            // 注意 this 是指向当前的 ForeColor 对象\n            _this._command(value);\n        }\n    });\n}\n\n// 原型\nForeColor.prototype = {\n    constructor: ForeColor,\n\n    // 执行命令\n    _command: function _command(value) {\n        var editor = this.editor;\n        editor.cmd.do('foreColor', value);\n    }\n};\n\n/*\n    menu - BackColor\n*/\n// 构造函数\nfunction BackColor(editor) {\n    var _this = this;\n\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-paint-brush\"></i></div>');\n    this.type = 'droplist';\n\n    // 获取配置的颜色\n    var config = editor.config;\n    var colors = config.colors || [];\n\n    // 当前是否 active 状态\n    this._active = false;\n\n    // 初始化 droplist\n    this.droplist = new DropList(this, {\n        width: 120,\n        $title: $('<p>背景色</p>'),\n        type: 'inline-block', // droplist 内容以 block 形式展示\n        list: colors.map(function (color) {\n            return { $elem: $('<i style=\"color:' + color + ';\" class=\"w-e-icon-paint-brush\"></i>'), value: color };\n        }),\n        onClick: function onClick(value) {\n            // 注意 this 是指向当前的 BackColor 对象\n            _this._command(value);\n        }\n    });\n}\n\n// 原型\nBackColor.prototype = {\n    constructor: BackColor,\n\n    // 执行命令\n    _command: function _command(value) {\n        var editor = this.editor;\n        editor.cmd.do('backColor', value);\n    }\n};\n\n/*\n    menu - quote\n*/\n// 构造函数\nfunction Quote(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-quotes-left\"></i>\\n        </div>');\n    this.type = 'click';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nQuote.prototype = {\n    constructor: Quote,\n\n    onClick: function onClick(e) {\n        var editor = this.editor;\n        var $selectionElem = editor.selection.getSelectionContainerElem();\n        var nodeName = $selectionElem.getNodeName();\n\n        if (!UA.isIE()) {\n            if (nodeName === 'BLOCKQUOTE') {\n                // 撤销 quote\n                editor.cmd.do('formatBlock', '<P>');\n            } else {\n                // 转换为 quote\n                editor.cmd.do('formatBlock', '<BLOCKQUOTE>');\n            }\n            return;\n        }\n\n        // IE 中不支持 formatBlock <BLOCKQUOTE> ，要用其他方式兼容\n        var content = void 0,\n            $targetELem = void 0;\n        if (nodeName === 'P') {\n            // 将 P 转换为 quote\n            content = $selectionElem.text();\n            $targetELem = $('<blockquote>' + content + '</blockquote>');\n            $targetELem.insertAfter($selectionElem);\n            $selectionElem.remove();\n            return;\n        }\n        if (nodeName === 'BLOCKQUOTE') {\n            // 撤销 quote\n            content = $selectionElem.text();\n            $targetELem = $('<p>' + content + '</p>');\n            $targetELem.insertAfter($selectionElem);\n            $selectionElem.remove();\n        }\n    },\n\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        var reg = /^BLOCKQUOTE$/i;\n        var cmdValue = editor.cmd.queryCommandValue('formatBlock');\n        if (reg.test(cmdValue)) {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    menu - code\n*/\n// 构造函数\nfunction Code(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-terminal\"></i>\\n        </div>');\n    this.type = 'panel';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nCode.prototype = {\n    constructor: Code,\n\n    onClick: function onClick(e) {\n        var editor = this.editor;\n        var $startElem = editor.selection.getSelectionStartElem();\n        var $endElem = editor.selection.getSelectionEndElem();\n        var isSeleEmpty = editor.selection.isSelectionEmpty();\n        var selectionText = editor.selection.getSelectionText();\n        var $code = void 0;\n\n        if (!$startElem.equal($endElem)) {\n            // 跨元素选择，不做处理\n            editor.selection.restoreSelection();\n            return;\n        }\n        if (!isSeleEmpty) {\n            // 选取不是空，用 <code> 包裹即可\n            $code = $('<code>' + selectionText + '</code>');\n            editor.cmd.do('insertElem', $code);\n            editor.selection.createRangeByElem($code, false);\n            editor.selection.restoreSelection();\n            return;\n        }\n\n        // 选取是空，且没有夸元素选择，则插入 <pre><code></code></prev>\n        if (this._active) {\n            // 选中状态，将编辑内容\n            this._createPanel($startElem.html());\n        } else {\n            // 未选中状态，将创建内容\n            this._createPanel();\n        }\n    },\n\n    _createPanel: function _createPanel(value) {\n        var _this = this;\n\n        // value - 要编辑的内容\n        value = value || '';\n        var type = !value ? 'new' : 'edit';\n        var textId = getRandom('texxt');\n        var btnId = getRandom('btn');\n\n        var panel = new Panel(this, {\n            width: 500,\n            // 一个 Panel 包含多个 tab\n            tabs: [{\n                // 标题\n                title: '插入代码',\n                // 模板\n                tpl: '<div>\\n                        <textarea id=\"' + textId + '\" style=\"height:145px;;\">' + value + '</textarea>\\n                        <div class=\"w-e-button-container\">\\n                            <button id=\"' + btnId + '\" class=\"right\">\\u63D2\\u5165</button>\\n                        </div>\\n                    <div>',\n                // 事件绑定\n                events: [\n                // 插入代码\n                {\n                    selector: '#' + btnId,\n                    type: 'click',\n                    fn: function fn() {\n                        var $text = $('#' + textId);\n                        var text = $text.val() || $text.html();\n                        text = replaceHtmlSymbol(text);\n                        if (type === 'new') {\n                            // 新插入\n                            _this._insertCode(text);\n                        } else {\n                            // 编辑更新\n                            _this._updateCode(text);\n                        }\n\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                }]\n            } // first tab end\n            ] // tabs end\n        }); // new Panel end\n\n        // 显示 panel\n        panel.show();\n\n        // 记录属性\n        this.panel = panel;\n    },\n\n    // 插入代码\n    _insertCode: function _insertCode(value) {\n        var editor = this.editor;\n        editor.cmd.do('insertHTML', '<pre><code>' + value + '</code></pre><p><br></p>');\n    },\n\n    // 更新代码\n    _updateCode: function _updateCode(value) {\n        var editor = this.editor;\n        var $selectionELem = editor.selection.getSelectionContainerElem();\n        if (!$selectionELem) {\n            return;\n        }\n        $selectionELem.html(value);\n        editor.selection.restoreSelection();\n    },\n\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        var $selectionELem = editor.selection.getSelectionContainerElem();\n        if (!$selectionELem) {\n            return;\n        }\n        var $parentElem = $selectionELem.parent();\n        if ($selectionELem.getNodeName() === 'CODE' && $parentElem.getNodeName() === 'PRE') {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    menu - emoticon\n*/\n// 构造函数\nfunction Emoticon(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-happy\"></i>\\n        </div>');\n    this.type = 'panel';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nEmoticon.prototype = {\n    constructor: Emoticon,\n\n    onClick: function onClick() {\n        this._createPanel();\n    },\n\n    _createPanel: function _createPanel() {\n        var _this = this;\n\n        var editor = this.editor;\n        var config = editor.config;\n        // 获取表情配置\n        var emotions = config.emotions || [];\n\n        // 创建表情 dropPanel 的配置\n        var tabConfig = [];\n        emotions.forEach(function (emotData) {\n            var emotType = emotData.type;\n            var content = emotData.content || [];\n\n            // 这一组表情最终拼接出来的 html\n            var faceHtml = '';\n\n            // emoji 表情\n            if (emotType === 'emoji') {\n                content.forEach(function (item) {\n                    if (item) {\n                        faceHtml += '<span class=\"w-e-item\">' + item + '</span>';\n                    }\n                });\n            }\n            // 图片表情\n            if (emotType === 'image') {\n                content.forEach(function (item) {\n                    var src = item.src;\n                    var alt = item.alt;\n                    if (src) {\n                        // 加一个 data-w-e 属性，点击图片的时候不再提示编辑图片\n                        faceHtml += '<span class=\"w-e-item\"><img src=\"' + src + '\" alt=\"' + alt + '\" data-w-e=\"1\"/></span>';\n                    }\n                });\n            }\n\n            tabConfig.push({\n                title: emotData.title,\n                tpl: '<div class=\"w-e-emoticon-container\">' + faceHtml + '</div>',\n                events: [{\n                    selector: 'span.w-e-item',\n                    type: 'click',\n                    fn: function fn(e) {\n                        var target = e.target;\n                        var $target = $(target);\n                        var nodeName = $target.getNodeName();\n\n                        var insertHtml = void 0;\n                        if (nodeName === 'IMG') {\n                            // 插入图片\n                            insertHtml = $target.parent().html();\n                        } else {\n                            // 插入 emoji\n                            insertHtml = '<span>' + $target.html() + '</span>';\n                        }\n\n                        _this._insert(insertHtml);\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                }]\n            });\n        });\n\n        var panel = new Panel(this, {\n            width: 300,\n            height: 200,\n            // 一个 Panel 包含多个 tab\n            tabs: tabConfig\n        });\n\n        // 显示 panel\n        panel.show();\n\n        // 记录属性\n        this.panel = panel;\n    },\n\n    // 插入表情\n    _insert: function _insert(emotHtml) {\n        var editor = this.editor;\n        editor.cmd.do('insertHTML', emotHtml);\n    }\n};\n\n/*\n    menu - table\n*/\n// 构造函数\nfunction Table(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-table2\"></i></div>');\n    this.type = 'panel';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nTable.prototype = {\n    constructor: Table,\n\n    onClick: function onClick() {\n        if (this._active) {\n            // 编辑现有表格\n            this._createEditPanel();\n        } else {\n            // 插入新表格\n            this._createInsertPanel();\n        }\n    },\n\n    // 创建插入新表格的 panel\n    _createInsertPanel: function _createInsertPanel() {\n        var _this = this;\n\n        // 用到的 id\n        var btnInsertId = getRandom('btn');\n        var textRowNum = getRandom('row');\n        var textColNum = getRandom('col');\n\n        var panel = new Panel(this, {\n            width: 250,\n            // panel 包含多个 tab\n            tabs: [{\n                // 标题\n                title: '插入表格',\n                // 模板\n                tpl: '<div>\\n                        <p style=\"text-align:left; padding:5px 0;\">\\n                            \\u521B\\u5EFA\\n                            <input id=\"' + textRowNum + '\" type=\"text\" value=\"5\" style=\"width:40px;text-align:center;\"/>\\n                            \\u884C\\n                            <input id=\"' + textColNum + '\" type=\"text\" value=\"5\" style=\"width:40px;text-align:center;\"/>\\n                            \\u5217\\u7684\\u8868\\u683C\\n                        </p>\\n                        <div class=\"w-e-button-container\">\\n                            <button id=\"' + btnInsertId + '\" class=\"right\">\\u63D2\\u5165</button>\\n                        </div>\\n                    </div>',\n                // 事件绑定\n                events: [{\n                    // 点击按钮，插入表格\n                    selector: '#' + btnInsertId,\n                    type: 'click',\n                    fn: function fn() {\n                        var rowNum = parseInt($('#' + textRowNum).val());\n                        var colNum = parseInt($('#' + textColNum).val());\n\n                        if (rowNum && colNum && rowNum > 0 && colNum > 0) {\n                            // form 数据有效\n                            _this._insert(rowNum, colNum);\n                        }\n\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                }]\n            } // first tab end\n            ] // tabs end\n        }); // panel end\n\n        // 展示 panel\n        panel.show();\n\n        // 记录属性\n        this.panel = panel;\n    },\n\n    // 插入表格\n    _insert: function _insert(rowNum, colNum) {\n        // 拼接 table 模板\n        var r = void 0,\n            c = void 0;\n        var html = '<table border=\"0\" width=\"100%\" cellpadding=\"0\" cellspacing=\"0\">';\n        for (r = 0; r < rowNum; r++) {\n            html += '<tr>';\n            if (r === 0) {\n                for (c = 0; c < colNum; c++) {\n                    html += '<th>&nbsp;</th>';\n                }\n            } else {\n                for (c = 0; c < colNum; c++) {\n                    html += '<td>&nbsp;</td>';\n                }\n            }\n            html += '</tr>';\n        }\n        html += '</table><p><br></p>';\n\n        // 执行命令\n        var editor = this.editor;\n        editor.cmd.do('insertHTML', html);\n\n        // 防止 firefox 下出现 resize 的控制点\n        editor.cmd.do('enableObjectResizing', false);\n        editor.cmd.do('enableInlineTableEditing', false);\n    },\n\n    // 创建编辑表格的 panel\n    _createEditPanel: function _createEditPanel() {\n        var _this2 = this;\n\n        // 可用的 id\n        var addRowBtnId = getRandom('add-row');\n        var addColBtnId = getRandom('add-col');\n        var delRowBtnId = getRandom('del-row');\n        var delColBtnId = getRandom('del-col');\n        var delTableBtnId = getRandom('del-table');\n\n        // 创建 panel 对象\n        var panel = new Panel(this, {\n            width: 320,\n            // panel 包含多个 tab\n            tabs: [{\n                // 标题\n                title: '编辑表格',\n                // 模板\n                tpl: '<div>\\n                        <div class=\"w-e-button-container\" style=\"border-bottom:1px solid #f1f1f1;padding-bottom:5px;margin-bottom:5px;\">\\n                            <button id=\"' + addRowBtnId + '\" class=\"left\">\\u589E\\u52A0\\u884C</button>\\n                            <button id=\"' + delRowBtnId + '\" class=\"red left\">\\u5220\\u9664\\u884C</button>\\n                            <button id=\"' + addColBtnId + '\" class=\"left\">\\u589E\\u52A0\\u5217</button>\\n                            <button id=\"' + delColBtnId + '\" class=\"red left\">\\u5220\\u9664\\u5217</button>\\n                        </div>\\n                        <div class=\"w-e-button-container\">\\n                            <button id=\"' + delTableBtnId + '\" class=\"gray left\">\\u5220\\u9664\\u8868\\u683C</button>\\n                        </dv>\\n                    </div>',\n                // 事件绑定\n                events: [{\n                    // 增加行\n                    selector: '#' + addRowBtnId,\n                    type: 'click',\n                    fn: function fn() {\n                        _this2._addRow();\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                }, {\n                    // 增加列\n                    selector: '#' + addColBtnId,\n                    type: 'click',\n                    fn: function fn() {\n                        _this2._addCol();\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                }, {\n                    // 删除行\n                    selector: '#' + delRowBtnId,\n                    type: 'click',\n                    fn: function fn() {\n                        _this2._delRow();\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                }, {\n                    // 删除列\n                    selector: '#' + delColBtnId,\n                    type: 'click',\n                    fn: function fn() {\n                        _this2._delCol();\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                }, {\n                    // 删除表格\n                    selector: '#' + delTableBtnId,\n                    type: 'click',\n                    fn: function fn() {\n                        _this2._delTable();\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                }]\n            }]\n        });\n        // 显示 panel\n        panel.show();\n    },\n\n    // 获取选中的单元格的位置信息\n    _getLocationData: function _getLocationData() {\n        var result = {};\n        var editor = this.editor;\n        var $selectionELem = editor.selection.getSelectionContainerElem();\n        if (!$selectionELem) {\n            return;\n        }\n        var nodeName = $selectionELem.getNodeName();\n        if (nodeName !== 'TD' && nodeName !== 'TH') {\n            return;\n        }\n\n        // 获取 td index\n        var $tr = $selectionELem.parent();\n        var $tds = $tr.children();\n        var tdLength = $tds.length;\n        $tds.forEach(function (td, index) {\n            if (td === $selectionELem[0]) {\n                // 记录并跳出循环\n                result.td = {\n                    index: index,\n                    elem: td,\n                    length: tdLength\n                };\n                return false;\n            }\n        });\n\n        // 获取 tr index\n        var $tbody = $tr.parent();\n        var $trs = $tbody.children();\n        var trLength = $trs.length;\n        $trs.forEach(function (tr, index) {\n            if (tr === $tr[0]) {\n                // 记录并跳出循环\n                result.tr = {\n                    index: index,\n                    elem: tr,\n                    length: trLength\n                };\n                return false;\n            }\n        });\n\n        // 返回结果\n        return result;\n    },\n\n    // 增加行\n    _addRow: function _addRow() {\n        // 获取当前单元格的位置信息\n        var locationData = this._getLocationData();\n        if (!locationData) {\n            return;\n        }\n        var trData = locationData.tr;\n        var $currentTr = $(trData.elem);\n        var tdData = locationData.td;\n        var tdLength = tdData.length;\n\n        // 拼接即将插入的字符串\n        var newTr = document.createElement('tr');\n        var tpl = '',\n            i = void 0;\n        for (i = 0; i < tdLength; i++) {\n            tpl += '<td>&nbsp;</td>';\n        }\n        newTr.innerHTML = tpl;\n        // 插入\n        $(newTr).insertAfter($currentTr);\n    },\n\n    // 增加列\n    _addCol: function _addCol() {\n        // 获取当前单元格的位置信息\n        var locationData = this._getLocationData();\n        if (!locationData) {\n            return;\n        }\n        var trData = locationData.tr;\n        var tdData = locationData.td;\n        var tdIndex = tdData.index;\n        var $currentTr = $(trData.elem);\n        var $trParent = $currentTr.parent();\n        var $trs = $trParent.children();\n\n        // 遍历所有行\n        $trs.forEach(function (tr) {\n            var $tr = $(tr);\n            var $tds = $tr.children();\n            var $currentTd = $tds.get(tdIndex);\n            var name = $currentTd.getNodeName().toLowerCase();\n\n            // new 一个 td，并插入\n            var newTd = document.createElement(name);\n            $(newTd).insertAfter($currentTd);\n        });\n    },\n\n    // 删除行\n    _delRow: function _delRow() {\n        // 获取当前单元格的位置信息\n        var locationData = this._getLocationData();\n        if (!locationData) {\n            return;\n        }\n        var trData = locationData.tr;\n        var $currentTr = $(trData.elem);\n        $currentTr.remove();\n    },\n\n    // 删除列\n    _delCol: function _delCol() {\n        // 获取当前单元格的位置信息\n        var locationData = this._getLocationData();\n        if (!locationData) {\n            return;\n        }\n        var trData = locationData.tr;\n        var tdData = locationData.td;\n        var tdIndex = tdData.index;\n        var $currentTr = $(trData.elem);\n        var $trParent = $currentTr.parent();\n        var $trs = $trParent.children();\n\n        // 遍历所有行\n        $trs.forEach(function (tr) {\n            var $tr = $(tr);\n            var $tds = $tr.children();\n            var $currentTd = $tds.get(tdIndex);\n            // 删除\n            $currentTd.remove();\n        });\n    },\n\n    // 删除表格\n    _delTable: function _delTable() {\n        var editor = this.editor;\n        var $selectionELem = editor.selection.getSelectionContainerElem();\n        if (!$selectionELem) {\n            return;\n        }\n        var $table = $selectionELem.parentUntil('table');\n        if (!$table) {\n            return;\n        }\n        $table.remove();\n    },\n\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        var $selectionELem = editor.selection.getSelectionContainerElem();\n        if (!$selectionELem) {\n            return;\n        }\n        var nodeName = $selectionELem.getNodeName();\n        if (nodeName === 'TD' || nodeName === 'TH') {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    menu - video\n*/\n// 构造函数\nfunction Video(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-play\"></i></div>');\n    this.type = 'panel';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nVideo.prototype = {\n    constructor: Video,\n\n    onClick: function onClick() {\n        this._createPanel();\n    },\n\n    _createPanel: function _createPanel() {\n        var _this = this;\n\n        // 创建 id\n        var textValId = getRandom('text-val');\n        var btnId = getRandom('btn');\n\n        // 创建 panel\n        var panel = new Panel(this, {\n            width: 350,\n            // 一个 panel 多个 tab\n            tabs: [{\n                // 标题\n                title: '插入视频',\n                // 模板\n                tpl: '<div>\\n                        <input id=\"' + textValId + '\" type=\"text\" class=\"block\" placeholder=\"\\u683C\\u5F0F\\u5982\\uFF1A<iframe src=... ></iframe>\"/>\\n                        <div class=\"w-e-button-container\">\\n                            <button id=\"' + btnId + '\" class=\"right\">\\u63D2\\u5165</button>\\n                        </div>\\n                    </div>',\n                // 事件绑定\n                events: [{\n                    selector: '#' + btnId,\n                    type: 'click',\n                    fn: function fn() {\n                        var $text = $('#' + textValId);\n                        var val = $text.val().trim();\n\n                        // 测试用视频地址\n                        // <iframe height=498 width=510 src='http://player.youku.com/embed/XMjcwMzc3MzM3Mg==' frameborder=0 'allowfullscreen'></iframe>\n\n                        if (val) {\n                            // 插入视频\n                            _this._insert(val);\n                        }\n\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                }]\n            } // first tab end\n            ] // tabs end\n        }); // panel end\n\n        // 显示 panel\n        panel.show();\n\n        // 记录属性\n        this.panel = panel;\n    },\n\n    // 插入视频\n    _insert: function _insert(val) {\n        var editor = this.editor;\n        editor.cmd.do('insertHTML', val + '<p><br></p>');\n    }\n};\n\n/*\n    menu - img\n*/\n// 构造函数\nfunction Image(editor) {\n    this.editor = editor;\n    var imgMenuId = getRandom('w-e-img');\n    this.$elem = $('<div class=\"w-e-menu\" id=\"' + imgMenuId + '\"><i class=\"w-e-icon-image\"></i></div>');\n    editor.imgMenuId = imgMenuId;\n    this.type = 'panel';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nImage.prototype = {\n    constructor: Image,\n\n    onClick: function onClick() {\n        var editor = this.editor;\n        var config = editor.config;\n        if (config.qiniu) {\n            return;\n        }\n        if (this._active) {\n            this._createEditPanel();\n        } else {\n            this._createInsertPanel();\n        }\n    },\n\n    _createEditPanel: function _createEditPanel() {\n        var editor = this.editor;\n\n        // id\n        var width30 = getRandom('width-30');\n        var width50 = getRandom('width-50');\n        var width100 = getRandom('width-100');\n        var delBtn = getRandom('del-btn');\n\n        // tab 配置\n        var tabsConfig = [{\n            title: '编辑图片',\n            tpl: '<div>\\n                    <div class=\"w-e-button-container\" style=\"border-bottom:1px solid #f1f1f1;padding-bottom:5px;margin-bottom:5px;\">\\n                        <span style=\"float:left;font-size:14px;margin:4px 5px 0 5px;color:#333;\">\\u6700\\u5927\\u5BBD\\u5EA6\\uFF1A</span>\\n                        <button id=\"' + width30 + '\" class=\"left\">30%</button>\\n                        <button id=\"' + width50 + '\" class=\"left\">50%</button>\\n                        <button id=\"' + width100 + '\" class=\"left\">100%</button>\\n                    </div>\\n                    <div class=\"w-e-button-container\">\\n                        <button id=\"' + delBtn + '\" class=\"gray left\">\\u5220\\u9664\\u56FE\\u7247</button>\\n                    </dv>\\n                </div>',\n            events: [{\n                selector: '#' + width30,\n                type: 'click',\n                fn: function fn() {\n                    var $img = editor._selectedImg;\n                    if ($img) {\n                        $img.css('max-width', '30%');\n                    }\n                    // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                    return true;\n                }\n            }, {\n                selector: '#' + width50,\n                type: 'click',\n                fn: function fn() {\n                    var $img = editor._selectedImg;\n                    if ($img) {\n                        $img.css('max-width', '50%');\n                    }\n                    // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                    return true;\n                }\n            }, {\n                selector: '#' + width100,\n                type: 'click',\n                fn: function fn() {\n                    var $img = editor._selectedImg;\n                    if ($img) {\n                        $img.css('max-width', '100%');\n                    }\n                    // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                    return true;\n                }\n            }, {\n                selector: '#' + delBtn,\n                type: 'click',\n                fn: function fn() {\n                    var $img = editor._selectedImg;\n                    if ($img) {\n                        $img.remove();\n                    }\n                    // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                    return true;\n                }\n            }]\n        }];\n\n        // 创建 panel 并显示\n        var panel = new Panel(this, {\n            width: 300,\n            tabs: tabsConfig\n        });\n        panel.show();\n\n        // 记录属性\n        this.panel = panel;\n    },\n\n    _createInsertPanel: function _createInsertPanel() {\n        var editor = this.editor;\n        var uploadImg = editor.uploadImg;\n        var config = editor.config;\n\n        // id\n        var upTriggerId = getRandom('up-trigger');\n        var upFileId = getRandom('up-file');\n        var linkUrlId = getRandom('link-url');\n        var linkBtnId = getRandom('link-btn');\n\n        // tabs 的配置\n        var tabsConfig = [{\n            title: '上传图片',\n            tpl: '<div class=\"w-e-up-img-container\">\\n                    <div id=\"' + upTriggerId + '\" class=\"w-e-up-btn\">\\n                        <i class=\"w-e-icon-upload2\"></i>\\n                    </div>\\n                    <div style=\"display:none;\">\\n                        <input id=\"' + upFileId + '\" type=\"file\" multiple=\"multiple\" accept=\"image/jpg,image/jpeg,image/png,image/gif,image/bmp\"/>\\n                    </div>\\n                </div>',\n            events: [{\n                // 触发选择图片\n                selector: '#' + upTriggerId,\n                type: 'click',\n                fn: function fn() {\n                    var $file = $('#' + upFileId);\n                    var fileElem = $file[0];\n                    if (fileElem) {\n                        fileElem.click();\n                    } else {\n                        // 返回 true 可关闭 panel\n                        return true;\n                    }\n                }\n            }, {\n                // 选择图片完毕\n                selector: '#' + upFileId,\n                type: 'change',\n                fn: function fn() {\n                    var $file = $('#' + upFileId);\n                    var fileElem = $file[0];\n                    if (!fileElem) {\n                        // 返回 true 可关闭 panel\n                        return true;\n                    }\n\n                    // 获取选中的 file 对象列表\n                    var fileList = fileElem.files;\n                    if (fileList.length) {\n                        uploadImg.uploadImg(fileList);\n                    }\n\n                    // 返回 true 可关闭 panel\n                    return true;\n                }\n            }]\n        }, // first tab end\n        {\n            title: '网络图片',\n            tpl: '<div>\\n                    <input id=\"' + linkUrlId + '\" type=\"text\" class=\"block\" placeholder=\"\\u56FE\\u7247\\u94FE\\u63A5\"/></td>\\n                    <div class=\"w-e-button-container\">\\n                        <button id=\"' + linkBtnId + '\" class=\"right\">\\u63D2\\u5165</button>\\n                    </div>\\n                </div>',\n            events: [{\n                selector: '#' + linkBtnId,\n                type: 'click',\n                fn: function fn() {\n                    var $linkUrl = $('#' + linkUrlId);\n                    var url = $linkUrl.val().trim();\n\n                    if (url) {\n                        uploadImg.insertLinkImg(url);\n                    }\n\n                    // 返回 true 表示函数执行结束之后关闭 panel\n                    return true;\n                }\n            }]\n        } // second tab end\n        ]; // tabs end\n\n        // 判断 tabs 的显示\n        var tabsConfigResult = [];\n        if ((config.uploadImgShowBase64 || config.uploadImgServer || config.customUploadImg) && window.FileReader) {\n            // 显示“上传图片”\n            tabsConfigResult.push(tabsConfig[0]);\n        }\n        if (config.showLinkImg) {\n            // 显示“网络图片”\n            tabsConfigResult.push(tabsConfig[1]);\n        }\n\n        // 创建 panel 并显示\n        var panel = new Panel(this, {\n            width: 300,\n            tabs: tabsConfigResult\n        });\n        panel.show();\n\n        // 记录属性\n        this.panel = panel;\n    },\n\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        if (editor._selectedImg) {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    所有菜单的汇总\n*/\n\n// 存储菜单的构造函数\nvar MenuConstructors = {};\n\nMenuConstructors.bold = Bold;\n\nMenuConstructors.head = Head;\n\nMenuConstructors.fontSize = FontSize;\n\nMenuConstructors.fontName = FontName;\n\nMenuConstructors.link = Link;\n\nMenuConstructors.italic = Italic;\n\nMenuConstructors.redo = Redo;\n\nMenuConstructors.strikeThrough = StrikeThrough;\n\nMenuConstructors.underline = Underline;\n\nMenuConstructors.undo = Undo;\n\nMenuConstructors.list = List;\n\nMenuConstructors.justify = Justify;\n\nMenuConstructors.foreColor = ForeColor;\n\nMenuConstructors.backColor = BackColor;\n\nMenuConstructors.quote = Quote;\n\nMenuConstructors.code = Code;\n\nMenuConstructors.emoticon = Emoticon;\n\nMenuConstructors.table = Table;\n\nMenuConstructors.video = Video;\n\nMenuConstructors.image = Image;\n\n/*\n    菜单集合\n*/\n// 构造函数\nfunction Menus(editor) {\n    this.editor = editor;\n    this.menus = {};\n}\n\n// 修改原型\nMenus.prototype = {\n    constructor: Menus,\n\n    // 初始化菜单\n    init: function init() {\n        var _this = this;\n\n        var editor = this.editor;\n        var config = editor.config || {};\n        var configMenus = config.menus || []; // 获取配置中的菜单\n\n        // 根据配置信息，创建菜单\n        configMenus.forEach(function (menuKey) {\n            var MenuConstructor = MenuConstructors[menuKey];\n            if (MenuConstructor && typeof MenuConstructor === 'function') {\n                // 创建单个菜单\n                _this.menus[menuKey] = new MenuConstructor(editor);\n            }\n        });\n\n        // 添加到菜单栏\n        this._addToToolbar();\n\n        // 绑定事件\n        this._bindEvent();\n    },\n\n    // 添加到菜单栏\n    _addToToolbar: function _addToToolbar() {\n        var editor = this.editor;\n        var $toolbarElem = editor.$toolbarElem;\n        var menus = this.menus;\n        var config = editor.config;\n        // config.zIndex 是配置的编辑区域的 z-index，菜单的 z-index 得在其基础上 +1\n        var zIndex = config.zIndex + 1;\n        objForEach(menus, function (key, menu) {\n            var $elem = menu.$elem;\n            if ($elem) {\n                // 设置 z-index\n                $elem.css('z-index', zIndex);\n                $toolbarElem.append($elem);\n            }\n        });\n    },\n\n    // 绑定菜单 click mouseenter 事件\n    _bindEvent: function _bindEvent() {\n        var menus = this.menus;\n        var editor = this.editor;\n        objForEach(menus, function (key, menu) {\n            var type = menu.type;\n            if (!type) {\n                return;\n            }\n            var $elem = menu.$elem;\n            var droplist = menu.droplist;\n            var panel = menu.panel;\n\n            // 点击类型，例如 bold\n            if (type === 'click' && menu.onClick) {\n                $elem.on('click', function (e) {\n                    if (editor.selection.getRange() == null) {\n                        return;\n                    }\n                    menu.onClick(e);\n                });\n            }\n\n            // 下拉框，例如 head\n            if (type === 'droplist' && droplist) {\n                $elem.on('mouseenter', function (e) {\n                    if (editor.selection.getRange() == null) {\n                        return;\n                    }\n                    // 显示\n                    droplist.showTimeoutId = setTimeout(function () {\n                        droplist.show();\n                    }, 200);\n                }).on('mouseleave', function (e) {\n                    // 隐藏\n                    droplist.hideTimeoutId = setTimeout(function () {\n                        droplist.hide();\n                    }, 0);\n                });\n            }\n\n            // 弹框类型，例如 link\n            if (type === 'panel' && menu.onClick) {\n                $elem.on('click', function (e) {\n                    e.stopPropagation();\n                    if (editor.selection.getRange() == null) {\n                        return;\n                    }\n                    // 在自定义事件中显示 panel\n                    menu.onClick(e);\n                });\n            }\n        });\n    },\n\n    // 尝试修改菜单状态\n    changeActive: function changeActive() {\n        var menus = this.menus;\n        objForEach(menus, function (key, menu) {\n            if (menu.tryChangeActive) {\n                setTimeout(function () {\n                    menu.tryChangeActive();\n                }, 100);\n            }\n        });\n    }\n};\n\n/*\n    粘贴信息的处理\n*/\n\n// 获取粘贴的纯文本\nfunction getPasteText(e) {\n    var clipboardData = e.clipboardData || e.originalEvent && e.originalEvent.clipboardData;\n    var pasteText = void 0;\n    if (clipboardData == null) {\n        pasteText = window.clipboardData && window.clipboardData.getData('text');\n    } else {\n        pasteText = clipboardData.getData('text/plain');\n    }\n\n    return replaceHtmlSymbol(pasteText);\n}\n\n// 获取粘贴的html\nfunction getPasteHtml(e, filterStyle, ignoreImg) {\n    var clipboardData = e.clipboardData || e.originalEvent && e.originalEvent.clipboardData;\n    var pasteText = void 0,\n        pasteHtml = void 0;\n    if (clipboardData == null) {\n        pasteText = window.clipboardData && window.clipboardData.getData('text');\n    } else {\n        pasteText = clipboardData.getData('text/plain');\n        pasteHtml = clipboardData.getData('text/html');\n    }\n    if (!pasteHtml && pasteText) {\n        pasteHtml = '<p>' + replaceHtmlSymbol(pasteText) + '</p>';\n    }\n    if (!pasteHtml) {\n        return;\n    }\n\n    // 过滤word中状态过来的无用字符\n    var docSplitHtml = pasteHtml.split('</html>');\n    if (docSplitHtml.length === 2) {\n        pasteHtml = docSplitHtml[0];\n    }\n\n    // 过滤无用标签\n    pasteHtml = pasteHtml.replace(/<(meta|script|link).+?>/igm, '');\n    // 去掉注释\n    pasteHtml = pasteHtml.replace(/<!--.*?-->/mg, '');\n    // 过滤 data-xxx 属性\n    pasteHtml = pasteHtml.replace(/\\s?data-.+?=('|\").+?('|\")/igm, '');\n\n    if (ignoreImg) {\n        // 忽略图片\n        pasteHtml = pasteHtml.replace(/<img.+?>/igm, '');\n    }\n\n    if (filterStyle) {\n        // 过滤样式\n        pasteHtml = pasteHtml.replace(/\\s?(class|style)=('|\").*?('|\")/igm, '');\n    } else {\n        // 保留样式\n        pasteHtml = pasteHtml.replace(/\\s?class=('|\").*?('|\")/igm, '');\n    }\n\n    return pasteHtml;\n}\n\n// 获取粘贴的图片文件\nfunction getPasteImgs(e) {\n    var result = [];\n    var txt = getPasteText(e);\n    if (txt) {\n        // 有文字，就忽略图片\n        return result;\n    }\n\n    var clipboardData = e.clipboardData || e.originalEvent && e.originalEvent.clipboardData || {};\n    var items = clipboardData.items;\n    if (!items) {\n        return result;\n    }\n\n    objForEach(items, function (key, value) {\n        var type = value.type;\n        if (/image/i.test(type)) {\n            result.push(value.getAsFile());\n        }\n    });\n\n    return result;\n}\n\n/*\n    编辑区域\n*/\n\n// 获取一个 elem.childNodes 的 JSON 数据\nfunction getChildrenJSON($elem) {\n    var result = [];\n    var $children = $elem.childNodes() || []; // 注意 childNodes() 可以获取文本节点\n    $children.forEach(function (curElem) {\n        var elemResult = void 0;\n        var nodeType = curElem.nodeType;\n\n        // 文本节点\n        if (nodeType === 3) {\n            elemResult = curElem.textContent;\n            elemResult = replaceHtmlSymbol(elemResult);\n        }\n\n        // 普通 DOM 节点\n        if (nodeType === 1) {\n            elemResult = {};\n\n            // tag\n            elemResult.tag = curElem.nodeName.toLowerCase();\n            // attr\n            var attrData = [];\n            var attrList = curElem.attributes || {};\n            var attrListLength = attrList.length || 0;\n            for (var i = 0; i < attrListLength; i++) {\n                var attr = attrList[i];\n                attrData.push({\n                    name: attr.name,\n                    value: attr.value\n                });\n            }\n            elemResult.attrs = attrData;\n            // children（递归）\n            elemResult.children = getChildrenJSON($(curElem));\n        }\n\n        result.push(elemResult);\n    });\n    return result;\n}\n\n// 构造函数\nfunction Text(editor) {\n    this.editor = editor;\n}\n\n// 修改原型\nText.prototype = {\n    constructor: Text,\n\n    // 初始化\n    init: function init() {\n        // 绑定事件\n        this._bindEvent();\n    },\n\n    // 清空内容\n    clear: function clear() {\n        this.html('<p><br></p>');\n    },\n\n    // 获取 设置 html\n    html: function html(val) {\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n        var html = void 0;\n        if (val == null) {\n            html = $textElem.html();\n            // 未选中任何内容的时候点击“加粗”或者“斜体”等按钮，就得需要一个空的占位符 &#8203 ，这里替换掉\n            html = html.replace(/\\u200b/gm, '');\n            return html;\n        } else {\n            $textElem.html(val);\n\n            // 初始化选取，将光标定位到内容尾部\n            editor.initSelection();\n        }\n    },\n\n    // 获取 JSON\n    getJSON: function getJSON() {\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n        return getChildrenJSON($textElem);\n    },\n\n    // 获取 设置 text\n    text: function text(val) {\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n        var text = void 0;\n        if (val == null) {\n            text = $textElem.text();\n            // 未选中任何内容的时候点击“加粗”或者“斜体”等按钮，就得需要一个空的占位符 &#8203 ，这里替换掉\n            text = text.replace(/\\u200b/gm, '');\n            return text;\n        } else {\n            $textElem.text('<p>' + val + '</p>');\n\n            // 初始化选取，将光标定位到内容尾部\n            editor.initSelection();\n        }\n    },\n\n    // 追加内容\n    append: function append(html) {\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n        $textElem.append($(html));\n\n        // 初始化选取，将光标定位到内容尾部\n        editor.initSelection();\n    },\n\n    // 绑定事件\n    _bindEvent: function _bindEvent() {\n        // 实时保存选取\n        this._saveRangeRealTime();\n\n        // 按回车建时的特殊处理\n        this._enterKeyHandle();\n\n        // 清空时保留 <p><br></p>\n        this._clearHandle();\n\n        // 粘贴事件（粘贴文字，粘贴图片）\n        this._pasteHandle();\n\n        // tab 特殊处理\n        this._tabHandle();\n\n        // img 点击\n        this._imgHandle();\n\n        // 拖拽事件\n        this._dragHandle();\n    },\n\n    // 实时保存选取\n    _saveRangeRealTime: function _saveRangeRealTime() {\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n\n        // 保存当前的选区\n        function saveRange(e) {\n            // 随时保存选区\n            editor.selection.saveRange();\n            // 更新按钮 ative 状态\n            editor.menus.changeActive();\n        }\n        // 按键后保存\n        $textElem.on('keyup', saveRange);\n        $textElem.on('mousedown', function (e) {\n            // mousedown 状态下，鼠标滑动到编辑区域外面，也需要保存选区\n            $textElem.on('mouseleave', saveRange);\n        });\n        $textElem.on('mouseup', function (e) {\n            saveRange();\n            // 在编辑器区域之内完成点击，取消鼠标滑动到编辑区外面的事件\n            $textElem.off('mouseleave', saveRange);\n        });\n    },\n\n    // 按回车键时的特殊处理\n    _enterKeyHandle: function _enterKeyHandle() {\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n\n        function insertEmptyP($selectionElem) {\n            var $p = $('<p><br></p>');\n            $p.insertBefore($selectionElem);\n            editor.selection.createRangeByElem($p, true);\n            editor.selection.restoreSelection();\n            $selectionElem.remove();\n        }\n\n        // 将回车之后生成的非 <p> 的顶级标签，改为 <p>\n        function pHandle(e) {\n            var $selectionElem = editor.selection.getSelectionContainerElem();\n            var $parentElem = $selectionElem.parent();\n\n            if ($parentElem.html() === '<code><br></code>') {\n                // 回车之前光标所在一个 <p><code>.....</code></p> ，忽然回车生成一个空的 <p><code><br></code></p>\n                // 而且继续回车跳不出去，因此只能特殊处理\n                insertEmptyP($selectionElem);\n                return;\n            }\n\n            if (!$parentElem.equal($textElem)) {\n                // 不是顶级标签\n                return;\n            }\n\n            var nodeName = $selectionElem.getNodeName();\n            if (nodeName === 'P') {\n                // 当前的标签是 P ，不用做处理\n                return;\n            }\n\n            if ($selectionElem.text()) {\n                // 有内容，不做处理\n                return;\n            }\n\n            // 插入 <p> ，并将选取定位到 <p>，删除当前标签\n            insertEmptyP($selectionElem);\n        }\n\n        $textElem.on('keyup', function (e) {\n            if (e.keyCode !== 13) {\n                // 不是回车键\n                return;\n            }\n            // 将回车之后生成的非 <p> 的顶级标签，改为 <p>\n            pHandle(e);\n        });\n\n        // <pre><code></code></pre> 回车时 特殊处理\n        function codeHandle(e) {\n            var $selectionElem = editor.selection.getSelectionContainerElem();\n            if (!$selectionElem) {\n                return;\n            }\n            var $parentElem = $selectionElem.parent();\n            var selectionNodeName = $selectionElem.getNodeName();\n            var parentNodeName = $parentElem.getNodeName();\n\n            if (selectionNodeName !== 'CODE' || parentNodeName !== 'PRE') {\n                // 不符合要求 忽略\n                return;\n            }\n\n            if (!editor.cmd.queryCommandSupported('insertHTML')) {\n                // 必须原生支持 insertHTML 命令\n                return;\n            }\n\n            // 处理：光标定位到代码末尾，联系点击两次回车，即跳出代码块\n            if (editor._willBreakCode === true) {\n                // 此时可以跳出代码块\n                // 插入 <p> ，并将选取定位到 <p>\n                var $p = $('<p><br></p>');\n                $p.insertAfter($parentElem);\n                editor.selection.createRangeByElem($p, true);\n                editor.selection.restoreSelection();\n\n                // 修改状态\n                editor._willBreakCode = false;\n\n                e.preventDefault();\n                return;\n            }\n\n            var _startOffset = editor.selection.getRange().startOffset;\n\n            // 处理：回车时，不能插入 <br> 而是插入 \\n ，因为是在 pre 标签里面\n            editor.cmd.do('insertHTML', '\\n');\n            editor.selection.saveRange();\n            if (editor.selection.getRange().startOffset === _startOffset) {\n                // 没起作用，再来一遍\n                editor.cmd.do('insertHTML', '\\n');\n            }\n\n            var codeLength = $selectionElem.html().length;\n            if (editor.selection.getRange().startOffset + 1 === codeLength) {\n                // 说明光标在代码最后的位置，执行了回车操作\n                // 记录下来，以便下次回车时候跳出 code\n                editor._willBreakCode = true;\n            }\n\n            // 阻止默认行为\n            e.preventDefault();\n        }\n\n        $textElem.on('keydown', function (e) {\n            if (e.keyCode !== 13) {\n                // 不是回车键\n                // 取消即将跳转代码块的记录\n                editor._willBreakCode = false;\n                return;\n            }\n            // <pre><code></code></pre> 回车时 特殊处理\n            codeHandle(e);\n        });\n    },\n\n    // 清空时保留 <p><br></p>\n    _clearHandle: function _clearHandle() {\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n\n        $textElem.on('keydown', function (e) {\n            if (e.keyCode !== 8) {\n                return;\n            }\n            var txtHtml = $textElem.html().toLowerCase().trim();\n            if (txtHtml === '<p><br></p>') {\n                // 最后剩下一个空行，就不再删除了\n                e.preventDefault();\n                return;\n            }\n        });\n\n        $textElem.on('keyup', function (e) {\n            if (e.keyCode !== 8) {\n                return;\n            }\n            var $p = void 0;\n            var txtHtml = $textElem.html().toLowerCase().trim();\n\n            // firefox 时用 txtHtml === '<br>' 判断，其他用 !txtHtml 判断\n            if (!txtHtml || txtHtml === '<br>') {\n                // 内容空了\n                $p = $('<p><br/></p>');\n                $textElem.html(''); // 一定要先清空，否则在 firefox 下有问题\n                $textElem.append($p);\n                editor.selection.createRangeByElem($p, false, true);\n                editor.selection.restoreSelection();\n            }\n        });\n    },\n\n    // 粘贴事件（粘贴文字 粘贴图片）\n    _pasteHandle: function _pasteHandle() {\n        var editor = this.editor;\n        var config = editor.config;\n        var pasteFilterStyle = config.pasteFilterStyle;\n        var pasteTextHandle = config.pasteTextHandle;\n        var ignoreImg = config.pasteIgnoreImg;\n        var $textElem = editor.$textElem;\n\n        // 粘贴图片、文本的事件，每次只能执行一个\n        // 判断该次粘贴事件是否可以执行\n        var pasteTime = 0;\n        function canDo() {\n            var now = Date.now();\n            var flag = false;\n            if (now - pasteTime >= 100) {\n                // 间隔大于 100 ms ，可以执行\n                flag = true;\n            }\n            pasteTime = now;\n            return flag;\n        }\n        function resetTime() {\n            pasteTime = 0;\n        }\n\n        // 粘贴文字\n        $textElem.on('paste', function (e) {\n            if (UA.isIE()) {\n                return;\n            } else {\n                // 阻止默认行为，使用 execCommand 的粘贴命令\n                e.preventDefault();\n            }\n\n            // 粘贴图片和文本，只能同时使用一个\n            if (!canDo()) {\n                return;\n            }\n\n            // 获取粘贴的文字\n            var pasteHtml = getPasteHtml(e, pasteFilterStyle, ignoreImg);\n            var pasteText = getPasteText(e);\n            pasteText = pasteText.replace(/\\n/gm, '<br>');\n\n            var $selectionElem = editor.selection.getSelectionContainerElem();\n            if (!$selectionElem) {\n                return;\n            }\n            var nodeName = $selectionElem.getNodeName();\n\n            // code 中只能粘贴纯文本\n            if (nodeName === 'CODE' || nodeName === 'PRE') {\n                if (pasteTextHandle && isFunction(pasteTextHandle)) {\n                    // 用户自定义过滤处理粘贴内容\n                    pasteText = '' + (pasteTextHandle(pasteText) || '');\n                }\n                editor.cmd.do('insertHTML', '<p>' + pasteText + '</p>');\n                return;\n            }\n\n            // 先放开注释，有问题再追查 ————\n            // // 表格中忽略，可能会出现异常问题\n            // if (nodeName === 'TD' || nodeName === 'TH') {\n            //     return\n            // }\n\n            if (!pasteHtml) {\n                // 没有内容，可继续执行下面的图片粘贴\n                resetTime();\n                return;\n            }\n            try {\n                // firefox 中，获取的 pasteHtml 可能是没有 <ul> 包裹的 <li>\n                // 因此执行 insertHTML 会报错\n                if (pasteTextHandle && isFunction(pasteTextHandle)) {\n                    // 用户自定义过滤处理粘贴内容\n                    pasteHtml = '' + (pasteTextHandle(pasteHtml) || '');\n                }\n                editor.cmd.do('insertHTML', pasteHtml);\n            } catch (ex) {\n                // 此时使用 pasteText 来兼容一下\n                if (pasteTextHandle && isFunction(pasteTextHandle)) {\n                    // 用户自定义过滤处理粘贴内容\n                    pasteText = '' + (pasteTextHandle(pasteText) || '');\n                }\n                editor.cmd.do('insertHTML', '<p>' + pasteText + '</p>');\n            }\n        });\n\n        // 粘贴图片\n        $textElem.on('paste', function (e) {\n            if (UA.isIE()) {\n                return;\n            } else {\n                e.preventDefault();\n            }\n\n            // 粘贴图片和文本，只能同时使用一个\n            if (!canDo()) {\n                return;\n            }\n\n            // 获取粘贴的图片\n            var pasteFiles = getPasteImgs(e);\n            if (!pasteFiles || !pasteFiles.length) {\n                return;\n            }\n\n            // 获取当前的元素\n            var $selectionElem = editor.selection.getSelectionContainerElem();\n            if (!$selectionElem) {\n                return;\n            }\n            var nodeName = $selectionElem.getNodeName();\n\n            // code 中粘贴忽略\n            if (nodeName === 'CODE' || nodeName === 'PRE') {\n                return;\n            }\n\n            // 上传图片\n            var uploadImg = editor.uploadImg;\n            uploadImg.uploadImg(pasteFiles);\n        });\n    },\n\n    // tab 特殊处理\n    _tabHandle: function _tabHandle() {\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n\n        $textElem.on('keydown', function (e) {\n            if (e.keyCode !== 9) {\n                return;\n            }\n            if (!editor.cmd.queryCommandSupported('insertHTML')) {\n                // 必须原生支持 insertHTML 命令\n                return;\n            }\n            var $selectionElem = editor.selection.getSelectionContainerElem();\n            if (!$selectionElem) {\n                return;\n            }\n            var $parentElem = $selectionElem.parent();\n            var selectionNodeName = $selectionElem.getNodeName();\n            var parentNodeName = $parentElem.getNodeName();\n\n            if (selectionNodeName === 'CODE' && parentNodeName === 'PRE') {\n                // <pre><code> 里面\n                editor.cmd.do('insertHTML', '    ');\n            } else {\n                // 普通文字\n                editor.cmd.do('insertHTML', '&nbsp;&nbsp;&nbsp;&nbsp;');\n            }\n\n            e.preventDefault();\n        });\n    },\n\n    // img 点击\n    _imgHandle: function _imgHandle() {\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n\n        // 为图片增加 selected 样式\n        $textElem.on('click', 'img', function (e) {\n            var img = this;\n            var $img = $(img);\n\n            if ($img.attr('data-w-e') === '1') {\n                // 是表情图片，忽略\n                return;\n            }\n\n            // 记录当前点击过的图片\n            editor._selectedImg = $img;\n\n            // 修改选区并 restore ，防止用户此时点击退格键，会删除其他内容\n            editor.selection.createRangeByElem($img);\n            editor.selection.restoreSelection();\n        });\n\n        // 去掉图片的 selected 样式\n        $textElem.on('click  keyup', function (e) {\n            if (e.target.matches('img')) {\n                // 点击的是图片，忽略\n                return;\n            }\n            // 删除记录\n            editor._selectedImg = null;\n        });\n    },\n\n    // 拖拽事件\n    _dragHandle: function _dragHandle() {\n        var editor = this.editor;\n\n        // 禁用 document 拖拽事件\n        var $document = $(document);\n        $document.on('dragleave drop dragenter dragover', function (e) {\n            e.preventDefault();\n        });\n\n        // 添加编辑区域拖拽事件\n        var $textElem = editor.$textElem;\n        $textElem.on('drop', function (e) {\n            e.preventDefault();\n            var files = e.dataTransfer && e.dataTransfer.files;\n            if (!files || !files.length) {\n                return;\n            }\n\n            // 上传图片\n            var uploadImg = editor.uploadImg;\n            uploadImg.uploadImg(files);\n        });\n    }\n};\n\n/*\n    命令，封装 document.execCommand\n*/\n\n// 构造函数\nfunction Command(editor) {\n    this.editor = editor;\n}\n\n// 修改原型\nCommand.prototype = {\n    constructor: Command,\n\n    // 执行命令\n    do: function _do(name, value) {\n        var editor = this.editor;\n\n        // 使用 styleWithCSS\n        if (!editor._useStyleWithCSS) {\n            document.execCommand('styleWithCSS', null, true);\n            editor._useStyleWithCSS = true;\n        }\n\n        // 如果无选区，忽略\n        if (!editor.selection.getRange()) {\n            return;\n        }\n\n        // 恢复选取\n        editor.selection.restoreSelection();\n\n        // 执行\n        var _name = '_' + name;\n        if (this[_name]) {\n            // 有自定义事件\n            this[_name](value);\n        } else {\n            // 默认 command\n            this._execCommand(name, value);\n        }\n\n        // 修改菜单状态\n        editor.menus.changeActive();\n\n        // 最后，恢复选取保证光标在原来的位置闪烁\n        editor.selection.saveRange();\n        editor.selection.restoreSelection();\n\n        // 触发 onchange\n        editor.change && editor.change();\n    },\n\n    // 自定义 insertHTML 事件\n    _insertHTML: function _insertHTML(html) {\n        var editor = this.editor;\n        var range = editor.selection.getRange();\n\n        if (this.queryCommandSupported('insertHTML')) {\n            // W3C\n            this._execCommand('insertHTML', html);\n        } else if (range.insertNode) {\n            // IE\n            range.deleteContents();\n            range.insertNode($(html)[0]);\n        } else if (range.pasteHTML) {\n            // IE <= 10\n            range.pasteHTML(html);\n        }\n    },\n\n    // 插入 elem\n    _insertElem: function _insertElem($elem) {\n        var editor = this.editor;\n        var range = editor.selection.getRange();\n\n        if (range.insertNode) {\n            range.deleteContents();\n            range.insertNode($elem[0]);\n        }\n    },\n\n    // 封装 execCommand\n    _execCommand: function _execCommand(name, value) {\n        document.execCommand(name, false, value);\n    },\n\n    // 封装 document.queryCommandValue\n    queryCommandValue: function queryCommandValue(name) {\n        return document.queryCommandValue(name);\n    },\n\n    // 封装 document.queryCommandState\n    queryCommandState: function queryCommandState(name) {\n        return document.queryCommandState(name);\n    },\n\n    // 封装 document.queryCommandSupported\n    queryCommandSupported: function queryCommandSupported(name) {\n        return document.queryCommandSupported(name);\n    }\n};\n\n/*\n    selection range API\n*/\n\n// 构造函数\nfunction API(editor) {\n    this.editor = editor;\n    this._currentRange = null;\n}\n\n// 修改原型\nAPI.prototype = {\n    constructor: API,\n\n    // 获取 range 对象\n    getRange: function getRange() {\n        return this._currentRange;\n    },\n\n    // 保存选区\n    saveRange: function saveRange(_range) {\n        if (_range) {\n            // 保存已有选区\n            this._currentRange = _range;\n            return;\n        }\n\n        // 获取当前的选区\n        var selection = window.getSelection();\n        if (selection.rangeCount === 0) {\n            return;\n        }\n        var range = selection.getRangeAt(0);\n\n        // 判断选区内容是否在编辑内容之内\n        var $containerElem = this.getSelectionContainerElem(range);\n        if (!$containerElem) {\n            return;\n        }\n\n        // 判断选区内容是否在不可编辑区域之内\n        if ($containerElem.attr('contenteditable') === 'false' || $containerElem.parentUntil('[contenteditable=false]')) {\n            return;\n        }\n\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n        if ($textElem.isContain($containerElem)) {\n            // 是编辑内容之内的\n            this._currentRange = range;\n        }\n    },\n\n    // 折叠选区\n    collapseRange: function collapseRange(toStart) {\n        if (toStart == null) {\n            // 默认为 false\n            toStart = false;\n        }\n        var range = this._currentRange;\n        if (range) {\n            range.collapse(toStart);\n        }\n    },\n\n    // 选中区域的文字\n    getSelectionText: function getSelectionText() {\n        var range = this._currentRange;\n        if (range) {\n            return this._currentRange.toString();\n        } else {\n            return '';\n        }\n    },\n\n    // 选区的 $Elem\n    getSelectionContainerElem: function getSelectionContainerElem(range) {\n        range = range || this._currentRange;\n        var elem = void 0;\n        if (range) {\n            elem = range.commonAncestorContainer;\n            return $(elem.nodeType === 1 ? elem : elem.parentNode);\n        }\n    },\n    getSelectionStartElem: function getSelectionStartElem(range) {\n        range = range || this._currentRange;\n        var elem = void 0;\n        if (range) {\n            elem = range.startContainer;\n            return $(elem.nodeType === 1 ? elem : elem.parentNode);\n        }\n    },\n    getSelectionEndElem: function getSelectionEndElem(range) {\n        range = range || this._currentRange;\n        var elem = void 0;\n        if (range) {\n            elem = range.endContainer;\n            return $(elem.nodeType === 1 ? elem : elem.parentNode);\n        }\n    },\n\n    // 选区是否为空\n    isSelectionEmpty: function isSelectionEmpty() {\n        var range = this._currentRange;\n        if (range && range.startContainer) {\n            if (range.startContainer === range.endContainer) {\n                if (range.startOffset === range.endOffset) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    },\n\n    // 恢复选区\n    restoreSelection: function restoreSelection() {\n        var selection = window.getSelection();\n        selection.removeAllRanges();\n        selection.addRange(this._currentRange);\n    },\n\n    // 创建一个空白（即 &#8203 字符）选区\n    createEmptyRange: function createEmptyRange() {\n        var editor = this.editor;\n        var range = this.getRange();\n        var $elem = void 0;\n\n        if (!range) {\n            // 当前无 range\n            return;\n        }\n        if (!this.isSelectionEmpty()) {\n            // 当前选区必须没有内容才可以\n            return;\n        }\n\n        try {\n            // 目前只支持 webkit 内核\n            if (UA.isWebkit()) {\n                // 插入 &#8203\n                editor.cmd.do('insertHTML', '&#8203;');\n                // 修改 offset 位置\n                range.setEnd(range.endContainer, range.endOffset + 1);\n                // 存储\n                this.saveRange(range);\n            } else {\n                $elem = $('<strong>&#8203;</strong>');\n                editor.cmd.do('insertElem', $elem);\n                this.createRangeByElem($elem, true);\n            }\n        } catch (ex) {\n            // 部分情况下会报错，兼容一下\n        }\n    },\n\n    // 根据 $Elem 设置选区\n    createRangeByElem: function createRangeByElem($elem, toStart, isContent) {\n        // $elem - 经过封装的 elem\n        // toStart - true 开始位置，false 结束位置\n        // isContent - 是否选中Elem的内容\n        if (!$elem.length) {\n            return;\n        }\n\n        var elem = $elem[0];\n        var range = document.createRange();\n\n        if (isContent) {\n            range.selectNodeContents(elem);\n        } else {\n            range.selectNode(elem);\n        }\n\n        if (typeof toStart === 'boolean') {\n            range.collapse(toStart);\n        }\n\n        // 存储 range\n        this.saveRange(range);\n    }\n};\n\n/*\n    上传进度条\n*/\n\nfunction Progress(editor) {\n    this.editor = editor;\n    this._time = 0;\n    this._isShow = false;\n    this._isRender = false;\n    this._timeoutId = 0;\n    this.$textContainer = editor.$textContainerElem;\n    this.$bar = $('<div class=\"w-e-progress\"></div>');\n}\n\nProgress.prototype = {\n    constructor: Progress,\n\n    show: function show(progress) {\n        var _this = this;\n\n        // 状态处理\n        if (this._isShow) {\n            return;\n        }\n        this._isShow = true;\n\n        // 渲染\n        var $bar = this.$bar;\n        if (!this._isRender) {\n            var $textContainer = this.$textContainer;\n            $textContainer.append($bar);\n        } else {\n            this._isRender = true;\n        }\n\n        // 改变进度（节流，100ms 渲染一次）\n        if (Date.now() - this._time > 100) {\n            if (progress <= 1) {\n                $bar.css('width', progress * 100 + '%');\n                this._time = Date.now();\n            }\n        }\n\n        // 隐藏\n        var timeoutId = this._timeoutId;\n        if (timeoutId) {\n            clearTimeout(timeoutId);\n        }\n        timeoutId = setTimeout(function () {\n            _this._hide();\n        }, 500);\n    },\n\n    _hide: function _hide() {\n        var $bar = this.$bar;\n        $bar.remove();\n\n        // 修改状态\n        this._time = 0;\n        this._isShow = false;\n        this._isRender = false;\n    }\n};\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\n/*\n    上传图片\n*/\n\n// 构造函数\nfunction UploadImg(editor) {\n    this.editor = editor;\n}\n\n// 原型\nUploadImg.prototype = {\n    constructor: UploadImg,\n\n    // 根据 debug 弹出不同的信息\n    _alert: function _alert(alertInfo, debugInfo) {\n        var editor = this.editor;\n        var debug = editor.config.debug;\n        var customAlert = editor.config.customAlert;\n\n        if (debug) {\n            throw new Error('wangEditor: ' + (debugInfo || alertInfo));\n        } else {\n            if (customAlert && typeof customAlert === 'function') {\n                customAlert(alertInfo);\n            } else {\n                alert(alertInfo);\n            }\n        }\n    },\n\n    // 根据链接插入图片\n    insertLinkImg: function insertLinkImg(link) {\n        var _this2 = this;\n\n        if (!link) {\n            return;\n        }\n        var editor = this.editor;\n        var config = editor.config;\n\n        // 校验格式\n        var linkImgCheck = config.linkImgCheck;\n        var checkResult = void 0;\n        if (linkImgCheck && typeof linkImgCheck === 'function') {\n            checkResult = linkImgCheck(link);\n            if (typeof checkResult === 'string') {\n                // 校验失败，提示信息\n                alert(checkResult);\n                return;\n            }\n        }\n\n        editor.cmd.do('insertHTML', '<img src=\"' + link + '\" style=\"max-width:100%;\"/>');\n\n        // 验证图片 url 是否有效，无效的话给出提示\n        var img = document.createElement('img');\n        img.onload = function () {\n            var callback = config.linkImgCallback;\n            if (callback && typeof callback === 'function') {\n                callback(link);\n            }\n\n            img = null;\n        };\n        img.onerror = function () {\n            img = null;\n            // 无法成功下载图片\n            _this2._alert('插入图片错误', 'wangEditor: \\u63D2\\u5165\\u56FE\\u7247\\u51FA\\u9519\\uFF0C\\u56FE\\u7247\\u94FE\\u63A5\\u662F \"' + link + '\"\\uFF0C\\u4E0B\\u8F7D\\u8BE5\\u94FE\\u63A5\\u5931\\u8D25');\n            return;\n        };\n        img.onabort = function () {\n            img = null;\n        };\n        img.src = link;\n    },\n\n    // 上传图片\n    uploadImg: function uploadImg(files) {\n        var _this3 = this;\n\n        if (!files || !files.length) {\n            return;\n        }\n\n        // ------------------------------ 获取配置信息 ------------------------------\n        var editor = this.editor;\n        var config = editor.config;\n        var uploadImgServer = config.uploadImgServer;\n        var uploadImgShowBase64 = config.uploadImgShowBase64;\n\n        var maxSize = config.uploadImgMaxSize;\n        var maxSizeM = maxSize / 1024 / 1024;\n        var maxLength = config.uploadImgMaxLength || 10000;\n        var uploadFileName = config.uploadFileName || '';\n        var uploadImgParams = config.uploadImgParams || {};\n        var uploadImgParamsWithUrl = config.uploadImgParamsWithUrl;\n        var uploadImgHeaders = config.uploadImgHeaders || {};\n        var hooks = config.uploadImgHooks || {};\n        var timeout = config.uploadImgTimeout || 3000;\n        var withCredentials = config.withCredentials;\n        if (withCredentials == null) {\n            withCredentials = false;\n        }\n        var customUploadImg = config.customUploadImg;\n\n        if (!customUploadImg) {\n            // 没有 customUploadImg 的情况下，需要如下两个配置才能继续进行图片上传\n            if (!uploadImgServer && !uploadImgShowBase64) {\n                return;\n            }\n        }\n\n        // ------------------------------ 验证文件信息 ------------------------------\n        var resultFiles = [];\n        var errInfo = [];\n        arrForEach(files, function (file) {\n            var name = file.name;\n            var size = file.size;\n\n            // chrome 低版本 name === undefined\n            if (!name || !size) {\n                return;\n            }\n\n            if (/\\.(jpg|jpeg|png|bmp|gif|webp)$/i.test(name) === false) {\n                // 后缀名不合法，不是图片\n                errInfo.push('\\u3010' + name + '\\u3011\\u4E0D\\u662F\\u56FE\\u7247');\n                return;\n            }\n            if (maxSize < size) {\n                // 上传图片过大\n                errInfo.push('\\u3010' + name + '\\u3011\\u5927\\u4E8E ' + maxSizeM + 'M');\n                return;\n            }\n\n            // 验证通过的加入结果列表\n            resultFiles.push(file);\n        });\n        // 抛出验证信息\n        if (errInfo.length) {\n            this._alert('图片验证未通过: \\n' + errInfo.join('\\n'));\n            return;\n        }\n        if (resultFiles.length > maxLength) {\n            this._alert('一次最多上传' + maxLength + '张图片');\n            return;\n        }\n\n        // ------------------------------ 自定义上传 ------------------------------\n        if (customUploadImg && typeof customUploadImg === 'function') {\n            customUploadImg(resultFiles, this.insertLinkImg.bind(this));\n\n            // 阻止以下代码执行\n            return;\n        }\n\n        // 添加图片数据\n        var formdata = new FormData();\n        arrForEach(resultFiles, function (file) {\n            var name = uploadFileName || file.name;\n            formdata.append(name, file);\n        });\n\n        // ------------------------------ 上传图片 ------------------------------\n        if (uploadImgServer && typeof uploadImgServer === 'string') {\n            // 添加参数\n            var uploadImgServerArr = uploadImgServer.split('#');\n            uploadImgServer = uploadImgServerArr[0];\n            var uploadImgServerHash = uploadImgServerArr[1] || '';\n            objForEach(uploadImgParams, function (key, val) {\n                // 因使用者反应，自定义参数不能默认 encode ，由 v3.1.1 版本开始注释掉\n                // val = encodeURIComponent(val)\n\n                // 第一，将参数拼接到 url 中\n                if (uploadImgParamsWithUrl) {\n                    if (uploadImgServer.indexOf('?') > 0) {\n                        uploadImgServer += '&';\n                    } else {\n                        uploadImgServer += '?';\n                    }\n                    uploadImgServer = uploadImgServer + key + '=' + val;\n                }\n\n                // 第二，将参数添加到 formdata 中\n                formdata.append(key, val);\n            });\n            if (uploadImgServerHash) {\n                uploadImgServer += '#' + uploadImgServerHash;\n            }\n\n            // 定义 xhr\n            var xhr = new XMLHttpRequest();\n            xhr.open('POST', uploadImgServer);\n\n            // 设置超时\n            xhr.timeout = timeout;\n            xhr.ontimeout = function () {\n                // hook - timeout\n                if (hooks.timeout && typeof hooks.timeout === 'function') {\n                    hooks.timeout(xhr, editor);\n                }\n\n                _this3._alert('上传图片超时');\n            };\n\n            // 监控 progress\n            if (xhr.upload) {\n                xhr.upload.onprogress = function (e) {\n                    var percent = void 0;\n                    // 进度条\n                    var progressBar = new Progress(editor);\n                    if (e.lengthComputable) {\n                        percent = e.loaded / e.total;\n                        progressBar.show(percent);\n                    }\n                };\n            }\n\n            // 返回数据\n            xhr.onreadystatechange = function () {\n                var result = void 0;\n                if (xhr.readyState === 4) {\n                    if (xhr.status < 200 || xhr.status >= 300) {\n                        // hook - error\n                        if (hooks.error && typeof hooks.error === 'function') {\n                            hooks.error(xhr, editor);\n                        }\n\n                        // xhr 返回状态错误\n                        _this3._alert('上传图片发生错误', '\\u4E0A\\u4F20\\u56FE\\u7247\\u53D1\\u751F\\u9519\\u8BEF\\uFF0C\\u670D\\u52A1\\u5668\\u8FD4\\u56DE\\u72B6\\u6001\\u662F ' + xhr.status);\n                        return;\n                    }\n\n                    result = xhr.responseText;\n                    if ((typeof result === 'undefined' ? 'undefined' : _typeof(result)) !== 'object') {\n                        try {\n                            result = JSON.parse(result);\n                        } catch (ex) {\n                            // hook - fail\n                            if (hooks.fail && typeof hooks.fail === 'function') {\n                                hooks.fail(xhr, editor, result);\n                            }\n\n                            _this3._alert('上传图片失败', '上传图片返回结果错误，返回结果是: ' + result);\n                            return;\n                        }\n                    }\n                    if (!hooks.customInsert && result.errno != '0') {\n                        // hook - fail\n                        if (hooks.fail && typeof hooks.fail === 'function') {\n                            hooks.fail(xhr, editor, result);\n                        }\n\n                        // 数据错误\n                        _this3._alert('上传图片失败', '上传图片返回结果错误，返回结果 errno=' + result.errno);\n                    } else {\n                        if (hooks.customInsert && typeof hooks.customInsert === 'function') {\n                            // 使用者自定义插入方法\n                            hooks.customInsert(_this3.insertLinkImg.bind(_this3), result, editor);\n                        } else {\n                            // 将图片插入编辑器\n                            var data = result.data || [];\n                            data.forEach(function (link) {\n                                _this3.insertLinkImg(link);\n                            });\n                        }\n\n                        // hook - success\n                        if (hooks.success && typeof hooks.success === 'function') {\n                            hooks.success(xhr, editor, result);\n                        }\n                    }\n                }\n            };\n\n            // hook - before\n            if (hooks.before && typeof hooks.before === 'function') {\n                var beforeResult = hooks.before(xhr, editor, resultFiles);\n                if (beforeResult && (typeof beforeResult === 'undefined' ? 'undefined' : _typeof(beforeResult)) === 'object') {\n                    if (beforeResult.prevent) {\n                        // 如果返回的结果是 {prevent: true, msg: 'xxxx'} 则表示用户放弃上传\n                        this._alert(beforeResult.msg);\n                        return;\n                    }\n                }\n            }\n\n            // 自定义 headers\n            objForEach(uploadImgHeaders, function (key, val) {\n                xhr.setRequestHeader(key, val);\n            });\n\n            // 跨域传 cookie\n            xhr.withCredentials = withCredentials;\n\n            // 发送请求\n            xhr.send(formdata);\n\n            // 注意，要 return 。不去操作接下来的 base64 显示方式\n            return;\n        }\n\n        // ------------------------------ 显示 base64 格式 ------------------------------\n        if (uploadImgShowBase64) {\n            arrForEach(files, function (file) {\n                var _this = _this3;\n                var reader = new FileReader();\n                reader.readAsDataURL(file);\n                reader.onload = function () {\n                    _this.insertLinkImg(this.result);\n                };\n            });\n        }\n    }\n};\n\n/*\n    编辑器构造函数\n*/\n\n// id，累加\nvar editorId = 1;\n\n// 构造函数\nfunction Editor(toolbarSelector, textSelector) {\n    if (toolbarSelector == null) {\n        // 没有传入任何参数，报错\n        throw new Error('错误：初始化编辑器时候未传入任何参数，请查阅文档');\n    }\n    // id，用以区分单个页面不同的编辑器对象\n    this.id = 'wangEditor-' + editorId++;\n\n    this.toolbarSelector = toolbarSelector;\n    this.textSelector = textSelector;\n\n    // 自定义配置\n    this.customConfig = {};\n}\n\n// 修改原型\nEditor.prototype = {\n    constructor: Editor,\n\n    // 初始化配置\n    _initConfig: function _initConfig() {\n        // _config 是默认配置，this.customConfig 是用户自定义配置，将它们 merge 之后再赋值\n        var target = {};\n        this.config = Object.assign(target, config, this.customConfig);\n\n        // 将语言配置，生成正则表达式\n        var langConfig = this.config.lang || {};\n        var langArgs = [];\n        objForEach(langConfig, function (key, val) {\n            // key 即需要生成正则表达式的规则，如“插入链接”\n            // val 即需要被替换成的语言，如“insert link”\n            langArgs.push({\n                reg: new RegExp(key, 'img'),\n                val: val\n\n            });\n        });\n        this.config.langArgs = langArgs;\n    },\n\n    // 初始化 DOM\n    _initDom: function _initDom() {\n        var _this = this;\n\n        var toolbarSelector = this.toolbarSelector;\n        var $toolbarSelector = $(toolbarSelector);\n        var textSelector = this.textSelector;\n\n        var config$$1 = this.config;\n        var zIndex = config$$1.zIndex;\n\n        // 定义变量\n        var $toolbarElem = void 0,\n            $textContainerElem = void 0,\n            $textElem = void 0,\n            $children = void 0;\n\n        if (textSelector == null) {\n            // 只传入一个参数，即是容器的选择器或元素，toolbar 和 text 的元素自行创建\n            $toolbarElem = $('<div></div>');\n            $textContainerElem = $('<div></div>');\n\n            // 将编辑器区域原有的内容，暂存起来\n            $children = $toolbarSelector.children();\n\n            // 添加到 DOM 结构中\n            $toolbarSelector.append($toolbarElem).append($textContainerElem);\n\n            // 自行创建的，需要配置默认的样式\n            $toolbarElem.css('background-color', '#f1f1f1').css('border', '1px solid #ccc');\n            $textContainerElem.css('border', '1px solid #ccc').css('border-top', 'none').css('height', '300px');\n        } else {\n            // toolbar 和 text 的选择器都有值，记录属性\n            $toolbarElem = $toolbarSelector;\n            $textContainerElem = $(textSelector);\n            // 将编辑器区域原有的内容，暂存起来\n            $children = $textContainerElem.children();\n        }\n\n        // 编辑区域\n        $textElem = $('<div></div>');\n        $textElem.attr('contenteditable', 'true').css('width', '100%').css('height', '100%');\n\n        // 初始化编辑区域内容\n        if ($children && $children.length) {\n            $textElem.append($children);\n        } else {\n            $textElem.append($('<p><br></p>'));\n        }\n\n        // 编辑区域加入DOM\n        $textContainerElem.append($textElem);\n\n        // 设置通用的 class\n        $toolbarElem.addClass('w-e-toolbar');\n        $textContainerElem.addClass('w-e-text-container');\n        $textContainerElem.css('z-index', zIndex);\n        $textElem.addClass('w-e-text');\n\n        // 添加 ID\n        var toolbarElemId = getRandom('toolbar-elem');\n        $toolbarElem.attr('id', toolbarElemId);\n        var textElemId = getRandom('text-elem');\n        $textElem.attr('id', textElemId);\n\n        // 记录属性\n        this.$toolbarElem = $toolbarElem;\n        this.$textContainerElem = $textContainerElem;\n        this.$textElem = $textElem;\n        this.toolbarElemId = toolbarElemId;\n        this.textElemId = textElemId;\n\n        // 记录输入法的开始和结束\n        var compositionEnd = true;\n        $textContainerElem.on('compositionstart', function () {\n            // 输入法开始输入\n            compositionEnd = false;\n        });\n        $textContainerElem.on('compositionend', function () {\n            // 输入法结束输入\n            compositionEnd = true;\n        });\n\n        // 绑定 onchange\n        $textContainerElem.on('click keyup', function () {\n            // 输入法结束才出发 onchange\n            compositionEnd && _this.change && _this.change();\n        });\n        $toolbarElem.on('click', function () {\n            this.change && this.change();\n        });\n\n        //绑定 onfocus 与 onblur 事件\n        if (config$$1.onfocus || config$$1.onblur) {\n            // 当前编辑器是否是焦点状态\n            this.isFocus = false;\n\n            $(document).on('click', function (e) {\n                //判断当前点击元素是否在编辑器内\n                var isChild = $textElem.isContain($(e.target));\n\n                //判断当前点击元素是否为工具栏\n                var isToolbar = $toolbarElem.isContain($(e.target));\n                var isMenu = $toolbarElem[0] == e.target ? true : false;\n\n                if (!isChild) {\n                    //若为选择工具栏中的功能，则不视为成blur操作\n                    if (isToolbar && !isMenu) {\n                        return;\n                    }\n\n                    if (_this.isFocus) {\n                        _this.onblur && _this.onblur();\n                    }\n                    _this.isFocus = false;\n                } else {\n                    if (!_this.isFocus) {\n                        _this.onfocus && _this.onfocus();\n                    }\n                    _this.isFocus = true;\n                }\n            });\n        }\n    },\n\n    // 封装 command\n    _initCommand: function _initCommand() {\n        this.cmd = new Command(this);\n    },\n\n    // 封装 selection range API\n    _initSelectionAPI: function _initSelectionAPI() {\n        this.selection = new API(this);\n    },\n\n    // 添加图片上传\n    _initUploadImg: function _initUploadImg() {\n        this.uploadImg = new UploadImg(this);\n    },\n\n    // 初始化菜单\n    _initMenus: function _initMenus() {\n        this.menus = new Menus(this);\n        this.menus.init();\n    },\n\n    // 添加 text 区域\n    _initText: function _initText() {\n        this.txt = new Text(this);\n        this.txt.init();\n    },\n\n    // 初始化选区，将光标定位到内容尾部\n    initSelection: function initSelection(newLine) {\n        var $textElem = this.$textElem;\n        var $children = $textElem.children();\n        if (!$children.length) {\n            // 如果编辑器区域无内容，添加一个空行，重新设置选区\n            $textElem.append($('<p><br></p>'));\n            this.initSelection();\n            return;\n        }\n\n        var $last = $children.last();\n\n        if (newLine) {\n            // 新增一个空行\n            var html = $last.html().toLowerCase();\n            var nodeName = $last.getNodeName();\n            if (html !== '<br>' && html !== '<br\\/>' || nodeName !== 'P') {\n                // 最后一个元素不是 <p><br></p>，添加一个空行，重新设置选区\n                $textElem.append($('<p><br></p>'));\n                this.initSelection();\n                return;\n            }\n        }\n\n        this.selection.createRangeByElem($last, false, true);\n        // this.selection.restoreSelection();\n    },\n\n    // 绑定事件\n    _bindEvent: function _bindEvent() {\n        // -------- 绑定 onchange 事件 --------\n        var onChangeTimeoutId = 0;\n        var beforeChangeHtml = this.txt.html();\n        var config$$1 = this.config;\n\n        // onchange 触发延迟时间\n        var onchangeTimeout = config$$1.onchangeTimeout;\n        onchangeTimeout = parseInt(onchangeTimeout, 10);\n        if (!onchangeTimeout || onchangeTimeout <= 0) {\n            onchangeTimeout = 200;\n        }\n\n        var onchange = config$$1.onchange;\n        if (onchange && typeof onchange === 'function') {\n            // 触发 change 的有三个场景：\n            // 1. $textContainerElem.on('click keyup')\n            // 2. $toolbarElem.on('click')\n            // 3. editor.cmd.do()\n            this.change = function () {\n                // 判断是否有变化\n                var currentHtml = this.txt.html();\n\n                if (currentHtml.length === beforeChangeHtml.length) {\n                    // 需要比较每一个字符\n                    if (currentHtml === beforeChangeHtml) {\n                        return;\n                    }\n                }\n\n                // 执行，使用节流\n                if (onChangeTimeoutId) {\n                    clearTimeout(onChangeTimeoutId);\n                }\n                onChangeTimeoutId = setTimeout(function () {\n                    // 触发配置的 onchange 函数\n                    onchange(currentHtml);\n                    beforeChangeHtml = currentHtml;\n                }, onchangeTimeout);\n            };\n        }\n\n        // -------- 绑定 onblur 事件 --------\n        var onblur = config$$1.onblur;\n        if (onblur && typeof onblur === 'function') {\n            this.onblur = function () {\n                var currentHtml = this.txt.html();\n                onblur(currentHtml);\n            };\n        }\n\n        // -------- 绑定 onfocus 事件 --------\n        var onfocus = config$$1.onfocus;\n        if (onfocus && typeof onfocus === 'function') {\n            this.onfocus = function () {\n                onfocus();\n            };\n        }\n    },\n\n    // 创建编辑器\n    create: function create() {\n        // 初始化配置信息\n        this._initConfig();\n\n        // 初始化 DOM\n        this._initDom();\n\n        // 封装 command API\n        this._initCommand();\n\n        // 封装 selection range API\n        this._initSelectionAPI();\n\n        // 添加 text\n        this._initText();\n\n        // 初始化菜单\n        this._initMenus();\n\n        // 添加 图片上传\n        this._initUploadImg();\n\n        // 初始化选区，将光标定位到内容尾部\n        this.initSelection(true);\n\n        // 绑定事件\n        this._bindEvent();\n    },\n\n    // 解绑所有事件（暂时不对外开放）\n    _offAllEvent: function _offAllEvent() {\n        $.offAll();\n    }\n};\n\n// 检验是否浏览器环境\ntry {\n    document;\n} catch (ex) {\n    throw new Error('请在浏览器环境下运行');\n}\n\n// polyfill\npolyfill();\n\n// 这里的 `inlinecss` 将被替换成 css 代码的内容，详情可去 ./gulpfile.js 中搜索 `inlinecss` 关键字\nvar inlinecss = '.w-e-toolbar,.w-e-text-container,.w-e-menu-panel {  padding: 0;  margin: 0;  box-sizing: border-box;}.w-e-toolbar *,.w-e-text-container *,.w-e-menu-panel * {  padding: 0;  margin: 0;  box-sizing: border-box;}.w-e-clear-fix:after {  content: \"\";  display: table;  clear: both;}.w-e-toolbar .w-e-droplist {  position: absolute;  left: 0;  top: 0;  background-color: #fff;  border: 1px solid #f1f1f1;  border-right-color: #ccc;  border-bottom-color: #ccc;}.w-e-toolbar .w-e-droplist .w-e-dp-title {  text-align: center;  color: #999;  line-height: 2;  border-bottom: 1px solid #f1f1f1;  font-size: 13px;}.w-e-toolbar .w-e-droplist ul.w-e-list {  list-style: none;  line-height: 1;}.w-e-toolbar .w-e-droplist ul.w-e-list li.w-e-item {  color: #333;  padding: 5px 0;}.w-e-toolbar .w-e-droplist ul.w-e-list li.w-e-item:hover {  background-color: #f1f1f1;}.w-e-toolbar .w-e-droplist ul.w-e-block {  list-style: none;  text-align: left;  padding: 5px;}.w-e-toolbar .w-e-droplist ul.w-e-block li.w-e-item {  display: inline-block;  *display: inline;  *zoom: 1;  padding: 3px 5px;}.w-e-toolbar .w-e-droplist ul.w-e-block li.w-e-item:hover {  background-color: #f1f1f1;}@font-face {  font-family: \\'w-e-icon\\';  src: url(data:application/x-font-woff;charset=utf-8;base64,) format(\\'truetype\\');  font-weight: normal;  font-style: normal;}[class^=\"w-e-icon-\"],[class*=\" w-e-icon-\"] {  /* use !important to prevent issues with browser extensions that change fonts */  font-family: \\'w-e-icon\\' !important;  speak: none;  font-style: normal;  font-weight: normal;  font-variant: normal;  text-transform: none;  line-height: 1;  /* Better Font Rendering =========== */  -webkit-font-smoothing: antialiased;  -moz-osx-font-smoothing: grayscale;}.w-e-icon-close:before {  content: \"\\\\f00d\";}.w-e-icon-upload2:before {  content: \"\\\\e9c6\";}.w-e-icon-trash-o:before {  content: \"\\\\f014\";}.w-e-icon-header:before {  content: \"\\\\f1dc\";}.w-e-icon-pencil2:before {  content: \"\\\\e906\";}.w-e-icon-paint-brush:before {  content: \"\\\\f1fc\";}.w-e-icon-image:before {  content: \"\\\\e90d\";}.w-e-icon-play:before {  content: \"\\\\e912\";}.w-e-icon-location:before {  content: \"\\\\e947\";}.w-e-icon-undo:before {  content: \"\\\\e965\";}.w-e-icon-redo:before {  content: \"\\\\e966\";}.w-e-icon-quotes-left:before {  content: \"\\\\e977\";}.w-e-icon-list-numbered:before {  content: \"\\\\e9b9\";}.w-e-icon-list2:before {  content: \"\\\\e9bb\";}.w-e-icon-link:before {  content: \"\\\\e9cb\";}.w-e-icon-happy:before {  content: \"\\\\e9df\";}.w-e-icon-bold:before {  content: \"\\\\ea62\";}.w-e-icon-underline:before {  content: \"\\\\ea63\";}.w-e-icon-italic:before {  content: \"\\\\ea64\";}.w-e-icon-strikethrough:before {  content: \"\\\\ea65\";}.w-e-icon-table2:before {  content: \"\\\\ea71\";}.w-e-icon-paragraph-left:before {  content: \"\\\\ea77\";}.w-e-icon-paragraph-center:before {  content: \"\\\\ea78\";}.w-e-icon-paragraph-right:before {  content: \"\\\\ea79\";}.w-e-icon-terminal:before {  content: \"\\\\f120\";}.w-e-icon-page-break:before {  content: \"\\\\ea68\";}.w-e-icon-cancel-circle:before {  content: \"\\\\ea0d\";}.w-e-icon-font:before {  content: \"\\\\ea5c\";}.w-e-icon-text-heigh:before {  content: \"\\\\ea5f\";}.w-e-toolbar {  display: -webkit-box;  display: -ms-flexbox;  display: flex;  padding: 0 5px;  /* flex-wrap: wrap; */  /* 单个菜单 */}.w-e-toolbar .w-e-menu {  position: relative;  text-align: center;  padding: 5px 10px;  cursor: pointer;}.w-e-toolbar .w-e-menu i {  color: #999;}.w-e-toolbar .w-e-menu:hover i {  color: #333;}.w-e-toolbar .w-e-active i {  color: #1e88e5;}.w-e-toolbar .w-e-active:hover i {  color: #1e88e5;}.w-e-text-container .w-e-panel-container {  position: absolute;  top: 0;  left: 50%;  border: 1px solid #ccc;  border-top: 0;  box-shadow: 1px 1px 2px #ccc;  color: #333;  background-color: #fff;  /* 为 emotion panel 定制的样式 */  /* 上传图片的 panel 定制样式 */}.w-e-text-container .w-e-panel-container .w-e-panel-close {  position: absolute;  right: 0;  top: 0;  padding: 5px;  margin: 2px 5px 0 0;  cursor: pointer;  color: #999;}.w-e-text-container .w-e-panel-container .w-e-panel-close:hover {  color: #333;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-title {  list-style: none;  display: -webkit-box;  display: -ms-flexbox;  display: flex;  font-size: 14px;  margin: 2px 10px 0 10px;  border-bottom: 1px solid #f1f1f1;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-title .w-e-item {  padding: 3px 5px;  color: #999;  cursor: pointer;  margin: 0 3px;  position: relative;  top: 1px;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-title .w-e-active {  color: #333;  border-bottom: 1px solid #333;  cursor: default;  font-weight: 700;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content {  padding: 10px 15px 10px 15px;  font-size: 16px;  /* 输入框的样式 */  /* 按钮的样式 */}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content input:focus,.w-e-text-container .w-e-panel-container .w-e-panel-tab-content textarea:focus,.w-e-text-container .w-e-panel-container .w-e-panel-tab-content button:focus {  outline: none;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content textarea {  width: 100%;  border: 1px solid #ccc;  padding: 5px;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content textarea:focus {  border-color: #1e88e5;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content input[type=text] {  border: none;  border-bottom: 1px solid #ccc;  font-size: 14px;  height: 20px;  color: #333;  text-align: left;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content input[type=text].small {  width: 30px;  text-align: center;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content input[type=text].block {  display: block;  width: 100%;  margin: 10px 0;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content input[type=text]:focus {  border-bottom: 2px solid #1e88e5;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content .w-e-button-container button {  font-size: 14px;  color: #1e88e5;  border: none;  padding: 5px 10px;  background-color: #fff;  cursor: pointer;  border-radius: 3px;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content .w-e-button-container button.left {  float: left;  margin-right: 10px;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content .w-e-button-container button.right {  float: right;  margin-left: 10px;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content .w-e-button-container button.gray {  color: #999;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content .w-e-button-container button.red {  color: #c24f4a;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content .w-e-button-container button:hover {  background-color: #f1f1f1;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content .w-e-button-container:after {  content: \"\";  display: table;  clear: both;}.w-e-text-container .w-e-panel-container .w-e-emoticon-container .w-e-item {  cursor: pointer;  font-size: 18px;  padding: 0 3px;  display: inline-block;  *display: inline;  *zoom: 1;}.w-e-text-container .w-e-panel-container .w-e-up-img-container {  text-align: center;}.w-e-text-container .w-e-panel-container .w-e-up-img-container .w-e-up-btn {  display: inline-block;  *display: inline;  *zoom: 1;  color: #999;  cursor: pointer;  font-size: 60px;  line-height: 1;}.w-e-text-container .w-e-panel-container .w-e-up-img-container .w-e-up-btn:hover {  color: #333;}.w-e-text-container {  position: relative;}.w-e-text-container .w-e-progress {  position: absolute;  background-color: #1e88e5;  bottom: 0;  left: 0;  height: 1px;}.w-e-text {  padding: 0 10px;  overflow-y: scroll;}.w-e-text p,.w-e-text h1,.w-e-text h2,.w-e-text h3,.w-e-text h4,.w-e-text h5,.w-e-text table,.w-e-text pre {  margin: 10px 0;  line-height: 1.5;}.w-e-text ul,.w-e-text ol {  margin: 10px 0 10px 20px;}.w-e-text blockquote {  display: block;  border-left: 8px solid #d0e5f2;  padding: 5px 10px;  margin: 10px 0;  line-height: 1.4;  font-size: 100%;  background-color: #f1f1f1;}.w-e-text code {  display: inline-block;  *display: inline;  *zoom: 1;  background-color: #f1f1f1;  border-radius: 3px;  padding: 3px 5px;  margin: 0 3px;}.w-e-text pre code {  display: block;}.w-e-text table {  border-top: 1px solid #ccc;  border-left: 1px solid #ccc;}.w-e-text table td,.w-e-text table th {  border-bottom: 1px solid #ccc;  border-right: 1px solid #ccc;  padding: 3px 5px;}.w-e-text table th {  border-bottom: 2px solid #ccc;  text-align: center;}.w-e-text:focus {  outline: none;}.w-e-text img {  cursor: pointer;}.w-e-text img:hover {  box-shadow: 0 0 5px #333;}';\n\n// 将 css 代码添加到 <style> 中\nvar style = document.createElement('style');\nstyle.type = 'text/css';\nstyle.innerHTML = inlinecss;\ndocument.getElementsByTagName('HEAD').item(0).appendChild(style);\n\n// 返回\nvar index = window.wangEditor || Editor;\n\nreturn index;\n\n})));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/wangeditor/release/wangEditor.js\n// module id = sYY+\n// module chunks = 2","// most Object methods by ES6 should accept primitives\nvar $export = require('./_export');\nvar core = require('./_core');\nvar fails = require('./_fails');\nmodule.exports = function (KEY, exec) {\n  var fn = (core.Object || {})[KEY] || Object[KEY];\n  var exp = {};\n  exp[KEY] = exec(fn);\n  $export($export.S + $export.F * fails(function () { fn(1); }), 'Object', exp);\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_object-sap.js\n// module id = uqUo\n// module chunks = 2"],"sourceRoot":""}